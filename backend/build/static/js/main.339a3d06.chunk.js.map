{"version":3,"sources":["assets/ccLogo.svg","assets/user.svg","icons/composeIcon.svg","icons/plusIcon.svg","icons/sendIcon.svg","assets/defaultPostFeaturedImage.jpg","icons/bookmarkEmpty.svg","assets/write_the_first_comment.svg","assets/reply.svg","constants.ts","pages/common/PurpleButton.tsx","pages/login/login.ts","containers/header/Header.tsx","pages/create_post/ImgPanel.tsx","pages/create_post/TextPanel.tsx","pages/common/Avatar.tsx","pages/group/TextFields.tsx","pages/group/AddMuliple.tsx","pages/create_post/TagPanel.tsx","api-auth/fetch-container.ts","api/api.ts","reducers/postsCreationSlice.ts","api-upload/index.ts","pages/create_post/Submit.tsx","pages/create_post/CreatePost.tsx","api/configuration.ts","reducers/commentsSlice.ts","reducers/postsSlice.ts","pages/common/Loading.tsx","pages/common/NotFoundError.tsx","pages/common/NoAccessibilityError.tsx","pages/common/NotLoggedInError.tsx","pages/update_post/TagPanel.tsx","pages/update_post/Submit.tsx","pages/update_post/index.tsx","pages/home/LeftSideBar.tsx","util/helperFunctions.ts","reducers/isLoggedInSlice.ts","reducers/groupsSlice.ts","reducers/userSlice.ts","hooks/useLikePost.ts","pages/home/Card.tsx","pages/home/TagsCarousel.tsx","pages/home/Main.tsx","pages/home/RightSideBar.tsx","pages/common/ErrorPage.tsx","reducers/usersSlice.ts","pages/group/RadioButtons.tsx","pages/group/CreateGroupForm.tsx","pages/group/CreateGroupModal.tsx","pages/group/index.tsx","pages/home/index.tsx","pages/login/DevLogin.tsx","reducers/messagesSlice.ts","reducers/conversationsSlice.ts","pages/messenger/CreateGroupChatForm.tsx","pages/messenger/CreateGroupChatModal.tsx","pages/messenger/SideBar.tsx","pages/messenger/ChatInfo.tsx","pages/messenger/ChatInput.tsx","pages/messenger/ChatMessage.tsx","pages/messenger/NewConversation.tsx","pages/messenger/ChatArea.tsx","pages/messenger/index.tsx","pages/post_detail/NewComment.tsx","pages/post_detail/UpdateButton.tsx","pages/post_detail/ChildComment.tsx","pages/post_detail/TopLevelComment.tsx","ws-dto/comments/dto/createComment.ws.dto.ts","pages/post_detail/Comments.tsx","ws-dto/comments/dto/getCommentsByPostID.ws.dto.ts","pages/common/RedButton.tsx","pages/post_detail/DeletePostButton.tsx","pages/post_detail/index.tsx","pages/search_result/TagCard.tsx","pages/search_result/RightSideBar.tsx","pages/search_result/SearchResult.tsx","pages/create_video_post/VideoUpload.tsx","pages/create_video_post/VideoPanel.tsx","pages/create_video_post/index.tsx","pages/view_profile/ProfileBanner.tsx","pages/view_profile/TradingCard.tsx","pages/view_profile/OwnPostsBoard.tsx","pages/view_profile/OwnProfile.tsx","pages/view_profile/OtherPostsBoard.tsx","pages/view_profile/OtherProfile.tsx","hooks/useFollow.ts","pages/view_profile/ViewProfile.tsx","pages/login/Logout.tsx","pages/experimental/Experimental.tsx","pages/login/LoginGitHub.tsx","pages/search/SearchHomePage.tsx","reducers/search.ts","pages/search/Search.tsx","pages/search/SearchPage.tsx","pages/group_profile/GroupTradingCard.tsx","pages/group_profile/GroupPostsBoard.tsx","pages/group_profile/ViewGroupProfile.tsx","App.tsx","theme.js","reducers/tagsSlice.ts","reducers/videosSlice.ts","reducers/rootReducer.ts","store/index.ts","index.tsx","assets/404.svg","assets/defaultUserProfileBannerImg.jpg","icons/commentIcon.svg","icons/heartIcon.svg","icons/heartIconRed.svg"],"names":["module","exports","ImageType","useStyles","makeStyles","root","backgroundColor","color","width","height","border","borderRadius","fontSize","padding","display","alignItems","PurpleButton","handleClick","content","params","classes","onClick","className","stateContainer","state","initializeGitHubOAuth","uuid","window","location","href","theme","appBar","zIndex","drawer","toolbar","mixins","drawerPaper","boxShadow","menuButton","breakpoints","up","search","shape","paddingTop","paddingBottom","marginRight","marginLeft","spacing","maxWidth","searchIcon","position","pointerEvents","marginTop","inputRoot","inputInput","transition","transitions","create","sectionDesktop","sectionMobile","link","textDecoration","Header","props","ListItemDiv","styled","div","isLoggedIn","useSelector","user","history","useHistory","useDispatch","React","useState","anchorEl","setAnchorEl","mobileMoreAnchorEl","setMobileMoreAnchorEl","isMenuOpen","Boolean","isMobileMenuOpen","handleProfileMenuOpen","event","currentTarget","handleMobileMenuClose","handleMenuClose","menuId","renderMenu","Menu","anchorOrigin","vertical","horizontal","id","keepMounted","transformOrigin","open","onClose","MenuItem","push","userID","renderMobileMenu","IconButton","aria-label","Badge","badgeContent","aria-controls","aria-haspopup","alt","src","profilePic","AppBar","style","Toolbar","edge","handleDrawerToggle","Logo","Typography","InputBase","placeholder","input","inputProps","onKeyDown","keyCode","query","target","value","flex","ListItem","ListItemIcon","to","flexDirection","marginBottom","paddingLeft","paddingRight","button","outline","margin","fontFamily","ImgPanel","setImg","buttonText","withPreview","withIcon","onChange","img","console","log","imgExtension","maxFileSize","singleImage","buttonStyles","cptext","cptitle","cpcontent","fontWeight","overflow","TextPanel","param","title","type","setTitle","setContent","account","accountImg","smallAccountImg","imgTitle","nameTime","TitleText","span","titleSrc","isPost","isText","ExtraText","SideButton","buttonIsClicked","Avatar","small","pic","subtitle","extraText","extraTextOnClick","isButton","subtitleIsDate","setButtonIsClicked","prevState","CssTextField","withStyles","borderBottomColor","TextField","createStyles","flexWrap","TextFields","name","description","setName","setDescription","label","e","required","AddMultiple","options","defaultValID","imgKey","setItems","panelWidth","limit","Autocomplete","multiple","defaultValue","map","disableCloseOnSelect","renderOption","option","getOptionLabel","filterSelectedOptions","renderInput","variant","values","ids","_id","cptag","h4","background","tags","TagPanel","allTagsArr","setPostTags","portableFetchReplacement","path","headers","Headers","localStorage","getItem","err","fetch","BASE_PATH","replace","BaseAPI","configuration","basePath","portableFetch","this","RequiredError","field","msg","Error","AuthApiFetchParamCreator","authControllerLogOut","body","undefined","localVarPath","localVarUrlObj","url","localVarRequestOptions","Object","assign","method","localVarHeaderParameter","localVarQueryParameter","needsSerialization","JSON","stringify","authControllerLoginGitHub","authControllerLoginGoogle","AuthApiFp","localVarFetchArgs","then","response","status","json","AuthApi","DevApiFetchParamCreator","devControllerCreateCustomUser","devControllerCreatePostDev","devControllerGetJwt","encodeURIComponent","String","devControllerLoginDev","devControllerMarco","devControllerMarcoPersonal","DevApiFp","DevApi","GroupsApiFetchParamCreator","groupsControllerCreateGroup","groupsControllerGetGroups","groupsControllerGetPrivateGroup","privateId","groupsControllerGetPublicGroup","groupsControllerJoinGroup","groupsControllerLeaveGroup","GroupsApiFp","GroupsApi","MessagesApiFetchParamCreator","messagesControllerCreateMessage","conversationID","messagesControllerGetMessagesInConversation","MessagesApiFp","MessagesApi","PostsApiFetchParamCreator","postsControllerCreatePost","postsControllerDeletePostByPostID","postID","postsControllerGetPostByID","postsControllerGetPostBySlug","slug","getAuthor","postsControllerIncrementView","postsControllerLikePost","postsControllerUnlikePost","postsControllerUpdatePostBySlug","tagsControllerGetPostsByTag","tagID","requestedCount","startIdx","excludePostIDs","PostsApiFp","PostsApi","SearchApiFp","searchControllerSearch","q","SearchApiFetchParamCreator","SearchApi","TrendingApiFetchParamCreator","trendingControllerGetTrending","fetchCount","trendingControllerGetTrendingLoggedIn","TrendingApiFp","TrendingApi","UserApiFetchParamCreator","userControllerAddFollowing","userControllerEditProfile","userControllerGetUser","userControllerGetUserByUsername","username","userControllerGetUsersByIDs","userControllerRemoveFollowing","userControllerSavePost","UserApiFp","UserApi","VideoApiFetchParamCreator","videoControllerCreateVideo","videoControllerGetAllVideos","VideoApiFp","VideoApi","submitPost","createAsyncThunk","createdPost","a","createPostSuccessDto","post","featuredImg","likes","views","author","comments","commentsCount","createdAt","Date","now","toString","updatePost","update","newSlug","oldSlug","uploadPublicAsset","file","uploadHelper","endpoint","Array","isArray","data","FormData","append","res","result","operation","Submit","dispatch","curUser","onSubmit","newPost","isUpdate","unwrapResult","dto","onCancel","createPost","TagsContainer","CreatePost","postTags","allTags","entities","commentsAdapter","createEntityAdapter","selectId","item","commentsSlice","createSlice","initialState","getInitialState","isLoading","reducers","getCommentsByPostIDSuccess","action","upsertMany","payload","createCommentPending","createCommentSuccess","addOne","comment","parentComment","replies","extraReducers","actions","postsAdapter","fetchTrendingPosts","getState","rejectWithValue","api","initialData","fetchPostsByTag","fetchPostBySlug","fetchPostByID","postsSlice","trendingPosts","trendingPostsSet","slugToID","trendingPostFetchCount","fetchedComments","hasMorePosts","deletePost","removeOne","_","pull","pending","fulfilled","posts","forEach","rejected","upsertOne","increment","updateOne","changes","commentRoot","parentPost","Loading","CircularProgress","NotFoundError","justifyContent","NotFoundSvg","NoAccessibilityError","NotLoggedInError","oldTagsID","UpdatePost","useParams","tagsArray","oldTagsIDArr","oldTagsSet","Set","i","length","has","error","setError","useEffect","catch","cursor","diplayAccount","displayImg","displayName","groupLinks","showPostsText","borderBottom","LeftSideBar","convertArrToMap","arr","reduce","obj","getFollowingFollowersOfUser","users","followingFollowers","followers","concat","following","isLoggedInSlice","loginSuccess","reducer","prepare","jwt","setItem","logOut","removeItem","groupsAdapter","fetchGroups","groups","fetchGroupById","groupID","foundGroup","createGroup","newGroup","successDto","admins","leaveGroup","joinGroup","groupsSlice","currentGroupID","selectGroup","addMany","_private","private","profileBanner","toLocaleString","updatedAt","videos","updateProfile","code","userSlice","savePost","savedPosts","savedPostsSet","toggleLikePost","likedPostsSet","likedPosts","follow","other","followingSet","unfollow","userDto","followersSet","freshlyLoggedInUser","useLikePost","postIsLikedByUser","handleToggleLike","minHeight","interactions","commentIcon","heartIcon","interactionsIcons","readSave","tagText","Card","authorID","DefaultPic","objectFit","previewContent","key","HeartIconRed","HeartIcon","CommentIcon","a11yProps","index","flexGrow","palette","paper","TagsCarousel","setValue","tagsArr","Tabs","newValue","indicatorColor","textColor","scrollButtons","tag","idx","Tab","Main","hasMore","items","currFetchCount","hasMoreTrendingPosts","tabIndex","setTabIndex","hasMorePostsInTags","currentTag","currentTagID","newIdx","keys","postsSet","prev","dataLength","next","loader","endMessage","textAlign","right","savePostSection","overflowY","savePostText","RightSideBar","substr","ErrorPage","top","usersAdapter","fetchUsersByIDs","IDs","join","fetchUserByUsername","usersSlice","usernameToID","authors","icon","backgroundImage","outlineOffset","checkedIcon","StyledRadio","Radio","disableRipple","clsx","RadioButtons","FormControl","component","FormLabel","focused","RadioGroup","row","FormControlLabel","control","TextWrapper","DialogActions","MuiDialogActions","CreateGroupForm","handleClose","people","setPeople","profileBannerFile","setProfileBanner","profilePicFile","setProfilePic","setPrivate","usersMap","loading","setLoading","creatingGroupLoading","setCreatingGroupLoading","handleSubmit","preventDefault","picture","CreateGroupButton","p","DialogTitle","closeButton","grey","children","disableTypography","DialogContent","MuiDialogContent","CreateGroupModal","setOpen","Dialog","aria-labelledby","dividers","GroupContainer","GroupContent","GroupCard","currentGroup","isUserAMember","GroupTab","joinedGroupIDs","otherGroupsIDs","filter","includes","home","main","Home","useRouteMatch","exact","DevLogin","messagesAdapter","fetchMessagesInConversation","messagesSlice","isSending","isTyping","isError","pendingMessages","createMessagePending","newMessage","text","createMessageSuccess","remove","message","createMessageError","receiveNewMessage","conversationsAdapter","conversationSlice","currentConversationID","isGroupConversation","isDirectConversation","addConversation","setNewConversation","selectConversation","createDirectConversationPending","createGroupConversationPending","createConversationSuccess","conversations","messages","CreateGroupChatForm","socket","useContext","SocketContext","otherUsers","current","emit","GroupConversations","groupConv","c","PlusIcon","float","HeadingText","group","CreateGroupChatModal","disableBackdropClick","SideBarContainer","DirectMessages","directConv","ComposeIcon","otherUserID","otherUser","SideBar","ChatInfoContainer","H2","h2","ChatInfoHeader","ChatInfo","currentConversation","uID","Editor","ChatInput","newMessageSelectedUserIDs","editor","useRef","handleSend","innerHTML","createMessageBodyDto","setText","initialMessage","foundExistingConversation","conv","messageDto","Quill","modules","keyboard","bindings","enter","handler","fontStyle","SendIcon","ChatBubble","isUser","ChatMessage","chatMessage","ref","NewConversation","ChatHeader","ChatAreaContainer","GroupChatHeader","conversation","DirectChatHeader","ChatArea","messagesArr","pendingMessagesFromCurrConversation","moment","calendar","pendingMsg","ChatContainer","Messenger","alignContent","NewComment","inputRef","createPending","trim","newCommentDto","UpdateButton","Container","CommentContent","ChildComment","commentID","TopLevelCommentContainer","ChildCommentsContainer","CreateCommentReplyContainer","CreateCommentInfo","CreateCommentReplyInput","TopLevelComment","expanded","setExpanded","openReplyModal","setOpenReplyModal","replyInputRef","currentUser","reply","Modal","closeAfterTransition","BackdropComponent","Backdrop","BackdropProps","timeout","Fade","in","ReplySvg","NoCommentsContainer","SubtleEncouragement","Comments","topLevelComments","ret","WriteThefirstComment","RedButton","DeletePostButton","aria-describedby","DialogContentText","Button","autoFocus","postDetail","shareIcon","Interactions","PostDetail","canUpdate","defaultPostFeaturedImage","BookmarkEmpty","TagCard","endIcon","rightbar","searchoption","filtertags","checked","VideoUpload","preview","changePath","bind","upload","cancel","files","URL","createObjectURL","autoPlay","controls","setState","alert","closeOverlay","accept","_onVideoUpload","VideoPanel","overlayActive","showOverlay","CreateVideoPost","bannerImg","maxHeight","ProfileBanner","imgSrc","TradingCardContainer","AvatarPic","AllCapsName","h3","Subtitle","FollowersAndPostsCountContainer","FollowersCountContainer","PostsCountContainer","BigBoldNumber","SpaceBetweenFollowersAndPosts","SpaceAround","TradingCardButton","TradingCard","isCurrentUser","followHook","toUpperCase","followsOtherUser","isFollowedByOtherUser","handleToggleFollow","PostsContainer","SavedPostsContainer","OwnPostsBoard","tabIdx","setTabIdx","textTransform","FlexSpace","WidthSpace","HeightSpace","OwnProfile","DefaultImg","OtherPostsBoard","OtherProfile","userObjectID","notFound","setNotFound","useFollow","container","gridTemplateAreas","gridTemplateColumns","gridTemplateRows","banner","gridArea","card","board","ViewProfile","loggedInUsername","LogOut","Experimental","LoginGitHub","useLocation","parsed","qs","parse","expectedState","loginSuccessDto","SearchHomePage","Content","Search","results","setResults","SearchPage","GroupTradingCard","membersCount","role","GroupPostsBoard","child","ViewGroupProfile","createContext","App","io","on","connected","isCreator","Provider","createMuiTheme","primary","textPrimary","red","A400","default","tagsAdapter","tagsSlice","tagEntity","videosAdapter","video","getAllVideos","createVideo","videoDto","videosSlice","videosToAdd","rootReducer","combineReducers","isLoggedInReducer","userReducer","usersReducer","postsReducer","tagsReducer","groupsReducer","commentsReducer","conversationsReducer","videosReducer","messagesReducer","store","configureStore","Root","StrictMode","ThemeProvider","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.339a3d06.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ccLogo.0e19e0ce.svg\";","module.exports = __webpack_public_path__ + \"static/media/user.686737aa.svg\";","module.exports = __webpack_public_path__ + \"static/media/composeIcon.b2af7e08.svg\";","module.exports = __webpack_public_path__ + \"static/media/plusIcon.f96e0dd6.svg\";","module.exports = __webpack_public_path__ + \"static/media/sendIcon.f62fb785.svg\";","module.exports = __webpack_public_path__ + \"static/media/defaultPostFeaturedImage.af665b7b.jpg\";","module.exports = __webpack_public_path__ + \"static/media/bookmarkEmpty.3dc95b30.svg\";","module.exports = __webpack_public_path__ + \"static/media/write_the_first_comment.e1e50607.svg\";","module.exports = __webpack_public_path__ + \"static/media/reply.2e768d34.svg\";","// These are used by `AuthService` on the back end, and during the Login process on the front end\r\n// There are two copies of this file, one in `backend/src` and one in `frontend/src`\r\n\r\nexport const GitHubOAuthClientID = 'f397e7312eb6205b3256';\r\nexport const GoogleOAuthClientID =\r\n  '378315098234-caculcp2l4rg87nb7tds0j37v420cth9.apps.googleusercontent.com';\r\n\r\nexport const JwtLocalStorageKey = \"jwt\";\r\n\r\nexport enum ImageType {\r\n    ProfilePic = \"ProfilePic\",\r\n    BannerPic = \"BannerPic\",\r\n}\r\n\r\nexport const BackEndBaseUri = \"http://localhost:3001\";\r\nexport const BackEndBaseUriForWs = BackEndBaseUri;","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    backgroundColor: \"#5D67E9\",\r\n    color: \"white\",\r\n    width: \"fit-content\",\r\n    height: \"2em\",\r\n    border: \"none\",\r\n    borderRadius: \"10px\",\r\n    fontSize: \"15px\",\r\n    padding: \"10px\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n  },\r\n});\r\n\r\nconst PurpleButton = ({ handleClick, params, content }: { handleClick?: (params) => any, params?: any, content: string }) => {\r\n  const classes = useStyles();\r\n  return <button onClick={handleClick} className={classes.root}>{content}</button>;\r\n};\r\nexport default PurpleButton;\r\n","import { GitHubOAuthClientID } from \"../../constants\";\r\nimport { v4 as uuid } from \"uuid\";\r\n\r\nexport const stateContainer = {\r\n  state: \"abc\",\r\n};\r\n\r\n/**\r\n * Should be invoked on Login button click.\r\n *\r\n * https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/\r\n */\r\nexport function initializeGitHubOAuth() {\r\n  // Generate random state\r\n  stateContainer.state = uuid();\r\n\r\n  // Smell ya later!\r\n  window.location.href = `https://github.com/login/oauth/authorize?client_id=${GitHubOAuthClientID}&state=${stateContainer.state}`;\r\n}\r\n","import styled from '@emotion/styled';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Badge from '@material-ui/core/Badge';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport InputBase from '@material-ui/core/InputBase';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport MessageIcon from '@material-ui/icons/Message';\r\nimport MoreIcon from '@material-ui/icons/MoreVert';\r\nimport NotificationsIcon from '@material-ui/icons/Notifications';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport React from 'react';\r\nimport {useSelector, useDispatch} from 'react-redux';\r\nimport {Link, useHistory} from 'react-router-dom';\r\nimport Logo from '../../assets/ccLogo.svg';\r\nimport PurpleButton from '../../pages/common/PurpleButton';\r\nimport {initializeGitHubOAuth} from '../../pages/login/login';\r\nimport {Avatar} from '@material-ui/core';\r\nimport {RootState} from '../../reducers/rootReducer';\r\nimport {User} from '../../store/types';\r\nimport {AppDispatch} from \"../../store\";\r\n\r\nconst drawerWidth = 240;\r\nconst useStyles = makeStyles((theme) => ({\r\n    appBar: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n        color: \"black\",\r\n        backgroundColor: \"white\",\r\n\r\n    },\r\n    toolbar: theme.mixins.toolbar,\r\n    drawerPaper: {\r\n        width: drawerWidth,\r\n        boxShadow: \"5px 2px 5px #cccccc\",\r\n    },\r\n    menuButton: {\r\n        // marginRight: theme.spacing(2),\r\n        [theme.breakpoints.up(\"sm\")]: {\r\n            display: \"none\",\r\n        },\r\n        toolbar: theme.mixins.toolbar,\r\n        drawerPaper: {\r\n            width: drawerWidth,\r\n        },\r\n\r\n        boxShadow: \"5px 2px 5px #cccccc\",\r\n    },\r\n    search: {\r\n        borderRadius: theme.shape.borderRadius,\r\n        backgroundColor: \"#FAFAFA\",\r\n        paddingTop: \"10px\",\r\n        paddingBottom: \"10px\",\r\n        // \"&:hover\": {\r\n        //   backgroundColor: fade(theme.palette.common.white, 0.25),\r\n        // },\r\n\r\n        marginRight: \"auto\",\r\n        width: \"100%\",\r\n        [theme.breakpoints.up(\"sm\")]: {\r\n            marginLeft: theme.spacing(3),\r\n            width: \"auto\",\r\n            maxWidth: \"120%\",\r\n        },\r\n    },\r\n    searchIcon: {\r\n        width: theme.spacing(7),\r\n        position: \"absolute\",\r\n        pointerEvents: \"none\",\r\n        marginTop: \"0.5em\",\r\n        marginLeft: \"1em\",\r\n    },\r\n    inputRoot: {\r\n        color: \"inherit\",\r\n    },\r\n    inputInput: {\r\n        padding: theme.spacing(1, 1, 1, 7),\r\n        transition: theme.transitions.create(\"width\"),\r\n        width: \"100%\",\r\n        [theme.breakpoints.up(\"md\")]: {\r\n            width: 550,\r\n        },\r\n    },\r\n    sectionDesktop: {\r\n        display: \"none\",\r\n        [theme.breakpoints.up(\"md\")]: {\r\n            display: \"flex\",\r\n        },\r\n    },\r\n    sectionMobile: {\r\n        display: \"flex\",\r\n        [theme.breakpoints.up(\"md\")]: {\r\n            display: \"none\",\r\n        },\r\n    },\r\n    link: {\r\n        textDecoration: \"none\",\r\n    },\r\n}));\r\n\r\n\r\nexport default function Header(props) {\r\n    const ListItemDiv = styled.div`\r\n  margin-top: 17px;\r\n  margin-right: 0.7em;\r\n  cursor: pointer;\r\n`;\r\n    const isLoggedIn = useSelector<RootState, boolean>((state) => state.isLoggedIn);\r\n    const user = useSelector<RootState, User>(state => state.user);\r\n    const history = useHistory();\r\n    const dispatch = useDispatch<AppDispatch>();\r\n\r\n    const classes = useStyles();\r\n    const [anchorEl, setAnchorEl] = React.useState(null);\r\n    const [mobileMoreAnchorEl, setMobileMoreAnchorEl] = React.useState(null);\r\n\r\n    const isMenuOpen = Boolean(anchorEl);\r\n    const isMobileMenuOpen = Boolean(mobileMoreAnchorEl);\r\n\r\n    const handleSearchKeyDown = (event) => {\r\n        if (event.keyCode === 13) { // https://stackoverflow.com/questions/43384039/how-to-get-input-textfield-values-when-enter-key-is-pressed-in-react-js\r\n            const query = event.target.value;\r\n            history.push(`/search?q=${query}`);\r\n        }\r\n    }\r\n\r\n    const handleProfileMenuOpen = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleMobileMenuClose = () => {\r\n        setMobileMoreAnchorEl(null);\r\n    };\r\n\r\n    const handleMenuClose = () => {\r\n        setAnchorEl(null);\r\n        handleMobileMenuClose();\r\n    };\r\n\r\n    const handleMobileMenuOpen = (event) => {\r\n        setMobileMoreAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const menuId = \"primary-search-account-menu\";\r\n    const renderMenu = (\r\n        <Menu\r\n            anchorEl={anchorEl}\r\n            anchorOrigin={{vertical: \"top\", horizontal: \"right\"}}\r\n            id={menuId}\r\n            keepMounted\r\n            transformOrigin={{vertical: \"top\", horizontal: \"right\"}}\r\n            open={isMenuOpen}\r\n            onClose={handleMenuClose}\r\n        >\r\n            <MenuItem onClick={() => {\r\n                history.push(`/user/${user.userID}`);\r\n                handleMenuClose();\r\n            }}>Profile</MenuItem>\r\n            <MenuItem onClick={() => {\r\n                history.push('/logout');\r\n                handleMenuClose();\r\n            }}>Log Out</MenuItem>\r\n        </Menu>\r\n    );\r\n\r\n    const mobileMenuId = \"primary-search-account-menu-mobile\";\r\n    const renderMobileMenu = (\r\n        <Menu\r\n            anchorEl={mobileMoreAnchorEl}\r\n            anchorOrigin={{vertical: \"top\", horizontal: \"right\"}}\r\n            id={mobileMenuId}\r\n            keepMounted\r\n            transformOrigin={{vertical: \"top\", horizontal: \"right\"}}\r\n            open={isMobileMenuOpen}\r\n            onClose={handleMobileMenuClose}\r\n        >\r\n            <MenuItem>\r\n                <IconButton aria-label=\"show 2 new messages\" color=\"inherit\">\r\n                    <Badge badgeContent={2} color=\"secondary\">\r\n                        <MessageIcon/>\r\n                    </Badge>\r\n                </IconButton>\r\n                <p>Messages</p>\r\n            </MenuItem>\r\n            <MenuItem>\r\n                <IconButton aria-label=\"show 1 new notifications\" color=\"inherit\">\r\n                    <Badge badgeContent={1} color=\"secondary\">\r\n                        <NotificationsIcon/>\r\n                    </Badge>\r\n                </IconButton>\r\n                <p>Notifications</p>\r\n            </MenuItem>\r\n            <MenuItem onClick={handleProfileMenuOpen}>\r\n                <IconButton\r\n                    aria-label=\"account of current user\"\r\n                    aria-controls=\"primary-search-account-menu\"\r\n                    aria-haspopup=\"true\"\r\n                    color=\"inherit\"\r\n                >\r\n                    <Avatar alt=\"avatar\" src={user?.profilePic}/>\r\n                </IconButton>\r\n                <p>Profile</p>\r\n            </MenuItem>\r\n        </Menu>\r\n    );\r\n\r\n    return (\r\n        <div>\r\n            <AppBar\r\n                position=\"fixed\"\r\n                className={classes.appBar}\r\n                style={{display: \"flex\"}}\r\n            >\r\n                <Toolbar>\r\n                    <IconButton\r\n                        edge=\"start\"\r\n                        color=\"inherit\"\r\n                        aria-label=\"Open drawer\"\r\n                        onClick={props.handleDrawerToggle}\r\n                        className={classes.menuButton}\r\n                    >\r\n                        <MenuIcon/>\r\n                    </IconButton>\r\n                    <img src={Logo} style={{width: \"5em\"}} alt=\"\"/>\r\n                    <div className={classes.search}>\r\n                        <div className={classes.searchIcon}>\r\n                            <SearchIcon/>\r\n                        </div>\r\n                        <Typography>\r\n                            <InputBase\r\n                                placeholder=\"Search…\"\r\n                                classes={{\r\n                                    root: classes.inputRoot,\r\n                                    input: classes.inputInput,\r\n                                }}\r\n                                inputProps={{\"aria-label\": \"search\"}}\r\n                                onKeyDown={handleSearchKeyDown}\r\n                            />\r\n                        </Typography>\r\n                    </div>\r\n                    <div style={{display: \"flex\", flex: 1}}></div>\r\n\r\n                    <ListItem style={{width: \"unset\"}}>\r\n                        <ListItemIcon>\r\n\r\n                            <Link to=\"/\" className={classes.link}>\r\n                                <h4 style={{marginRight: \"0.7em\"}}>Home</h4>\r\n                            </Link>\r\n\r\n                            {isLoggedIn &&\r\n                            <ListItemDiv>\r\n                                <Link to=\"/create-post\" className={classes.link}>\r\n                                    <PurpleButton content=\"Add a Post\"/>\r\n                                </Link>\r\n                            </ListItemDiv>}\r\n\r\n                            {!isLoggedIn &&\r\n                            <ListItemDiv>\r\n                                <div onClick={initializeGitHubOAuth}>\r\n                                    <PurpleButton content=\"Log In with GitHub\"/>\r\n                                </div>\r\n                            </ListItemDiv>}\r\n\r\n                        </ListItemIcon>\r\n                    </ListItem>\r\n\r\n                    {isLoggedIn &&\r\n                    <div className={classes.sectionDesktop}>\r\n                        <IconButton aria-label=\"show 2 new messages\" color=\"inherit\">\r\n                            <Badge badgeContent={2} color=\"secondary\">\r\n                                <MessageIcon/>\r\n                            </Badge>\r\n                        </IconButton>\r\n                        <IconButton aria-label=\"show 1 new notifications\" color=\"inherit\">\r\n                            <Badge badgeContent={1} color=\"secondary\">\r\n                                <NotificationsIcon/>\r\n                            </Badge>\r\n                        </IconButton>\r\n                        <IconButton\r\n                            edge=\"end\"\r\n                            aria-label=\"account of current user\"\r\n                            aria-controls={menuId}\r\n                            aria-haspopup=\"true\"\r\n                            onClick={handleProfileMenuOpen}\r\n                            color=\"inherit\"\r\n                        >\r\n                            <Avatar alt=\"avatar\" src={user?.profilePic}/>\r\n                        </IconButton>\r\n                    </div>}\r\n\r\n                    <div className={classes.sectionDesktop}>\r\n\r\n                    </div>\r\n\r\n                    <div className={classes.sectionMobile}>\r\n                        <IconButton\r\n                            aria-label=\"show more\"\r\n                            aria-controls={mobileMenuId}\r\n                            aria-haspopup=\"true\"\r\n                            onClick={handleMobileMenuOpen}\r\n                            color=\"inherit\"\r\n                        >\r\n                            <MoreIcon/>\r\n                        </IconButton>\r\n                    </div>\r\n                </Toolbar>\r\n            </AppBar>\r\n            {renderMobileMenu}\r\n            {renderMenu}\r\n        </div>\r\n    );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { fade, makeStyles } from \"@material-ui/core/styles\";\r\nimport ImageUploader from \"react-images-upload\";\r\nimport \"../../App.css\"\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    marginTop: \"3em\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    height: \"auto\",\r\n    width: \"40vw\",\r\n    backgroundColor: \"white\",\r\n    boxShadow: \"3px 3px #F2F2F2\",\r\n    marginBottom: \"1em\",\r\n    borderRadius: \"5px\",\r\n    paddingLeft: \"1.5em\",\r\n    paddingRight: \"1.5em\",\r\n  },\r\n  button: {\r\n    border: \"none\",\r\n    outline: \"none\",\r\n    borderRadius: \"5px\",\r\n    margin: \"2em auto\",\r\n    // width: \"100%\",\r\n    height: \"7vh\",\r\n    backgroundColor: \"#F2F2F2\",\r\n    '&:hover': {\r\n      backgroundColor: \"#fafafa\",\r\n    },\r\n    fontFamily: \"Arial\",\r\n    fontSize: \"1.5em\"\r\n  }\r\n});\r\n\r\nexport default function ImgPanel({ setImg }) {\r\n  const classes = useStyles();\r\n  // const [image, setImage] = useState<File>(null);\r\n\r\n  const handleImageUpload = img => {\r\n    console.log(\"CREATEPOST::IMGPANEL\");\r\n    console.log(img);\r\n    setImg(img)\r\n  }\r\n  return (\r\n    <div className={classes.root}>\r\n      <form>\r\n        <ImageUploader\r\n          buttonText='Upload Image'\r\n          withPreview={true}\r\n          withIcon={true}\r\n          onChange={handleImageUpload}\r\n          imgExtension={[\".jpg\", \".jpeg\", \".gif\", \".png\", \".gif\"]}\r\n          maxFileSize={5242880}\r\n          singleImage={true}\r\n          buttonStyles={{ backgroundColor: \"#6a6a6a\", boxShadow: \"3px 3px #FFFFFF\", }}\r\n        />\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useDispatch } from 'react-redux';\r\n// import { createTitle, createContent } from '../../actions/postsCreation';\r\n// import { createTitle, createContent } from '../../reducers/postsCreationSlice';\r\n// import { RootState, Post } from '../../initialData';\r\n\r\nconst useStyles = makeStyles({\r\n  cptext: {\r\n    display: \"flex\",\r\n    outline: \"none\",\r\n    flexDirection: \"column\",\r\n    height: \"60vh\",\r\n    width: \"40vw\",\r\n    backgroundColor: \"white\",\r\n    boxShadow: \"3px 3px #F2F2F2\",\r\n    marginBottom: \"1em\",\r\n    borderRadius: \"5px\",\r\n    paddingLeft: \"1.5em\",\r\n    paddingRight: \"1.5em\",\r\n  },\r\n  cptitle: {\r\n    border: \"none\",\r\n    outline: \"none\",\r\n    '&:hover': {\r\n      backgroundColor: \"#F2F2F2\",\r\n    },\r\n    margin: \"0.5em auto\",\r\n    width: \"100%\",\r\n    height: \"10vh\",\r\n    fontFamily: \"Arial\",\r\n    fontSize: \"2em\"\r\n  },\r\n  cpcontent: {\r\n    border: \"none\",\r\n    outline: \"none\",\r\n    '&:hover': {\r\n      backgroundColor: \"#F2F2F2\",\r\n    },\r\n    margin: \"0.5em auto\",\r\n    width: \"100%\",\r\n    height: \"15vh\",\r\n    fontFamily: \"Arial\",\r\n    fontSize: \"1em\",\r\n    fontWeight: \"bold\",\r\n    display: \"flex\",\r\n    overflow: \"auto\"\r\n  },\r\n});\r\n\r\n/*\r\nconst updateContent = (event, dispatch) => {\r\n  dispatch(createContent(event.target.value));\r\n}\r\n\r\nconst updateTitle = (event, dispatch) => {\r\n  // alert(event.target.value);\r\n  dispatch(createTitle(event.target.value));\r\n}\r\n */\r\n\r\nexport default function TextPanel(param) {\r\n  const { title, content } = param;\r\n  const classes = useStyles();\r\n  return (\r\n    <div className={classes.cptext}>\r\n      <form>\r\n        <input className={classes.cptitle} type=\"text\" placeholder={title || \"Title\"} onChange={(event) => {\r\n          // updateTitle(event, dispatch);\r\n          param.setTitle(event.target.value);\r\n        }}>\r\n        </input>\r\n        <br></br>\r\n        <textarea className={classes.cpcontent} id=\"text\" onChange={(event) => {\r\n          param.setContent(event.target.value);\r\n\r\n        }} placeholder={content || \"Type content\"}></textarea>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport styled from \"@emotion/styled\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst useStyles = makeStyles({\r\n  account: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    // paddingTop: \"1em\",\r\n  },\r\n  accountImg: {\r\n    width: \"3em\",\r\n    height: \"3em\",\r\n    borderRadius: \"50%\",\r\n    marginTop: \"0.5em\",\r\n  },\r\n  smallAccountImg: {\r\n    width: \"2.2em\",\r\n    height: \"2.2em\",\r\n    borderRadius: \"50%\",\r\n    marginTop: \"1em\",\r\n    marginRight: \"0.3em\",\r\n  },\r\n  imgTitle: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n  },\r\n  nameTime: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    marginLeft: \"0.5em\",\r\n  },\r\n});\r\n\r\nconst TitleText = styled.span<{ isPost: boolean, isText: boolean, titleSrc?: string }>`\r\n  cursor: ${({titleSrc}) => titleSrc ? \"pointer\" : \"default\"};\r\n  font-weight: bold;\r\n  color: ${({ isPost, isText }) => isPost ? \"#5D67E9\" : isText ? \"black\" : \"#5DCBAF\"}\r\n`;\r\n\r\nconst ExtraText = styled.span`\r\n  color: black;\r\n  font-size: small;\r\n`;\r\n\r\nexport const SideButton = styled.span <{ buttonIsClicked: boolean }>`\r\n  color: ${({ buttonIsClicked }) => buttonIsClicked ? \"white\" : \"#5D67E9\"};\r\n  font-size: small;\r\n  background-color: ${({ buttonIsClicked }) => buttonIsClicked ? \"#5D67E9\" : \"white\"};\r\n  min-width: fit-content;\r\n  padding: 5px 10px 5px 10px;\r\n  border: 1px solid #5D67E9;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n`\r\n\r\nconst Avatar = ({ small, pic, title, titleSrc, subtitle, extraText, extraTextOnClick, isPost, isButton, isText, subtitleIsDate }: { pic: string, title?: string, subtitle?: string, subtitleIsDate?: boolean, extraText?: string, isPost?: boolean, isButton?: boolean, isText?: boolean, titleSrc?: string, extraTextOnClick?: any, small?: boolean }) => {\r\n  const classes = useStyles();\r\n  const [buttonIsClicked, setButtonIsClicked] = useState(false);\r\n  const history = useHistory();\r\n  return (\r\n    <div className={classes.account}>\r\n      <img className={small ? classes.smallAccountImg : classes.accountImg} src={pic} alt=\"avatar\" />\r\n      <div className={classes.nameTime}>\r\n        <p>\r\n          <TitleText isPost={isPost} isText={isText} onClick={titleSrc && (() => {history.push(titleSrc)})} titleSrc={titleSrc}>\r\n            {title}&nbsp;&nbsp;&nbsp;\r\n          </TitleText>\r\n          {!isButton && <ExtraText onClick={extraTextOnClick}>{extraText}</ExtraText>}\r\n          {isButton && <SideButton buttonIsClicked={buttonIsClicked} onClick={() => setButtonIsClicked((prevState) => !prevState)}>{extraText}</SideButton>}\r\n          {/* {isButton && buttonIsClicked && <SideButtonClicked>{extraText}</SideButtonClicked>} */}\r\n        </p>\r\n        <p style={{ marginTop: subtitleIsDate? \"-1.1em\" : \"-0.8em\", fontSize: subtitleIsDate ? \"13px\" : \"15px\", color: subtitleIsDate ? \"gray\" : \"black\" }}>{subtitle}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Avatar;","import React from 'react';\r\nimport {\r\n  createStyles,\r\n  withStyles,\r\n  makeStyles,\r\n  Theme,\r\n} from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nexport const CssTextField = withStyles({\r\n  root: {\r\n    '& label.Mui-focused': {\r\n      color: 'black',\r\n    },\r\n    '& .MuiInput-underline:after': {\r\n      borderBottomColor: 'black',\r\n    },\r\n  },\r\n})(TextField);\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      flexWrap: 'wrap',\r\n    },\r\n    margin: {\r\n      width: \"97%\",\r\n      paddingRight: \"10px\",\r\n      margin: theme.spacing(1),\r\n    },\r\n  }),\r\n);\r\n\r\nexport const TextFields = ({ name, description, setName, setDescription }:\r\n  { name: string, description?: string, setName: React.Dispatch<React.SetStateAction<string>>, setDescription?: React.Dispatch<React.SetStateAction<string>> }) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <>\r\n      <CssTextField className={classes.margin} id=\"custom-css-standard-input\" label={name} onChange={(e) => {\r\n        setName(e.target.value);\r\n      }} required={true} />\r\n      {description &&\r\n        <CssTextField className={classes.margin} id=\"custom-css-standard-input\" label={description}\r\n          onChange={(e) => setDescription(e.target.value)} />}\r\n    </>\r\n  )\r\n}","/* eslint-disable no-use-before-define */\nimport React, {useState} from 'react';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles';\nimport Avatar from '../common/Avatar';\nimport {CssTextField} from './TextFields';\n\n\nexport default function AddMultiple({label, options, defaultValID, imgKey, setItems, limit, panelWidth}: { label: string, options: Array<{ name: string }>, defaultValID?: [number], imgKey?: string, setItems: Function, limit?: number, panelWidth?: any\n}) {\n    const useStyles = makeStyles((theme: Theme) =>\n        createStyles({\n            root: {\n                // width: 500,\n                // width: \"40vw\",\n                width: panelWidth,\n                '& > * + *': {\n                    marginTop: theme.spacing(3),\n                },\n            },\n        }),\n    );\n\n    const classes = useStyles();\n\n    const handleChange = (e, values) => {\n        // console.log(\"ADDMULTIPLE::ONCHANGE\");\n        const ids = values.map(value => value._id);\n        // console.log(ids);\n        // console.log(values);\n        setItems(ids);\n    }\n\n    // console.log(\"ADDMILTIPLE\");\n    // console.log(options);\n  let arr = [0,1];\n    return (\n        <div className={classes.root}>\n            <Autocomplete\n                multiple\n                id=\"tags-standard\"\n                // defaultValue={defaultVal}\n                defaultValue={defaultValID?.map(id => options[id])}\n                options={options}\n                disableCloseOnSelect={true}\n                renderOption={imgKey && ((option) =>\n                        <Avatar pic={option[imgKey]} title={option.name} subtitle=\"\" extraText=\"\"/>\n                )}\n                getOptionLabel={(option) => option.name}\n                filterSelectedOptions={true}\n                renderInput={(params) => (\n                    <CssTextField\n                        {...params}\n                        variant=\"standard\"\n                        label={label}\n                        placeholder=\"\"\n                    />\n                )}\n                onChange={handleChange}\n            />\n        </div>\n    );\n}","import React from \"react\";\r\nimport Tag from \"./Tag\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport AddMultiple from \"../group/AddMuliple\";\r\n\r\nconst useStyles = makeStyles({\r\n  cptag: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    height: \"50vh\",\r\n    width: \"40vw\",\r\n    backgroundColor: \"white\",\r\n    boxShadow: \"3px 3px #F2F2F2\",\r\n    marginBottom: \"1em\",\r\n    borderRadius: \"5px\",\r\n    paddingLeft: \"1.5em\",\r\n    paddingRight: \"1.5em\",\r\n  },\r\n  h4: {\r\n    marginBottom: \"0.5em\",\r\n  },\r\n  display: {\r\n    fontWeight: \"bold\",\r\n    marginBottom: \"1em\",\r\n  },\r\n  input: {\r\n    width: \"100%\",\r\n    height: \"2em\",\r\n    border: \"none\",\r\n    outline: \"none\",\r\n    background: \"white\",\r\n    \"&:hover\": {\r\n      backgroundColor: \"#F2F2F2\",\r\n    },\r\n  },\r\n  tags: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    margin: \"0 0\",\r\n    padding: \"0 0\",\r\n  },\r\n});\r\n\r\nexport default function TagPanel(params) {\r\n  const classes = useStyles();\r\n  const alltags = []; // useState<RootState, >()\r\n\r\n  console.log(\"CREATEPOST::TAGPANEL\");\r\n  console.log(params.allTagsArr);\r\n  return (\r\n    <div className={classes.cptag}>\r\n      <form id=\"tagform\">\r\n        {/*<h4 className={classes.h4}>Add tags</h4>\r\n        <hr className={classes.display}></hr>\r\n        <ul className={classes.tags}>\r\n          <Tag />\r\n        </ul>*/}\r\n        <AddMultiple label=\"Add Tags\" options={params.allTagsArr} setItems={params.setPostTags} panelWidth={\"40vw\"} />\r\n        {/*<input\r\n          className={classes.input}\r\n          onChange={_onChange}\r\n          placeholder=\"Type here\"\r\n        ></input> */}\r\n        {/*<br></br>*/}\r\n      </form>\r\n      {/*<ul id=\"tags\" onClick={_onDel}>\r\n        {alltags}\r\n      </ul>*/}\r\n    </div>\r\n  );\r\n}\r\n","import { JwtLocalStorageKey } from \"../constants\";\r\n\r\nexport default function portableFetchReplacement(path, options: any = {}) {\r\n  if (!options.headers) {\r\n    options.headers = new Headers();\r\n  }\r\n  try {\r\n    options.headers[\"Authorization\"] =\r\n      \"Bearer \" + localStorage.getItem(JwtLocalStorageKey);\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n\r\n  return fetch(path, options);\r\n}\r\n","/// <reference path=\"./custom.d.ts\" />\n// tslint:disable\n/**\n * Coder Community\n * The Coder Community API description\n *\n * OpenAPI spec version: 0.0.2\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\nimport * as url from \"url\";\nimport portableFetch from \"../api-auth/fetch-container\"; // modified by backend/scripts/generate-api.js\nimport { Configuration } from \"./configuration\";\n\nconst BASE_PATH = \"http://localhost:3001\".replace(/\\/+$/, \"\");\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n\n/**\n *\n * @export\n * @interface FetchAPI\n */\nexport interface FetchAPI {\n    (url: string, init?: any): Promise<Response>;\n}\n\n/**\n *\n * @export\n * @interface FetchArgs\n */\nexport interface FetchArgs {\n    url: string;\n    options: any;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n    protected configuration: Configuration;\n\n    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath || this.basePath;\n        }\n    }\n};\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n    name: \"RequiredError\"\n    constructor(public field: string, msg?: string) {\n        super(msg);\n    }\n}\n\n/**\n * \n * @export\n * @interface CreateConversationBodyDto\n */\nexport interface CreateConversationBodyDto {\n    /**\n     * \n     * @type {string}\n     * @memberof CreateConversationBodyDto\n     */\n    userID: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateConversationBodyDto\n     */\n    name?: string;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof CreateConversationBodyDto\n     */\n    users: Array<string>;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateConversationBodyDto\n     */\n    message?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof CreateConversationBodyDto\n     */\n    createdAt: number;\n}\n/**\n * \n * @export\n * @interface CreateConversationSuccessDto\n */\nexport interface CreateConversationSuccessDto {\n    /**\n     * \n     * @type {string}\n     * @memberof CreateConversationSuccessDto\n     */\n    _id: string; // modified by backend/scripts/generate-api.js\n    /**\n     * \n     * @type {string}\n     * @memberof CreateConversationSuccessDto\n     */\n    name?: string;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof CreateConversationSuccessDto\n     */\n    users: Array<string>;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof CreateConversationSuccessDto\n     */\n    messages: Array<string>;\n    /**\n     * \n     * @type {any}\n     * @memberof CreateConversationSuccessDto\n     */\n    createdAt: any;\n}\n/**\n * \n * @export\n * @interface CreateCustomUser\n */\nexport interface CreateCustomUser {\n    /**\n     * \n     * @type {string}\n     * @memberof CreateCustomUser\n     */\n    userID: string;\n}\n/**\n * \n * @export\n * @interface CreateGroupDto\n */\nexport interface CreateGroupDto {\n    /**\n     * The name of the group\n     * @type {string}\n     * @memberof CreateGroupDto\n     */\n    name: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateGroupDto\n     */\n    description?: string;\n    /**\n     * The ObjectIDs of the invited users of the new group\n     * @type {Array<string>}\n     * @memberof CreateGroupDto\n     */\n    users: Array<string>;\n    /**\n     * The URL for the group's circular profile avatar image\n     * @type {string}\n     * @memberof CreateGroupDto\n     */\n    profilePic?: string;\n    /**\n     * The URL for the group's background image\n     * @type {string}\n     * @memberof CreateGroupDto\n     */\n    profileBanner?: string;\n    /**\n     * Whether the group is viewable by non-members\n     * @type {boolean}\n     * @memberof CreateGroupDto\n     */\n    private: boolean; // modified by backend/scripts/generate-api.js\n}\n/**\n * \n * @export\n * @interface CreateGroupSuccessDto\n */\nexport interface CreateGroupSuccessDto {\n    /**\n     * The newly created group's object ID\n     * @type {string}\n     * @memberof CreateGroupSuccessDto\n     */\n    _id: string; // modified by backend/scripts/generate-api.js\n}\n/**\n * \n * @export\n * @interface CreateMessageBodyDto\n */\nexport interface CreateMessageBodyDto {\n    /**\n     * \n     * @type {string}\n     * @memberof CreateMessageBodyDto\n     */\n    userID: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateMessageBodyDto\n     */\n    conversationID: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateMessageBodyDto\n     */\n    text: string;\n    /**\n     * \n     * @type {number}\n     * @memberof CreateMessageBodyDto\n     */\n    createdAt: number;\n}\n/**\n * \n * @export\n * @interface CreateMessageSuccessDto\n */\nexport interface CreateMessageSuccessDto {\n    /**\n     * \n     * @type {string}\n     * @memberof CreateMessageSuccessDto\n     */\n    conversationID: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateMessageSuccessDto\n     */\n    _id: string; // modified by backend/scripts/generate-api.js\n    /**\n     * \n     * @type {string}\n     * @memberof CreateMessageSuccessDto\n     */\n    author: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateMessageSuccessDto\n     */\n    text: string;\n    /**\n     * \n     * @type {number}\n     * @memberof CreateMessageSuccessDto\n     */\n    createdAt: number;\n    /**\n     * \n     * @type {number}\n     * @memberof CreateMessageSuccessDto\n     */\n    updatedAt?: number;\n}\n/**\n * \n * @export\n * @interface CreatePostBodyDto\n */\nexport interface CreatePostBodyDto {\n    /**\n     * \n     * @type {string}\n     * @memberof CreatePostBodyDto\n     */\n    title: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreatePostBodyDto\n     */\n    content: string;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof CreatePostBodyDto\n     */\n    tags: Array<string>;\n    /**\n     * \n     * @type {string}\n     * @memberof CreatePostBodyDto\n     */\n    featuredImg: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreatePostBodyDto\n     */\n    group?: string;\n}\n/**\n * \n * @export\n * @interface CreatePostSuccessDto\n */\nexport interface CreatePostSuccessDto {\n    /**\n     * \n     * @type {string}\n     * @memberof CreatePostSuccessDto\n     */\n    _id: string; // modified by backend/scripts/generate-api.js\n    /**\n     * \n     * @type {string}\n     * @memberof CreatePostSuccessDto\n     */\n    slug: string;\n}\n/**\n * \n * @export\n * @interface CreateVideoDto\n */\nexport interface CreateVideoDto {\n    /**\n     * \n     * @type {string}\n     * @memberof CreateVideoDto\n     */\n    name: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateVideoDto\n     */\n    description: string;\n}\n/**\n * \n * @export\n * @interface FileUploadDto\n */\nexport interface FileUploadDto {\n    /**\n     * \n     * @type {any}\n     * @memberof FileUploadDto\n     */\n    file: any;\n}\n/**\n * \n * @export\n * @interface GetAllVideosDto\n */\nexport interface GetAllVideosDto {\n    /**\n     * \n     * @type {Array<VideoDto>}\n     * @memberof GetAllVideosDto\n     */\n    videos: Array<VideoDto>;\n}\n/**\n * \n * @export\n * @interface GetGroupsSuccessDto\n */\nexport interface GetGroupsSuccessDto {\n    /**\n     * \n     * @type {Array<GroupDto>}\n     * @memberof GetGroupsSuccessDto\n     */\n    groups: Array<GroupDto>;\n}\n/**\n * \n * @export\n * @interface GetInitialDataDto\n */\nexport interface GetInitialDataDto {\n    /**\n     * \n     * @type {Array<PostDto>}\n     * @memberof GetInitialDataDto\n     */\n    posts: Array<PostDto>;\n    /**\n     * \n     * @type {Array<UserDto>}\n     * @memberof GetInitialDataDto\n     */\n    users: Array<UserDto>;\n    /**\n     * \n     * @type {Array<TagsDto>}\n     * @memberof GetInitialDataDto\n     */\n    tags: Array<TagsDto>;\n}\n/**\n * \n * @export\n * @interface GetInitialDataLoggedInDto\n */\nexport interface GetInitialDataLoggedInDto {\n    /**\n     * \n     * @type {Array<PostDto>}\n     * @memberof GetInitialDataLoggedInDto\n     */\n    posts: Array<PostDto>;\n    /**\n     * \n     * @type {Array<UserDto>}\n     * @memberof GetInitialDataLoggedInDto\n     */\n    users: Array<UserDto>;\n    /**\n     * \n     * @type {UserDto}\n     * @memberof GetInitialDataLoggedInDto\n     */\n    user: UserDto;\n    /**\n     * \n     * @type {Array<TagsDto>}\n     * @memberof GetInitialDataLoggedInDto\n     */\n    tags: Array<TagsDto>;\n}\n/**\n * \n * @export\n * @interface GetPostDetailsSuccessDto\n */\nexport interface GetPostDetailsSuccessDto {\n    /**\n     * \n     * @type {PostWithDetails}\n     * @memberof GetPostDetailsSuccessDto\n     */\n    post: PostWithDetails;\n    /**\n     * \n     * @type {UserDto}\n     * @memberof GetPostDetailsSuccessDto\n     */\n    author?: UserDto;\n}\n/**\n * \n * @export\n * @interface GetPostsByTagDto\n */\nexport interface GetPostsByTagDto {\n    /**\n     * \n     * @type {number}\n     * @memberof GetPostsByTagDto\n     */\n    cursor: number;\n    /**\n     * \n     * @type {string}\n     * @memberof GetPostsByTagDto\n     */\n    tagID: string;\n    /**\n     * \n     * @type {Array<PostDto>}\n     * @memberof GetPostsByTagDto\n     */\n    posts: Array<PostDto>;\n}\n/**\n * \n * @export\n * @interface GetUsersSuccessDto\n */\nexport interface GetUsersSuccessDto {\n    /**\n     * \n     * @type {Array<UserDto>}\n     * @memberof GetUsersSuccessDto\n     */\n    users: Array<UserDto>;\n}\n/**\n * \n * @export\n * @interface GitHubLoginBody\n */\nexport interface GitHubLoginBody {\n    /**\n     * \n     * @type {string}\n     * @memberof GitHubLoginBody\n     */\n    code: string;\n    /**\n     * \n     * @type {string}\n     * @memberof GitHubLoginBody\n     */\n    state: string;\n}\n/**\n * \n * @export\n * @interface GoogleLoginBody\n */\nexport interface GoogleLoginBody {\n}\n/**\n * \n * @export\n * @interface GroupDto\n */\nexport interface GroupDto {\n    /**\n     * \n     * @type {string}\n     * @memberof GroupDto\n     */\n    _id: string; // modified by backend/scripts/generate-api.js\n    /**\n     * \n     * @type {string}\n     * @memberof GroupDto\n     */\n    name: string;\n    /**\n     * \n     * @type {string}\n     * @memberof GroupDto\n     */\n    description: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof GroupDto\n     */\n    private: boolean; // modified by backend/scripts/generate-api.js\n    /**\n     * \n     * @type {string}\n     * @memberof GroupDto\n     */\n    profilePic: string;\n    /**\n     * \n     * @type {string}\n     * @memberof GroupDto\n     */\n    profileBanner: string;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof GroupDto\n     */\n    admins: Array<string>;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof GroupDto\n     */\n    users: Array<string>;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof GroupDto\n     */\n    posts: Array<string>;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof GroupDto\n     */\n    videos: Array<string>;\n    /**\n     * \n     * @type {string}\n     * @memberof GroupDto\n     */\n    createdAt: string;\n    /**\n     * \n     * @type {string}\n     * @memberof GroupDto\n     */\n    updatedAt: string;\n}\n/**\n * \n * @export\n * @interface LogOut\n */\nexport interface LogOut {\n}\n/**\n * \n * @export\n * @interface LogOutSuccess\n */\nexport interface LogOutSuccess {\n}\n/**\n * \n * @export\n * @interface LoginSuccess\n */\nexport interface LoginSuccess {\n    /**\n     * The CoderCommunity JWT\n     * @type {string}\n     * @memberof LoginSuccess\n     */\n    jwt: string;\n    /**\n     * The MongoDB user _id\n     * @type {string}\n     * @memberof LoginSuccess\n     */\n    _id: string; // modified by backend/scripts/generate-api.js\n    /**\n     * The visible User ID\n     * @type {string}\n     * @memberof LoginSuccess\n     */\n    userID: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof LoginSuccess\n     */\n    isNewUser: boolean;\n}\n/**\n * \n * @export\n * @interface MessageDto\n */\nexport interface MessageDto {\n    /**\n     * \n     * @type {string}\n     * @memberof MessageDto\n     */\n    _id: string; // modified by backend/scripts/generate-api.js\n    /**\n     * \n     * @type {string}\n     * @memberof MessageDto\n     */\n    author: string;\n    /**\n     * \n     * @type {string}\n     * @memberof MessageDto\n     */\n    text: string;\n    /**\n     * \n     * @type {any}\n     * @memberof MessageDto\n     */\n    createdAt: any;\n    /**\n     * \n     * @type {any}\n     * @memberof MessageDto\n     */\n    updatedAt: any;\n}\n/**\n * \n * @export\n * @interface Post\n */\nexport interface Post {\n    /**\n     * \n     * @type {any}\n     * @memberof Post\n     */\n    author: any;\n    /**\n     * \n     * @type {string}\n     * @memberof Post\n     */\n    title: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Post\n     */\n    slug: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Post\n     */\n    previewContent: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Post\n     */\n    content: string;\n    /**\n     * \n     * @type {Array<any>}\n     * @memberof Post\n     */\n    tags: Array<any>;\n    /**\n     * \n     * @type {string}\n     * @memberof Post\n     */\n    featuredImg: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Post\n     */\n    likes: number;\n    /**\n     * \n     * @type {Array<any>}\n     * @memberof Post\n     */\n    comments: Array<any>;\n    /**\n     * \n     * @type {number}\n     * @memberof Post\n     */\n    views: number;\n    /**\n     * \n     * @type {any}\n     * @memberof Post\n     */\n    group: any;\n}\n/**\n * \n * @export\n * @interface PostDto\n */\nexport interface PostDto {\n    /**\n     * \n     * @type {string}\n     * @memberof PostDto\n     */\n    _id: string; // modified by backend/scripts/generate-api.js\n    /**\n     * \n     * @type {string}\n     * @memberof PostDto\n     */\n    author: string;\n    /**\n     * \n     * @type {string}\n     * @memberof PostDto\n     */\n    title: string;\n    /**\n     * \n     * @type {string}\n     * @memberof PostDto\n     */\n    previewContent?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof PostDto\n     */\n    content?: string;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof PostDto\n     */\n    tags: Array<string>;\n    /**\n     * \n     * @type {string}\n     * @memberof PostDto\n     */\n    featuredImg: string;\n    /**\n     * \n     * @type {number}\n     * @memberof PostDto\n     */\n    likes: number;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof PostDto\n     */\n    comments: Array<string>;\n    /**\n     * \n     * @type {number}\n     * @memberof PostDto\n     */\n    commentsCount: number;\n    /**\n     * \n     * @type {number}\n     * @memberof PostDto\n     */\n    views: number;\n    /**\n     * \n     * @type {string}\n     * @memberof PostDto\n     */\n    createdAt: string;\n    /**\n     * \n     * @type {string}\n     * @memberof PostDto\n     */\n    slug: string;\n    /**\n     * \n     * @type {string}\n     * @memberof PostDto\n     */\n    group?: string;\n}\n/**\n * \n * @export\n * @interface PostWithDetails\n */\nexport interface PostWithDetails {\n    /**\n     * \n     * @type {string}\n     * @memberof PostWithDetails\n     */\n    _id: string; // modified by backend/scripts/generate-api.js\n    /**\n     * \n     * @type {string}\n     * @memberof PostWithDetails\n     */\n    author: string;\n    /**\n     * \n     * @type {string}\n     * @memberof PostWithDetails\n     */\n    title: string;\n    /**\n     * \n     * @type {string}\n     * @memberof PostWithDetails\n     */\n    previewContent: string;\n    /**\n     * \n     * @type {string}\n     * @memberof PostWithDetails\n     */\n    content: string;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof PostWithDetails\n     */\n    tags: Array<string>;\n    /**\n     * \n     * @type {string}\n     * @memberof PostWithDetails\n     */\n    featuredImg: string;\n    /**\n     * \n     * @type {number}\n     * @memberof PostWithDetails\n     */\n    likes: number;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof PostWithDetails\n     */\n    comments: Array<string>;\n    /**\n     * \n     * @type {number}\n     * @memberof PostWithDetails\n     */\n    commentsCount: number;\n    /**\n     * \n     * @type {number}\n     * @memberof PostWithDetails\n     */\n    views: number;\n    /**\n     * \n     * @type {string}\n     * @memberof PostWithDetails\n     */\n    createdAt: string;\n    /**\n     * \n     * @type {string}\n     * @memberof PostWithDetails\n     */\n    updatedAt: string;\n    /**\n     * \n     * @type {string}\n     * @memberof PostWithDetails\n     */\n    slug: string;\n    /**\n     * \n     * @type {string}\n     * @memberof PostWithDetails\n     */\n    group?: string;\n}\n/**\n * \n * @export\n * @interface SearchResultDto\n */\nexport interface SearchResultDto {\n    /**\n     * \n     * @type {Array<Post>}\n     * @memberof SearchResultDto\n     */\n    posts: Array<Post>;\n}\n/**\n * \n * @export\n * @interface TagsDto\n */\nexport interface TagsDto {\n    /**\n     * \n     * @type {string}\n     * @memberof TagsDto\n     */\n    _id: string; // modified by backend/scripts/generate-api.js\n    /**\n     * \n     * @type {string}\n     * @memberof TagsDto\n     */\n    name: string;\n}\n/**\n * \n * @export\n * @interface UpdatePostBodyDto\n */\nexport interface UpdatePostBodyDto {\n    /**\n     * \n     * @type {string}\n     * @memberof UpdatePostBodyDto\n     */\n    title?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdatePostBodyDto\n     */\n    content?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdatePostBodyDto\n     */\n    featuredImg?: string;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof UpdatePostBodyDto\n     */\n    tags?: Array<string>;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdatePostBodyDto\n     */\n    oldSlug?: string;\n}\n/**\n * \n * @export\n * @interface UpdatePostSuccessDto\n */\nexport interface UpdatePostSuccessDto {\n    /**\n     * \n     * @type {string}\n     * @memberof UpdatePostSuccessDto\n     */\n    _id: string; // modified by backend/scripts/generate-api.js\n    /**\n     * \n     * @type {string}\n     * @memberof UpdatePostSuccessDto\n     */\n    slug: string;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdatePostSuccessDto\n     */\n    oldSlug?: string;\n}\n/**\n * \n * @export\n * @interface UpdateProfileReqDto\n */\nexport interface UpdateProfileReqDto {\n    /**\n     * Updated name\n     * @type {string}\n     * @memberof UpdateProfileReqDto\n     */\n    name?: string;\n    /**\n     * Updated status\n     * @type {string}\n     * @memberof UpdateProfileReqDto\n     */\n    status?: string;\n    /**\n     * Array of tag ObjectIDs, which will completely replace the previous tags of the user\n     * @type {Array<string>}\n     * @memberof UpdateProfileReqDto\n     */\n    tags?: Array<string>;\n}\n/**\n * \n * @export\n * @interface UploadSuccess\n */\nexport interface UploadSuccess {\n    /**\n     * The URL of the file which is now statically served as a result of this upload.\n     * @type {string}\n     * @memberof UploadSuccess\n     */\n    url: string;\n}\n/**\n * \n * @export\n * @interface UserDto\n */\nexport interface UserDto {\n    /**\n     * \n     * @type {string}\n     * @memberof UserDto\n     */\n    _id: string; // modified by backend/scripts/generate-api.js\n    /**\n     * \n     * @type {string}\n     * @memberof UserDto\n     */\n    userID: string;\n    /**\n     * \n     * @type {string}\n     * @memberof UserDto\n     */\n    name: string;\n    /**\n     * \n     * @type {string}\n     * @memberof UserDto\n     */\n    profilePic?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof UserDto\n     */\n    profileBanner?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof UserDto\n     */\n    status?: string;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof UserDto\n     */\n    followers?: Array<string>;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof UserDto\n     */\n    following?: Array<string>;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof UserDto\n     */\n    groups?: Array<string>;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof UserDto\n     */\n    posts?: Array<string>;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof UserDto\n     */\n    savedPosts?: Array<string>;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof UserDto\n     */\n    likedPosts: Array<string>;\n}\n/**\n * \n * @export\n * @interface VideoDto\n */\nexport interface VideoDto {\n    /**\n     * \n     * @type {string}\n     * @memberof VideoDto\n     */\n    name: string;\n    /**\n     * \n     * @type {string}\n     * @memberof VideoDto\n     */\n    description: string;\n    /**\n     * \n     * @type {string}\n     * @memberof VideoDto\n     */\n    _id: string; // modified by backend/scripts/generate-api.js\n    /**\n     * \n     * @type {string}\n     * @memberof VideoDto\n     */\n    createdAt: string;\n}\n/**\n * AuthApi - fetch parameter creator\n * @export\n */\nexport const AuthApiFetchParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @param {LogOut} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        authControllerLogOut(body: LogOut, options: any = {}): FetchArgs {\n            // verify required parameter 'body' is not null or undefined\n            if (body === null || body === undefined) {\n                throw new RequiredError('body','Required parameter body was null or undefined when calling authControllerLogOut.');\n            }\n            const localVarPath = `/api/logout`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            const needsSerialization = (<any>\"LogOut\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || \"\");\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {GitHubLoginBody} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        authControllerLoginGitHub(body: GitHubLoginBody, options: any = {}): FetchArgs {\n            // verify required parameter 'body' is not null or undefined\n            if (body === null || body === undefined) {\n                throw new RequiredError('body','Required parameter body was null or undefined when calling authControllerLoginGitHub.');\n            }\n            const localVarPath = `/api/login/github`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            const needsSerialization = (<any>\"GitHubLoginBody\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || \"\");\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {GoogleLoginBody} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        authControllerLoginGoogle(body: GoogleLoginBody, options: any = {}): FetchArgs {\n            // verify required parameter 'body' is not null or undefined\n            if (body === null || body === undefined) {\n                throw new RequiredError('body','Required parameter body was null or undefined when calling authControllerLoginGoogle.');\n            }\n            const localVarPath = `/api/login/google`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            const needsSerialization = (<any>\"GoogleLoginBody\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || \"\");\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * AuthApi - functional programming interface\n * @export\n */\nexport const AuthApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @param {LogOut} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        authControllerLogOut(body: LogOut, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<LogOutSuccess> {\n            const localVarFetchArgs = AuthApiFetchParamCreator(configuration).authControllerLogOut(body, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * \n         * @param {GitHubLoginBody} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        authControllerLoginGitHub(body: GitHubLoginBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<LoginSuccess> {\n            const localVarFetchArgs = AuthApiFetchParamCreator(configuration).authControllerLoginGitHub(body, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * \n         * @param {GoogleLoginBody} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        authControllerLoginGoogle(body: GoogleLoginBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<LoginSuccess> {\n            const localVarFetchArgs = AuthApiFetchParamCreator(configuration).authControllerLoginGoogle(body, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n    }\n};\n\n/**\n * AuthApi - factory interface\n * @export\n */\nexport const AuthApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         * \n         * @param {LogOut} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        authControllerLogOut(body: LogOut, options?: any) {\n            return AuthApiFp(configuration).authControllerLogOut(body, options)(fetch, basePath);\n        },\n        /**\n         * \n         * @param {GitHubLoginBody} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        authControllerLoginGitHub(body: GitHubLoginBody, options?: any) {\n            return AuthApiFp(configuration).authControllerLoginGitHub(body, options)(fetch, basePath);\n        },\n        /**\n         * \n         * @param {GoogleLoginBody} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        authControllerLoginGoogle(body: GoogleLoginBody, options?: any) {\n            return AuthApiFp(configuration).authControllerLoginGoogle(body, options)(fetch, basePath);\n        },\n    };\n};\n\n/**\n * AuthApi - object-oriented interface\n * @export\n * @class AuthApi\n * @extends {BaseAPI}\n */\nexport class AuthApi extends BaseAPI {\n    /**\n     * \n     * @param {LogOut} body \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AuthApi\n     */\n    public authControllerLogOut(body: LogOut, options?: any) {\n        return AuthApiFp(this.configuration).authControllerLogOut(body, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * \n     * @param {GitHubLoginBody} body \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AuthApi\n     */\n    public authControllerLoginGitHub(body: GitHubLoginBody, options?: any) {\n        return AuthApiFp(this.configuration).authControllerLoginGitHub(body, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * \n     * @param {GoogleLoginBody} body \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AuthApi\n     */\n    public authControllerLoginGoogle(body: GoogleLoginBody, options?: any) {\n        return AuthApiFp(this.configuration).authControllerLoginGoogle(body, options)(this.fetch, this.basePath);\n    }\n\n}\n/**\n * ConversationsApi - fetch parameter creator\n * @export\n */\nexport const ConversationsApiFetchParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @param {CreateConversationBodyDto} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        conversationsControllerCreateConversation(body: CreateConversationBodyDto, options: any = {}): FetchArgs {\n            // verify required parameter 'body' is not null or undefined\n            if (body === null || body === undefined) {\n                throw new RequiredError('body','Required parameter body was null or undefined when calling conversationsControllerCreateConversation.');\n            }\n            const localVarPath = `/api/conversations`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearer required\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            const needsSerialization = (<any>\"CreateConversationBodyDto\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || \"\");\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * ConversationsApi - functional programming interface\n * @export\n */\nexport const ConversationsApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @param {CreateConversationBodyDto} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        conversationsControllerCreateConversation(body: CreateConversationBodyDto, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CreateConversationSuccessDto> {\n            const localVarFetchArgs = ConversationsApiFetchParamCreator(configuration).conversationsControllerCreateConversation(body, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n    }\n};\n\n/**\n * ConversationsApi - factory interface\n * @export\n */\nexport const ConversationsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         * \n         * @param {CreateConversationBodyDto} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        conversationsControllerCreateConversation(body: CreateConversationBodyDto, options?: any) {\n            return ConversationsApiFp(configuration).conversationsControllerCreateConversation(body, options)(fetch, basePath);\n        },\n    };\n};\n\n/**\n * ConversationsApi - object-oriented interface\n * @export\n * @class ConversationsApi\n * @extends {BaseAPI}\n */\nexport class ConversationsApi extends BaseAPI {\n    /**\n     * \n     * @param {CreateConversationBodyDto} body \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ConversationsApi\n     */\n    public conversationsControllerCreateConversation(body: CreateConversationBodyDto, options?: any) {\n        return ConversationsApiFp(this.configuration).conversationsControllerCreateConversation(body, options)(this.fetch, this.basePath);\n    }\n\n}\n/**\n * DefaultApi - fetch parameter creator\n * @export\n */\nexport const DefaultApiFetchParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        appControllerGetHello(options: any = {}): FetchArgs {\n            const localVarPath = `/api/hello`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * DefaultApi - functional programming interface\n * @export\n */\nexport const DefaultApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        appControllerGetHello(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).appControllerGetHello(options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n    }\n};\n\n/**\n * DefaultApi - factory interface\n * @export\n */\nexport const DefaultApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        appControllerGetHello(options?: any) {\n            return DefaultApiFp(configuration).appControllerGetHello(options)(fetch, basePath);\n        },\n    };\n};\n\n/**\n * DefaultApi - object-oriented interface\n * @export\n * @class DefaultApi\n * @extends {BaseAPI}\n */\nexport class DefaultApi extends BaseAPI {\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public appControllerGetHello(options?: any) {\n        return DefaultApiFp(this.configuration).appControllerGetHello(options)(this.fetch, this.basePath);\n    }\n\n}\n/**\n * DevApi - fetch parameter creator\n * @export\n */\nexport const DevApiFetchParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @param {CreateCustomUser} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        devControllerCreateCustomUser(body: CreateCustomUser, options: any = {}): FetchArgs {\n            // verify required parameter 'body' is not null or undefined\n            if (body === null || body === undefined) {\n                throw new RequiredError('body','Required parameter body was null or undefined when calling devControllerCreateCustomUser.');\n            }\n            const localVarPath = `/api/dev/create-user`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            const needsSerialization = (<any>\"CreateCustomUser\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || \"\");\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        devControllerCreatePostDev(options: any = {}): FetchArgs {\n            const localVarPath = `/api/dev/create-post`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        devControllerGetJwt(id: string, options: any = {}): FetchArgs {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling devControllerGetJwt.');\n            }\n            const localVarPath = `/api/dev/jwt/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        devControllerLoginDev(options: any = {}): FetchArgs {\n            const localVarPath = `/api/dev/login`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        devControllerMarco(options: any = {}): FetchArgs {\n            const localVarPath = `/api/dev/marco`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        devControllerMarcoPersonal(options: any = {}): FetchArgs {\n            const localVarPath = `/api/dev/marco/personal`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * DevApi - functional programming interface\n * @export\n */\nexport const DevApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @param {CreateCustomUser} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        devControllerCreateCustomUser(body: CreateCustomUser, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<LoginSuccess> {\n            const localVarFetchArgs = DevApiFetchParamCreator(configuration).devControllerCreateCustomUser(body, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        devControllerCreatePostDev(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CreatePostSuccessDto> {\n            const localVarFetchArgs = DevApiFetchParamCreator(configuration).devControllerCreatePostDev(options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * \n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        devControllerGetJwt(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {\n            const localVarFetchArgs = DevApiFetchParamCreator(configuration).devControllerGetJwt(id, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        devControllerLoginDev(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<LoginSuccess> {\n            const localVarFetchArgs = DevApiFetchParamCreator(configuration).devControllerLoginDev(options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        devControllerMarco(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {\n            const localVarFetchArgs = DevApiFetchParamCreator(configuration).devControllerMarco(options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response;\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        devControllerMarcoPersonal(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {\n            const localVarFetchArgs = DevApiFetchParamCreator(configuration).devControllerMarcoPersonal(options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response;\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n    }\n};\n\n/**\n * DevApi - factory interface\n * @export\n */\nexport const DevApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         * \n         * @param {CreateCustomUser} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        devControllerCreateCustomUser(body: CreateCustomUser, options?: any) {\n            return DevApiFp(configuration).devControllerCreateCustomUser(body, options)(fetch, basePath);\n        },\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        devControllerCreatePostDev(options?: any) {\n            return DevApiFp(configuration).devControllerCreatePostDev(options)(fetch, basePath);\n        },\n        /**\n         * \n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        devControllerGetJwt(id: string, options?: any) {\n            return DevApiFp(configuration).devControllerGetJwt(id, options)(fetch, basePath);\n        },\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        devControllerLoginDev(options?: any) {\n            return DevApiFp(configuration).devControllerLoginDev(options)(fetch, basePath);\n        },\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        devControllerMarco(options?: any) {\n            return DevApiFp(configuration).devControllerMarco(options)(fetch, basePath);\n        },\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        devControllerMarcoPersonal(options?: any) {\n            return DevApiFp(configuration).devControllerMarcoPersonal(options)(fetch, basePath);\n        },\n    };\n};\n\n/**\n * DevApi - object-oriented interface\n * @export\n * @class DevApi\n * @extends {BaseAPI}\n */\nexport class DevApi extends BaseAPI {\n    /**\n     * \n     * @param {CreateCustomUser} body \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DevApi\n     */\n    public devControllerCreateCustomUser(body: CreateCustomUser, options?: any) {\n        return DevApiFp(this.configuration).devControllerCreateCustomUser(body, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DevApi\n     */\n    public devControllerCreatePostDev(options?: any) {\n        return DevApiFp(this.configuration).devControllerCreatePostDev(options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * \n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DevApi\n     */\n    public devControllerGetJwt(id: string, options?: any) {\n        return DevApiFp(this.configuration).devControllerGetJwt(id, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DevApi\n     */\n    public devControllerLoginDev(options?: any) {\n        return DevApiFp(this.configuration).devControllerLoginDev(options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DevApi\n     */\n    public devControllerMarco(options?: any) {\n        return DevApiFp(this.configuration).devControllerMarco(options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DevApi\n     */\n    public devControllerMarcoPersonal(options?: any) {\n        return DevApiFp(this.configuration).devControllerMarcoPersonal(options)(this.fetch, this.basePath);\n    }\n\n}\n/**\n * GroupsApi - fetch parameter creator\n * @export\n */\nexport const GroupsApiFetchParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @param {CreateGroupDto} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        groupsControllerCreateGroup(body: CreateGroupDto, options: any = {}): FetchArgs {\n            // verify required parameter 'body' is not null or undefined\n            if (body === null || body === undefined) {\n                throw new RequiredError('body','Required parameter body was null or undefined when calling groupsControllerCreateGroup.');\n            }\n            const localVarPath = `/api/groups`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            const needsSerialization = (<any>\"CreateGroupDto\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || \"\");\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        groupsControllerGetGroups(options: any = {}): FetchArgs {\n            const localVarPath = `/api/groups`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} privateId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        groupsControllerGetPrivateGroup(privateId: string, options: any = {}): FetchArgs {\n            // verify required parameter 'privateId' is not null or undefined\n            if (privateId === null || privateId === undefined) {\n                throw new RequiredError('privateId','Required parameter privateId was null or undefined when calling groupsControllerGetPrivateGroup.');\n            }\n            const localVarPath = `/api/groups/{privateId}`\n                .replace(`{${\"privateId\"}}`, encodeURIComponent(String(privateId)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        groupsControllerGetPublicGroup(id: string, options: any = {}): FetchArgs {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling groupsControllerGetPublicGroup.');\n            }\n            const localVarPath = `/api/groups/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        groupsControllerJoinGroup(id: string, options: any = {}): FetchArgs {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling groupsControllerJoinGroup.');\n            }\n            const localVarPath = `/api/groups/join/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        groupsControllerLeaveGroup(id: string, options: any = {}): FetchArgs {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling groupsControllerLeaveGroup.');\n            }\n            const localVarPath = `/api/groups/leave/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * GroupsApi - functional programming interface\n * @export\n */\nexport const GroupsApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @param {CreateGroupDto} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        groupsControllerCreateGroup(body: CreateGroupDto, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CreateGroupSuccessDto> {\n            const localVarFetchArgs = GroupsApiFetchParamCreator(configuration).groupsControllerCreateGroup(body, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        groupsControllerGetGroups(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GetGroupsSuccessDto> {\n            const localVarFetchArgs = GroupsApiFetchParamCreator(configuration).groupsControllerGetGroups(options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * \n         * @param {string} privateId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        groupsControllerGetPrivateGroup(privateId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GroupDto> {\n            const localVarFetchArgs = GroupsApiFetchParamCreator(configuration).groupsControllerGetPrivateGroup(privateId, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * \n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        groupsControllerGetPublicGroup(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GroupDto> {\n            const localVarFetchArgs = GroupsApiFetchParamCreator(configuration).groupsControllerGetPublicGroup(id, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * \n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        groupsControllerJoinGroup(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {\n            const localVarFetchArgs = GroupsApiFetchParamCreator(configuration).groupsControllerJoinGroup(id, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response;\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * \n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        groupsControllerLeaveGroup(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {\n            const localVarFetchArgs = GroupsApiFetchParamCreator(configuration).groupsControllerLeaveGroup(id, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response;\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n    }\n};\n\n/**\n * GroupsApi - factory interface\n * @export\n */\nexport const GroupsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         * \n         * @param {CreateGroupDto} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        groupsControllerCreateGroup(body: CreateGroupDto, options?: any) {\n            return GroupsApiFp(configuration).groupsControllerCreateGroup(body, options)(fetch, basePath);\n        },\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        groupsControllerGetGroups(options?: any) {\n            return GroupsApiFp(configuration).groupsControllerGetGroups(options)(fetch, basePath);\n        },\n        /**\n         * \n         * @param {string} privateId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        groupsControllerGetPrivateGroup(privateId: string, options?: any) {\n            return GroupsApiFp(configuration).groupsControllerGetPrivateGroup(privateId, options)(fetch, basePath);\n        },\n        /**\n         * \n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        groupsControllerGetPublicGroup(id: string, options?: any) {\n            return GroupsApiFp(configuration).groupsControllerGetPublicGroup(id, options)(fetch, basePath);\n        },\n        /**\n         * \n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        groupsControllerJoinGroup(id: string, options?: any) {\n            return GroupsApiFp(configuration).groupsControllerJoinGroup(id, options)(fetch, basePath);\n        },\n        /**\n         * \n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        groupsControllerLeaveGroup(id: string, options?: any) {\n            return GroupsApiFp(configuration).groupsControllerLeaveGroup(id, options)(fetch, basePath);\n        },\n    };\n};\n\n/**\n * GroupsApi - object-oriented interface\n * @export\n * @class GroupsApi\n * @extends {BaseAPI}\n */\nexport class GroupsApi extends BaseAPI {\n    /**\n     * \n     * @param {CreateGroupDto} body \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GroupsApi\n     */\n    public groupsControllerCreateGroup(body: CreateGroupDto, options?: any) {\n        return GroupsApiFp(this.configuration).groupsControllerCreateGroup(body, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GroupsApi\n     */\n    public groupsControllerGetGroups(options?: any) {\n        return GroupsApiFp(this.configuration).groupsControllerGetGroups(options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * \n     * @param {string} privateId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GroupsApi\n     */\n    public groupsControllerGetPrivateGroup(privateId: string, options?: any) {\n        return GroupsApiFp(this.configuration).groupsControllerGetPrivateGroup(privateId, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * \n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GroupsApi\n     */\n    public groupsControllerGetPublicGroup(id: string, options?: any) {\n        return GroupsApiFp(this.configuration).groupsControllerGetPublicGroup(id, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * \n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GroupsApi\n     */\n    public groupsControllerJoinGroup(id: string, options?: any) {\n        return GroupsApiFp(this.configuration).groupsControllerJoinGroup(id, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * \n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GroupsApi\n     */\n    public groupsControllerLeaveGroup(id: string, options?: any) {\n        return GroupsApiFp(this.configuration).groupsControllerLeaveGroup(id, options)(this.fetch, this.basePath);\n    }\n\n}\n/**\n * MessagesApi - fetch parameter creator\n * @export\n */\nexport const MessagesApiFetchParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @param {CreateMessageBodyDto} body \n         * @param {string} conversationID \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        messagesControllerCreateMessage(body: CreateMessageBodyDto, conversationID: string, options: any = {}): FetchArgs {\n            // verify required parameter 'body' is not null or undefined\n            if (body === null || body === undefined) {\n                throw new RequiredError('body','Required parameter body was null or undefined when calling messagesControllerCreateMessage.');\n            }\n            // verify required parameter 'conversationID' is not null or undefined\n            if (conversationID === null || conversationID === undefined) {\n                throw new RequiredError('conversationID','Required parameter conversationID was null or undefined when calling messagesControllerCreateMessage.');\n            }\n            const localVarPath = `/api/messages/{conversationID}`\n                .replace(`{${\"conversationID\"}}`, encodeURIComponent(String(conversationID)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearer required\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            const needsSerialization = (<any>\"CreateMessageBodyDto\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || \"\");\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} conversationID \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        messagesControllerGetMessagesInConversation(conversationID: string, options: any = {}): FetchArgs {\n            // verify required parameter 'conversationID' is not null or undefined\n            if (conversationID === null || conversationID === undefined) {\n                throw new RequiredError('conversationID','Required parameter conversationID was null or undefined when calling messagesControllerGetMessagesInConversation.');\n            }\n            const localVarPath = `/api/messages/{conversationID}`\n                .replace(`{${\"conversationID\"}}`, encodeURIComponent(String(conversationID)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * MessagesApi - functional programming interface\n * @export\n */\nexport const MessagesApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @param {CreateMessageBodyDto} body \n         * @param {string} conversationID \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        messagesControllerCreateMessage(body: CreateMessageBodyDto, conversationID: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CreateMessageSuccessDto> {\n            const localVarFetchArgs = MessagesApiFetchParamCreator(configuration).messagesControllerCreateMessage(body, conversationID, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * \n         * @param {string} conversationID \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        messagesControllerGetMessagesInConversation(conversationID: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<MessageDto>> {\n            const localVarFetchArgs = MessagesApiFetchParamCreator(configuration).messagesControllerGetMessagesInConversation(conversationID, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n    }\n};\n\n/**\n * MessagesApi - factory interface\n * @export\n */\nexport const MessagesApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         * \n         * @param {CreateMessageBodyDto} body \n         * @param {string} conversationID \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        messagesControllerCreateMessage(body: CreateMessageBodyDto, conversationID: string, options?: any) {\n            return MessagesApiFp(configuration).messagesControllerCreateMessage(body, conversationID, options)(fetch, basePath);\n        },\n        /**\n         * \n         * @param {string} conversationID \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        messagesControllerGetMessagesInConversation(conversationID: string, options?: any) {\n            return MessagesApiFp(configuration).messagesControllerGetMessagesInConversation(conversationID, options)(fetch, basePath);\n        },\n    };\n};\n\n/**\n * MessagesApi - object-oriented interface\n * @export\n * @class MessagesApi\n * @extends {BaseAPI}\n */\nexport class MessagesApi extends BaseAPI {\n    /**\n     * \n     * @param {CreateMessageBodyDto} body \n     * @param {string} conversationID \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof MessagesApi\n     */\n    public messagesControllerCreateMessage(body: CreateMessageBodyDto, conversationID: string, options?: any) {\n        return MessagesApiFp(this.configuration).messagesControllerCreateMessage(body, conversationID, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * \n     * @param {string} conversationID \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof MessagesApi\n     */\n    public messagesControllerGetMessagesInConversation(conversationID: string, options?: any) {\n        return MessagesApiFp(this.configuration).messagesControllerGetMessagesInConversation(conversationID, options)(this.fetch, this.basePath);\n    }\n\n}\n/**\n * PostsApi - fetch parameter creator\n * @export\n */\nexport const PostsApiFetchParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @param {CreatePostBodyDto} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postsControllerCreatePost(body: CreatePostBodyDto, options: any = {}): FetchArgs {\n            // verify required parameter 'body' is not null or undefined\n            if (body === null || body === undefined) {\n                throw new RequiredError('body','Required parameter body was null or undefined when calling postsControllerCreatePost.');\n            }\n            const localVarPath = `/api/posts`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearer required\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            const needsSerialization = (<any>\"CreatePostBodyDto\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || \"\");\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} postID \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postsControllerDeletePostByPostID(postID: string, options: any = {}): FetchArgs {\n            // verify required parameter 'postID' is not null or undefined\n            if (postID === null || postID === undefined) {\n                throw new RequiredError('postID','Required parameter postID was null or undefined when calling postsControllerDeletePostByPostID.');\n            }\n            const localVarPath = `/api/posts/{postID}`\n                .replace(`{${\"postID\"}}`, encodeURIComponent(String(postID)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} postID \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postsControllerGetPostByID(postID: string, options: any = {}): FetchArgs {\n            // verify required parameter 'postID' is not null or undefined\n            if (postID === null || postID === undefined) {\n                throw new RequiredError('postID','Required parameter postID was null or undefined when calling postsControllerGetPostByID.');\n            }\n            const localVarPath = `/api/posts/byID/{postID}`\n                .replace(`{${\"postID\"}}`, encodeURIComponent(String(postID)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} slug \n         * @param {boolean} getAuthor \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postsControllerGetPostBySlug(slug: string, getAuthor: boolean, options: any = {}): FetchArgs {\n            // verify required parameter 'slug' is not null or undefined\n            if (slug === null || slug === undefined) {\n                throw new RequiredError('slug','Required parameter slug was null or undefined when calling postsControllerGetPostBySlug.');\n            }\n            // verify required parameter 'getAuthor' is not null or undefined\n            if (getAuthor === null || getAuthor === undefined) {\n                throw new RequiredError('getAuthor','Required parameter getAuthor was null or undefined when calling postsControllerGetPostBySlug.');\n            }\n            const localVarPath = `/api/posts/{slug}`\n                .replace(`{${\"slug\"}}`, encodeURIComponent(String(slug)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (getAuthor !== undefined) {\n                localVarQueryParameter['get-author'] = getAuthor;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} postID \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postsControllerIncrementView(postID: string, options: any = {}): FetchArgs {\n            // verify required parameter 'postID' is not null or undefined\n            if (postID === null || postID === undefined) {\n                throw new RequiredError('postID','Required parameter postID was null or undefined when calling postsControllerIncrementView.');\n            }\n            const localVarPath = `/api/posts/increment-view/{postID}`\n                .replace(`{${\"postID\"}}`, encodeURIComponent(String(postID)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} postID \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postsControllerLikePost(postID: string, options: any = {}): FetchArgs {\n            // verify required parameter 'postID' is not null or undefined\n            if (postID === null || postID === undefined) {\n                throw new RequiredError('postID','Required parameter postID was null or undefined when calling postsControllerLikePost.');\n            }\n            const localVarPath = `/api/posts/like`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearer required\n\n            if (postID !== undefined) {\n                localVarQueryParameter['postID'] = postID;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} postID \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postsControllerUnlikePost(postID: string, options: any = {}): FetchArgs {\n            // verify required parameter 'postID' is not null or undefined\n            if (postID === null || postID === undefined) {\n                throw new RequiredError('postID','Required parameter postID was null or undefined when calling postsControllerUnlikePost.');\n            }\n            const localVarPath = `/api/posts/unlike`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearer required\n\n            if (postID !== undefined) {\n                localVarQueryParameter['postID'] = postID;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {UpdatePostBodyDto} body \n         * @param {string} slug \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postsControllerUpdatePostBySlug(body: UpdatePostBodyDto, slug: string, options: any = {}): FetchArgs {\n            // verify required parameter 'body' is not null or undefined\n            if (body === null || body === undefined) {\n                throw new RequiredError('body','Required parameter body was null or undefined when calling postsControllerUpdatePostBySlug.');\n            }\n            // verify required parameter 'slug' is not null or undefined\n            if (slug === null || slug === undefined) {\n                throw new RequiredError('slug','Required parameter slug was null or undefined when calling postsControllerUpdatePostBySlug.');\n            }\n            const localVarPath = `/api/posts/{slug}`\n                .replace(`{${\"slug\"}}`, encodeURIComponent(String(slug)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            const needsSerialization = (<any>\"UpdatePostBodyDto\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || \"\");\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} tagID The ObjectID of the tag\n         * @param {number} [requestedCount] How many posts to fetch\n         * @param {number} [startIdx] What index to start at, e.g. if startIdx &#x3D; 5, then the 5 posts (0th, 1st, 2nd, 3rd, 4th) of this tag will not be fetched\n         * @param {any} [excludePostIDs] An object that works like a set of Post ObjectIDs to exclude\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        tagsControllerGetPostsByTag(tagID: string, requestedCount?: number, startIdx?: number, excludePostIDs?: any, options: any = {}): FetchArgs {\n            // verify required parameter 'tagID' is not null or undefined\n            if (tagID === null || tagID === undefined) {\n                throw new RequiredError('tagID','Required parameter tagID was null or undefined when calling tagsControllerGetPostsByTag.');\n            }\n            const localVarPath = `/api/tags/posts`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (tagID !== undefined) {\n                localVarQueryParameter['tagID'] = tagID;\n            }\n\n            if (requestedCount !== undefined) {\n                localVarQueryParameter['requestedCount'] = requestedCount;\n            }\n\n            if (startIdx !== undefined) {\n                localVarQueryParameter['startIdx'] = startIdx;\n            }\n\n            if (excludePostIDs !== undefined) {\n                localVarQueryParameter['excludePostIDs'] = excludePostIDs;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * PostsApi - functional programming interface\n * @export\n */\nexport const PostsApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @param {CreatePostBodyDto} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postsControllerCreatePost(body: CreatePostBodyDto, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CreatePostSuccessDto> {\n            const localVarFetchArgs = PostsApiFetchParamCreator(configuration).postsControllerCreatePost(body, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * \n         * @param {string} postID \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postsControllerDeletePostByPostID(postID: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {\n            const localVarFetchArgs = PostsApiFetchParamCreator(configuration).postsControllerDeletePostByPostID(postID, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response;\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * \n         * @param {string} postID \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postsControllerGetPostByID(postID: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GetPostDetailsSuccessDto> {\n            const localVarFetchArgs = PostsApiFetchParamCreator(configuration).postsControllerGetPostByID(postID, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * \n         * @param {string} slug \n         * @param {boolean} getAuthor \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postsControllerGetPostBySlug(slug: string, getAuthor: boolean, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GetPostDetailsSuccessDto> {\n            const localVarFetchArgs = PostsApiFetchParamCreator(configuration).postsControllerGetPostBySlug(slug, getAuthor, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * \n         * @param {string} postID \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postsControllerIncrementView(postID: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {\n            const localVarFetchArgs = PostsApiFetchParamCreator(configuration).postsControllerIncrementView(postID, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response;\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * \n         * @param {string} postID \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postsControllerLikePost(postID: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {\n            const localVarFetchArgs = PostsApiFetchParamCreator(configuration).postsControllerLikePost(postID, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response;\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * \n         * @param {string} postID \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postsControllerUnlikePost(postID: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {\n            const localVarFetchArgs = PostsApiFetchParamCreator(configuration).postsControllerUnlikePost(postID, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response;\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * \n         * @param {UpdatePostBodyDto} body \n         * @param {string} slug \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postsControllerUpdatePostBySlug(body: UpdatePostBodyDto, slug: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UpdatePostSuccessDto> {\n            const localVarFetchArgs = PostsApiFetchParamCreator(configuration).postsControllerUpdatePostBySlug(body, slug, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * \n         * @param {string} tagID The ObjectID of the tag\n         * @param {number} [requestedCount] How many posts to fetch\n         * @param {number} [startIdx] What index to start at, e.g. if startIdx &#x3D; 5, then the 5 posts (0th, 1st, 2nd, 3rd, 4th) of this tag will not be fetched\n         * @param {any} [excludePostIDs] An object that works like a set of Post ObjectIDs to exclude\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        tagsControllerGetPostsByTag(tagID: string, requestedCount?: number, startIdx?: number, excludePostIDs?: any, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GetPostsByTagDto> {\n            const localVarFetchArgs = PostsApiFetchParamCreator(configuration).tagsControllerGetPostsByTag(tagID, requestedCount, startIdx, excludePostIDs, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n    }\n};\n\n/**\n * PostsApi - factory interface\n * @export\n */\nexport const PostsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         * \n         * @param {CreatePostBodyDto} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postsControllerCreatePost(body: CreatePostBodyDto, options?: any) {\n            return PostsApiFp(configuration).postsControllerCreatePost(body, options)(fetch, basePath);\n        },\n        /**\n         * \n         * @param {string} postID \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postsControllerDeletePostByPostID(postID: string, options?: any) {\n            return PostsApiFp(configuration).postsControllerDeletePostByPostID(postID, options)(fetch, basePath);\n        },\n        /**\n         * \n         * @param {string} postID \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postsControllerGetPostByID(postID: string, options?: any) {\n            return PostsApiFp(configuration).postsControllerGetPostByID(postID, options)(fetch, basePath);\n        },\n        /**\n         * \n         * @param {string} slug \n         * @param {boolean} getAuthor \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postsControllerGetPostBySlug(slug: string, getAuthor: boolean, options?: any) {\n            return PostsApiFp(configuration).postsControllerGetPostBySlug(slug, getAuthor, options)(fetch, basePath);\n        },\n        /**\n         * \n         * @param {string} postID \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postsControllerIncrementView(postID: string, options?: any) {\n            return PostsApiFp(configuration).postsControllerIncrementView(postID, options)(fetch, basePath);\n        },\n        /**\n         * \n         * @param {string} postID \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postsControllerLikePost(postID: string, options?: any) {\n            return PostsApiFp(configuration).postsControllerLikePost(postID, options)(fetch, basePath);\n        },\n        /**\n         * \n         * @param {string} postID \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postsControllerUnlikePost(postID: string, options?: any) {\n            return PostsApiFp(configuration).postsControllerUnlikePost(postID, options)(fetch, basePath);\n        },\n        /**\n         * \n         * @param {UpdatePostBodyDto} body \n         * @param {string} slug \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postsControllerUpdatePostBySlug(body: UpdatePostBodyDto, slug: string, options?: any) {\n            return PostsApiFp(configuration).postsControllerUpdatePostBySlug(body, slug, options)(fetch, basePath);\n        },\n        /**\n         * \n         * @param {string} tagID The ObjectID of the tag\n         * @param {number} [requestedCount] How many posts to fetch\n         * @param {number} [startIdx] What index to start at, e.g. if startIdx &#x3D; 5, then the 5 posts (0th, 1st, 2nd, 3rd, 4th) of this tag will not be fetched\n         * @param {any} [excludePostIDs] An object that works like a set of Post ObjectIDs to exclude\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        tagsControllerGetPostsByTag(tagID: string, requestedCount?: number, startIdx?: number, excludePostIDs?: any, options?: any) {\n            return PostsApiFp(configuration).tagsControllerGetPostsByTag(tagID, requestedCount, startIdx, excludePostIDs, options)(fetch, basePath);\n        },\n    };\n};\n\n/**\n * PostsApi - object-oriented interface\n * @export\n * @class PostsApi\n * @extends {BaseAPI}\n */\nexport class PostsApi extends BaseAPI {\n    /**\n     * \n     * @param {CreatePostBodyDto} body \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PostsApi\n     */\n    public postsControllerCreatePost(body: CreatePostBodyDto, options?: any) {\n        return PostsApiFp(this.configuration).postsControllerCreatePost(body, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * \n     * @param {string} postID \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PostsApi\n     */\n    public postsControllerDeletePostByPostID(postID: string, options?: any) {\n        return PostsApiFp(this.configuration).postsControllerDeletePostByPostID(postID, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * \n     * @param {string} postID \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PostsApi\n     */\n    public postsControllerGetPostByID(postID: string, options?: any) {\n        return PostsApiFp(this.configuration).postsControllerGetPostByID(postID, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * \n     * @param {string} slug \n     * @param {boolean} getAuthor \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PostsApi\n     */\n    public postsControllerGetPostBySlug(slug: string, getAuthor: boolean, options?: any) {\n        return PostsApiFp(this.configuration).postsControllerGetPostBySlug(slug, getAuthor, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * \n     * @param {string} postID \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PostsApi\n     */\n    public postsControllerIncrementView(postID: string, options?: any) {\n        return PostsApiFp(this.configuration).postsControllerIncrementView(postID, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * \n     * @param {string} postID \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PostsApi\n     */\n    public postsControllerLikePost(postID: string, options?: any) {\n        return PostsApiFp(this.configuration).postsControllerLikePost(postID, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * \n     * @param {string} postID \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PostsApi\n     */\n    public postsControllerUnlikePost(postID: string, options?: any) {\n        return PostsApiFp(this.configuration).postsControllerUnlikePost(postID, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * \n     * @param {UpdatePostBodyDto} body \n     * @param {string} slug \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PostsApi\n     */\n    public postsControllerUpdatePostBySlug(body: UpdatePostBodyDto, slug: string, options?: any) {\n        return PostsApiFp(this.configuration).postsControllerUpdatePostBySlug(body, slug, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * \n     * @param {string} tagID The ObjectID of the tag\n     * @param {number} [requestedCount] How many posts to fetch\n     * @param {number} [startIdx] What index to start at, e.g. if startIdx &#x3D; 5, then the 5 posts (0th, 1st, 2nd, 3rd, 4th) of this tag will not be fetched\n     * @param {any} [excludePostIDs] An object that works like a set of Post ObjectIDs to exclude\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PostsApi\n     */\n    public tagsControllerGetPostsByTag(tagID: string, requestedCount?: number, startIdx?: number, excludePostIDs?: any, options?: any) {\n        return PostsApiFp(this.configuration).tagsControllerGetPostsByTag(tagID, requestedCount, startIdx, excludePostIDs, options)(this.fetch, this.basePath);\n    }\n\n}\n/**\n * SearchApi - fetch parameter creator\n * @export\n */\nexport const SearchApiFetchParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Finds posts containing any of the terms in the query string\n         * @param {string} q \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        searchControllerSearch(q: string, options: any = {}): FetchArgs {\n            // verify required parameter 'q' is not null or undefined\n            if (q === null || q === undefined) {\n                throw new RequiredError('q','Required parameter q was null or undefined when calling searchControllerSearch.');\n            }\n            const localVarPath = `/api/search`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (q !== undefined) {\n                localVarQueryParameter['q'] = q;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * SearchApi - functional programming interface\n * @export\n */\nexport const SearchApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * Finds posts containing any of the terms in the query string\n         * @param {string} q \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        searchControllerSearch(q: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<SearchResultDto> {\n            const localVarFetchArgs = SearchApiFetchParamCreator(configuration).searchControllerSearch(q, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n    }\n};\n\n/**\n * SearchApi - factory interface\n * @export\n */\nexport const SearchApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         * Finds posts containing any of the terms in the query string\n         * @param {string} q \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        searchControllerSearch(q: string, options?: any) {\n            return SearchApiFp(configuration).searchControllerSearch(q, options)(fetch, basePath);\n        },\n    };\n};\n\n/**\n * SearchApi - object-oriented interface\n * @export\n * @class SearchApi\n * @extends {BaseAPI}\n */\nexport class SearchApi extends BaseAPI {\n    /**\n     * Finds posts containing any of the terms in the query string\n     * @param {string} q \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SearchApi\n     */\n    public searchControllerSearch(q: string, options?: any) {\n        return SearchApiFp(this.configuration).searchControllerSearch(q, options)(this.fetch, this.basePath);\n    }\n\n}\n/**\n * TrendingApi - fetch parameter creator\n * @export\n */\nexport const TrendingApiFetchParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @param {number} fetchCount \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        trendingControllerGetTrending(fetchCount: number, options: any = {}): FetchArgs {\n            // verify required parameter 'fetchCount' is not null or undefined\n            if (fetchCount === null || fetchCount === undefined) {\n                throw new RequiredError('fetchCount','Required parameter fetchCount was null or undefined when calling trendingControllerGetTrending.');\n            }\n            const localVarPath = `/api/trending/fetchCount`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (fetchCount !== undefined) {\n                localVarQueryParameter['fetchCount'] = fetchCount;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {number} fetchCount \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        trendingControllerGetTrendingLoggedIn(fetchCount: number, options: any = {}): FetchArgs {\n            // verify required parameter 'fetchCount' is not null or undefined\n            if (fetchCount === null || fetchCount === undefined) {\n                throw new RequiredError('fetchCount','Required parameter fetchCount was null or undefined when calling trendingControllerGetTrendingLoggedIn.');\n            }\n            const localVarPath = `/api/trending/loggedIn`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (fetchCount !== undefined) {\n                localVarQueryParameter['fetchCount'] = fetchCount;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * TrendingApi - functional programming interface\n * @export\n */\nexport const TrendingApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @param {number} fetchCount \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        trendingControllerGetTrending(fetchCount: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GetInitialDataDto> {\n            const localVarFetchArgs = TrendingApiFetchParamCreator(configuration).trendingControllerGetTrending(fetchCount, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * \n         * @param {number} fetchCount \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        trendingControllerGetTrendingLoggedIn(fetchCount: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GetInitialDataLoggedInDto> {\n            const localVarFetchArgs = TrendingApiFetchParamCreator(configuration).trendingControllerGetTrendingLoggedIn(fetchCount, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n    }\n};\n\n/**\n * TrendingApi - factory interface\n * @export\n */\nexport const TrendingApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         * \n         * @param {number} fetchCount \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        trendingControllerGetTrending(fetchCount: number, options?: any) {\n            return TrendingApiFp(configuration).trendingControllerGetTrending(fetchCount, options)(fetch, basePath);\n        },\n        /**\n         * \n         * @param {number} fetchCount \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        trendingControllerGetTrendingLoggedIn(fetchCount: number, options?: any) {\n            return TrendingApiFp(configuration).trendingControllerGetTrendingLoggedIn(fetchCount, options)(fetch, basePath);\n        },\n    };\n};\n\n/**\n * TrendingApi - object-oriented interface\n * @export\n * @class TrendingApi\n * @extends {BaseAPI}\n */\nexport class TrendingApi extends BaseAPI {\n    /**\n     * \n     * @param {number} fetchCount \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof TrendingApi\n     */\n    public trendingControllerGetTrending(fetchCount: number, options?: any) {\n        return TrendingApiFp(this.configuration).trendingControllerGetTrending(fetchCount, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * \n     * @param {number} fetchCount \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof TrendingApi\n     */\n    public trendingControllerGetTrendingLoggedIn(fetchCount: number, options?: any) {\n        return TrendingApiFp(this.configuration).trendingControllerGetTrendingLoggedIn(fetchCount, options)(this.fetch, this.basePath);\n    }\n\n}\n/**\n * UploadApi - fetch parameter creator\n * @export\n */\nexport const UploadApiFetchParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Not implemented. Once implemented, use helper function in 'frontend/src/api-upload'. (Don't use 'new UploadApi().uploadController ...' from 'frontend/src/api' as it does not work.)\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        uploadControllerUploadPrivateFile(options: any = {}): FetchArgs {\n            const localVarPath = `/api/upload/private/file`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Note: use helper function in 'frontend/src/api-upload'. (Don't use 'new UploadApi().uploadController ...' from 'frontend/src/api' as it does not work. )\n         * @param {FileUploadDto} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        uploadControllerUploadProfileBannerPic(body: FileUploadDto, options: any = {}): FetchArgs {\n            // verify required parameter 'body' is not null or undefined\n            if (body === null || body === undefined) {\n                throw new RequiredError('body','Required parameter body was null or undefined when calling uploadControllerUploadProfileBannerPic.');\n            }\n            const localVarPath = `/api/upload/profile-banner-pic`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            const needsSerialization = (<any>\"FileUploadDto\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || \"\");\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Note: use helper function in 'frontend/src/api-upload'. The generated version for this front end API helpers (frontend/src/api) doesn't work.\n         * @param {FileUploadDto} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        uploadControllerUploadProfilePic(body: FileUploadDto, options: any = {}): FetchArgs {\n            // verify required parameter 'body' is not null or undefined\n            if (body === null || body === undefined) {\n                throw new RequiredError('body','Required parameter body was null or undefined when calling uploadControllerUploadProfilePic.');\n            }\n            const localVarPath = `/api/upload/profile-pic`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            const needsSerialization = (<any>\"FileUploadDto\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || \"\");\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Note: use helper function in 'frontend/src/api-upload'. (Don't use 'new UploadApi().uploadController ...' from 'frontend/src/api' as it does not work.)\n         * @param {FileUploadDto} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        uploadControllerUploadPublicAsset(body: FileUploadDto, options: any = {}): FetchArgs {\n            // verify required parameter 'body' is not null or undefined\n            if (body === null || body === undefined) {\n                throw new RequiredError('body','Required parameter body was null or undefined when calling uploadControllerUploadPublicAsset.');\n            }\n            const localVarPath = `/api/upload/public/asset`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            const needsSerialization = (<any>\"FileUploadDto\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || \"\");\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * UploadApi - functional programming interface\n * @export\n */\nexport const UploadApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * Not implemented. Once implemented, use helper function in 'frontend/src/api-upload'. (Don't use 'new UploadApi().uploadController ...' from 'frontend/src/api' as it does not work.)\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        uploadControllerUploadPrivateFile(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UploadSuccess> {\n            const localVarFetchArgs = UploadApiFetchParamCreator(configuration).uploadControllerUploadPrivateFile(options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Note: use helper function in 'frontend/src/api-upload'. (Don't use 'new UploadApi().uploadController ...' from 'frontend/src/api' as it does not work. )\n         * @param {FileUploadDto} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        uploadControllerUploadProfileBannerPic(body: FileUploadDto, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UploadSuccess> {\n            const localVarFetchArgs = UploadApiFetchParamCreator(configuration).uploadControllerUploadProfileBannerPic(body, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Note: use helper function in 'frontend/src/api-upload'. The generated version for this front end API helpers (frontend/src/api) doesn't work.\n         * @param {FileUploadDto} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        uploadControllerUploadProfilePic(body: FileUploadDto, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UploadSuccess> {\n            const localVarFetchArgs = UploadApiFetchParamCreator(configuration).uploadControllerUploadProfilePic(body, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Note: use helper function in 'frontend/src/api-upload'. (Don't use 'new UploadApi().uploadController ...' from 'frontend/src/api' as it does not work.)\n         * @param {FileUploadDto} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        uploadControllerUploadPublicAsset(body: FileUploadDto, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UploadSuccess> {\n            const localVarFetchArgs = UploadApiFetchParamCreator(configuration).uploadControllerUploadPublicAsset(body, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n    }\n};\n\n/**\n * UploadApi - factory interface\n * @export\n */\nexport const UploadApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         * Not implemented. Once implemented, use helper function in 'frontend/src/api-upload'. (Don't use 'new UploadApi().uploadController ...' from 'frontend/src/api' as it does not work.)\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        uploadControllerUploadPrivateFile(options?: any) {\n            return UploadApiFp(configuration).uploadControllerUploadPrivateFile(options)(fetch, basePath);\n        },\n        /**\n         * Note: use helper function in 'frontend/src/api-upload'. (Don't use 'new UploadApi().uploadController ...' from 'frontend/src/api' as it does not work. )\n         * @param {FileUploadDto} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        uploadControllerUploadProfileBannerPic(body: FileUploadDto, options?: any) {\n            return UploadApiFp(configuration).uploadControllerUploadProfileBannerPic(body, options)(fetch, basePath);\n        },\n        /**\n         * Note: use helper function in 'frontend/src/api-upload'. The generated version for this front end API helpers (frontend/src/api) doesn't work.\n         * @param {FileUploadDto} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        uploadControllerUploadProfilePic(body: FileUploadDto, options?: any) {\n            return UploadApiFp(configuration).uploadControllerUploadProfilePic(body, options)(fetch, basePath);\n        },\n        /**\n         * Note: use helper function in 'frontend/src/api-upload'. (Don't use 'new UploadApi().uploadController ...' from 'frontend/src/api' as it does not work.)\n         * @param {FileUploadDto} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        uploadControllerUploadPublicAsset(body: FileUploadDto, options?: any) {\n            return UploadApiFp(configuration).uploadControllerUploadPublicAsset(body, options)(fetch, basePath);\n        },\n    };\n};\n\n/**\n * UploadApi - object-oriented interface\n * @export\n * @class UploadApi\n * @extends {BaseAPI}\n */\nexport class UploadApi extends BaseAPI {\n    /**\n     * Not implemented. Once implemented, use helper function in 'frontend/src/api-upload'. (Don't use 'new UploadApi().uploadController ...' from 'frontend/src/api' as it does not work.)\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UploadApi\n     */\n    public uploadControllerUploadPrivateFile(options?: any) {\n        return UploadApiFp(this.configuration).uploadControllerUploadPrivateFile(options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Note: use helper function in 'frontend/src/api-upload'. (Don't use 'new UploadApi().uploadController ...' from 'frontend/src/api' as it does not work. )\n     * @param {FileUploadDto} body \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UploadApi\n     */\n    public uploadControllerUploadProfileBannerPic(body: FileUploadDto, options?: any) {\n        return UploadApiFp(this.configuration).uploadControllerUploadProfileBannerPic(body, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Note: use helper function in 'frontend/src/api-upload'. The generated version for this front end API helpers (frontend/src/api) doesn't work.\n     * @param {FileUploadDto} body \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UploadApi\n     */\n    public uploadControllerUploadProfilePic(body: FileUploadDto, options?: any) {\n        return UploadApiFp(this.configuration).uploadControllerUploadProfilePic(body, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Note: use helper function in 'frontend/src/api-upload'. (Don't use 'new UploadApi().uploadController ...' from 'frontend/src/api' as it does not work.)\n     * @param {FileUploadDto} body \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UploadApi\n     */\n    public uploadControllerUploadPublicAsset(body: FileUploadDto, options?: any) {\n        return UploadApiFp(this.configuration).uploadControllerUploadPublicAsset(body, options)(this.fetch, this.basePath);\n    }\n\n}\n/**\n * UserApi - fetch parameter creator\n * @export\n */\nexport const UserApiFetchParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        userControllerAddFollowing(id: string, options: any = {}): FetchArgs {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling userControllerAddFollowing.');\n            }\n            const localVarPath = `/api/user/addFollowing/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearer required\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * For updating user's name, status and tags. To update profile image or banner image, use their upload endpoints instead.\n         * @param {UpdateProfileReqDto} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        userControllerEditProfile(body: UpdateProfileReqDto, options: any = {}): FetchArgs {\n            // verify required parameter 'body' is not null or undefined\n            if (body === null || body === undefined) {\n                throw new RequiredError('body','Required parameter body was null or undefined when calling userControllerEditProfile.');\n            }\n            const localVarPath = `/api/user/edit-profile`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearer required\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            const needsSerialization = (<any>\"UpdateProfileReqDto\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || \"\");\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Retrieve the current logged in user\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        userControllerGetUser(options: any = {}): FetchArgs {\n            const localVarPath = `/api/user`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearer required\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} username \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        userControllerGetUserByUsername(username: string, options: any = {}): FetchArgs {\n            // verify required parameter 'username' is not null or undefined\n            if (username === null || username === undefined) {\n                throw new RequiredError('username','Required parameter username was null or undefined when calling userControllerGetUserByUsername.');\n            }\n            const localVarPath = `/api/user/byUsername/{username}`\n                .replace(`{${\"username\"}}`, encodeURIComponent(String(username)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} ids \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        userControllerGetUsersByIDs(ids: string, options: any = {}): FetchArgs {\n            // verify required parameter 'ids' is not null or undefined\n            if (ids === null || ids === undefined) {\n                throw new RequiredError('ids','Required parameter ids was null or undefined when calling userControllerGetUsersByIDs.');\n            }\n            const localVarPath = `/api/user/byIds`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearer required\n\n            if (ids !== undefined) {\n                localVarQueryParameter['ids'] = ids;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        userControllerRemoveFollowing(id: string, options: any = {}): FetchArgs {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling userControllerRemoveFollowing.');\n            }\n            const localVarPath = `/api/user/removeFollowing/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearer required\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} postID \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        userControllerSavePost(postID: string, options: any = {}): FetchArgs {\n            // verify required parameter 'postID' is not null or undefined\n            if (postID === null || postID === undefined) {\n                throw new RequiredError('postID','Required parameter postID was null or undefined when calling userControllerSavePost.');\n            }\n            const localVarPath = `/api/user/save-post/{postID}`\n                .replace(`{${\"postID\"}}`, encodeURIComponent(String(postID)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearer required\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * UserApi - functional programming interface\n * @export\n */\nexport const UserApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        userControllerAddFollowing(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<boolean> {\n            const localVarFetchArgs = UserApiFetchParamCreator(configuration).userControllerAddFollowing(id, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * For updating user's name, status and tags. To update profile image or banner image, use their upload endpoints instead.\n         * @param {UpdateProfileReqDto} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        userControllerEditProfile(body: UpdateProfileReqDto, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {\n            const localVarFetchArgs = UserApiFetchParamCreator(configuration).userControllerEditProfile(body, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response;\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Retrieve the current logged in user\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        userControllerGetUser(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UserDto> {\n            const localVarFetchArgs = UserApiFetchParamCreator(configuration).userControllerGetUser(options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * \n         * @param {string} username \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        userControllerGetUserByUsername(username: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UserDto> {\n            const localVarFetchArgs = UserApiFetchParamCreator(configuration).userControllerGetUserByUsername(username, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * \n         * @param {string} ids \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        userControllerGetUsersByIDs(ids: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GetUsersSuccessDto> {\n            const localVarFetchArgs = UserApiFetchParamCreator(configuration).userControllerGetUsersByIDs(ids, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * \n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        userControllerRemoveFollowing(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<boolean> {\n            const localVarFetchArgs = UserApiFetchParamCreator(configuration).userControllerRemoveFollowing(id, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * \n         * @param {string} postID \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        userControllerSavePost(postID: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {\n            const localVarFetchArgs = UserApiFetchParamCreator(configuration).userControllerSavePost(postID, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response;\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n    }\n};\n\n/**\n * UserApi - factory interface\n * @export\n */\nexport const UserApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         * \n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        userControllerAddFollowing(id: string, options?: any) {\n            return UserApiFp(configuration).userControllerAddFollowing(id, options)(fetch, basePath);\n        },\n        /**\n         * For updating user's name, status and tags. To update profile image or banner image, use their upload endpoints instead.\n         * @param {UpdateProfileReqDto} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        userControllerEditProfile(body: UpdateProfileReqDto, options?: any) {\n            return UserApiFp(configuration).userControllerEditProfile(body, options)(fetch, basePath);\n        },\n        /**\n         * Retrieve the current logged in user\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        userControllerGetUser(options?: any) {\n            return UserApiFp(configuration).userControllerGetUser(options)(fetch, basePath);\n        },\n        /**\n         * \n         * @param {string} username \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        userControllerGetUserByUsername(username: string, options?: any) {\n            return UserApiFp(configuration).userControllerGetUserByUsername(username, options)(fetch, basePath);\n        },\n        /**\n         * \n         * @param {string} ids \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        userControllerGetUsersByIDs(ids: string, options?: any) {\n            return UserApiFp(configuration).userControllerGetUsersByIDs(ids, options)(fetch, basePath);\n        },\n        /**\n         * \n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        userControllerRemoveFollowing(id: string, options?: any) {\n            return UserApiFp(configuration).userControllerRemoveFollowing(id, options)(fetch, basePath);\n        },\n        /**\n         * \n         * @param {string} postID \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        userControllerSavePost(postID: string, options?: any) {\n            return UserApiFp(configuration).userControllerSavePost(postID, options)(fetch, basePath);\n        },\n    };\n};\n\n/**\n * UserApi - object-oriented interface\n * @export\n * @class UserApi\n * @extends {BaseAPI}\n */\nexport class UserApi extends BaseAPI {\n    /**\n     * \n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserApi\n     */\n    public userControllerAddFollowing(id: string, options?: any) {\n        return UserApiFp(this.configuration).userControllerAddFollowing(id, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * For updating user's name, status and tags. To update profile image or banner image, use their upload endpoints instead.\n     * @param {UpdateProfileReqDto} body \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserApi\n     */\n    public userControllerEditProfile(body: UpdateProfileReqDto, options?: any) {\n        return UserApiFp(this.configuration).userControllerEditProfile(body, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Retrieve the current logged in user\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserApi\n     */\n    public userControllerGetUser(options?: any) {\n        return UserApiFp(this.configuration).userControllerGetUser(options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * \n     * @param {string} username \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserApi\n     */\n    public userControllerGetUserByUsername(username: string, options?: any) {\n        return UserApiFp(this.configuration).userControllerGetUserByUsername(username, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * \n     * @param {string} ids \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserApi\n     */\n    public userControllerGetUsersByIDs(ids: string, options?: any) {\n        return UserApiFp(this.configuration).userControllerGetUsersByIDs(ids, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * \n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserApi\n     */\n    public userControllerRemoveFollowing(id: string, options?: any) {\n        return UserApiFp(this.configuration).userControllerRemoveFollowing(id, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * \n     * @param {string} postID \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserApi\n     */\n    public userControllerSavePost(postID: string, options?: any) {\n        return UserApiFp(this.configuration).userControllerSavePost(postID, options)(this.fetch, this.basePath);\n    }\n\n}\n/**\n * VideoApi - fetch parameter creator\n * @export\n */\nexport const VideoApiFetchParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @param {CreateVideoDto} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        videoControllerCreateVideo(body: CreateVideoDto, options: any = {}): FetchArgs {\n            // verify required parameter 'body' is not null or undefined\n            if (body === null || body === undefined) {\n                throw new RequiredError('body','Required parameter body was null or undefined when calling videoControllerCreateVideo.');\n            }\n            const localVarPath = `/api/video`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearer required\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            const needsSerialization = (<any>\"CreateVideoDto\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || \"\");\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        videoControllerGetAllVideos(options: any = {}): FetchArgs {\n            const localVarPath = `/api/video`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearer required\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * VideoApi - functional programming interface\n * @export\n */\nexport const VideoApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @param {CreateVideoDto} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        videoControllerCreateVideo(body: CreateVideoDto, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<VideoDto> {\n            const localVarFetchArgs = VideoApiFetchParamCreator(configuration).videoControllerCreateVideo(body, options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        videoControllerGetAllVideos(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GetAllVideosDto> {\n            const localVarFetchArgs = VideoApiFetchParamCreator(configuration).videoControllerGetAllVideos(options);\n            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n    }\n};\n\n/**\n * VideoApi - factory interface\n * @export\n */\nexport const VideoApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         * \n         * @param {CreateVideoDto} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        videoControllerCreateVideo(body: CreateVideoDto, options?: any) {\n            return VideoApiFp(configuration).videoControllerCreateVideo(body, options)(fetch, basePath);\n        },\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        videoControllerGetAllVideos(options?: any) {\n            return VideoApiFp(configuration).videoControllerGetAllVideos(options)(fetch, basePath);\n        },\n    };\n};\n\n/**\n * VideoApi - object-oriented interface\n * @export\n * @class VideoApi\n * @extends {BaseAPI}\n */\nexport class VideoApi extends BaseAPI {\n    /**\n     * \n     * @param {CreateVideoDto} body \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof VideoApi\n     */\n    public videoControllerCreateVideo(body: CreateVideoDto, options?: any) {\n        return VideoApiFp(this.configuration).videoControllerCreateVideo(body, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof VideoApi\n     */\n    public videoControllerGetAllVideos(options?: any) {\n        return VideoApiFp(this.configuration).videoControllerGetAllVideos(options)(this.fetch, this.basePath);\n    }\n\n}\n","import {CreatePostBodyDto, PostsApi, UpdatePostBodyDto} from '../api/api';\r\nimport {Post, Tag} from \"../store/types\";\r\nimport {createEntityAdapter, createSlice, createAsyncThunk, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\n/*\r\nexport const submitPost = createdPost => {\r\n    let newPost: CreatePostBodyDto = {\r\n        title: createdPost.title,\r\n        content: createdPost.content,\r\n        tags: createdPost.tags,\r\n        featuredImg: ''\r\n    }\r\n    // console.log(\"POST CREATE SLICE\");\r\n    return dispatch => {\r\n        return fetch(`http://localhost:3001/api/posts`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                newPost,\r\n                // user: {_id: \"5f07dd25be9a5c6510208dce\"} // curUser._id }\r\n            }),\r\n        }).then((response) => {\r\n            return response.json();\r\n        }).then((res) => {\r\n            console.log(res);\r\n        }).catch(e => console.log(e))\r\n    }\r\n}\r\n*/\r\n\r\n/*\r\nexport const updatePost = createdPost => {\r\n    let newPost: CreatePostBodyDto = {\r\n        title: createdPost.title,\r\n        content: createdPost.content,\r\n        tags: createdPost.tags,\r\n        featuredImg: ''\r\n    }\r\n    // const slug = urlSlug(createdPost.title);\r\n    console.log(createdPost.slug);\r\n    return dispatch => {\r\n        return fetch(`http://localhost:3001/api/posts/${createdPost.slug}`, {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                newPost,\r\n                // user: { _id: \"5eeebd4d1333dd0f79ca9be3\" } //curUser._id }\r\n            }),\r\n        }).catch(e => console.log(e))\r\n    }\r\n}\r\n*/\r\n\r\nexport const submitPost = createAsyncThunk(\r\n    'submitPost',\r\n    async (createdPost: CreatePostBodyDto & { author: string }) => {\r\n        // console.log(createdPost.title + \" \" + createdPost.content);\r\n        const createPostSuccessDto = await new PostsApi().postsControllerCreatePost(createdPost);\r\n        const {_id, slug} = createPostSuccessDto;\r\n        const post: Post = {\r\n            featuredImg: createdPost.featuredImg,\r\n            likes: 0,\r\n            tags: createdPost.tags,\r\n            title: createdPost.title,\r\n            views: 0,\r\n            _id: _id,\r\n            slug: slug,\r\n            author: createdPost.author,\r\n            comments: [],\r\n            commentsCount: 0,\r\n            content: createdPost.content,\r\n            createdAt: Date.now().toString()\r\n        }\r\n        return post;\r\n    }\r\n)\r\n\r\nexport const updatePost = createAsyncThunk(\r\n    'updatePost',\r\n    async ({update, slug}: { update: UpdatePostBodyDto, slug: string }) => {\r\n        console.log(update);\r\n        console.log(slug);\r\n        const {_id, slug: newSlug} = await new PostsApi().postsControllerUpdatePostBySlug(update, slug);\r\n        return {update, _id, slug: newSlug, oldSlug: slug};\r\n    }\r\n);\r\n","import {UploadSuccess} from \"../api\";\r\nimport {JwtLocalStorageKey} from \"../constants\";\r\n\r\n// These functions are manually written because the generated version in `frontend/src/api` don't work for file upload\r\n// For example usage, see `frontend/src/pages/group/CreateGroupForm.tsx` around line 100\r\n\r\n/**\r\n * @returns the URL of the file (in a Promise)\r\n *\r\n * @param file The file we get from upload component is an array even for single uploads, but this function\r\n * will take *either* that array *or* the single file. Since the back end only handles 1 file at a time, it will use the\r\n * first file in the array, if it's an array\r\n */\r\nexport function uploadUserProfilePic(file: File | File[]): Promise<string> {\r\n    return uploadHelper(file, \"profile-pic\");\r\n}\r\n\r\n/**\r\n * @returns the URL of the file (in a Promise)\r\n *\r\n * @param file The file we get from upload component is an array even for single uploads, but this function\r\n * will take *either* that array *or* the single file. Since the back end only handles 1 file at a time, it will use the\r\n * first file in the array, if it's an array\r\n */\r\nexport function uploadUserBannerPic(file: File | File[]): Promise<string> {\r\n    return uploadHelper(file, \"profile-banner-pic\");\r\n}\r\n\r\n/**\r\n * The same as uploadPublicAsset.\r\n *\r\n * @returns the URL of the file (in a Promise)\r\n *\r\n * @param file The file we get from upload component is an array even for single uploads, but this function\r\n * will take *either* that array *or* the single file. Since the back end only handles 1 file at a time, it will use the\r\n * first file in the array, if it's an array\r\n */\r\nexport function uploadPublicVideo(file: File | File[]): Promise<string> {\r\n    return uploadPublicAsset(file);\r\n}\r\n\r\n/**\r\n * For uploading anything non-private and not user profile picture or user profile banner.\r\n *\r\n * @returns the URL of the file (in a Promise)\r\n *\r\n * @param file The file we get from upload component is an array even for single uploads, but this function\r\n * will take *either* that array *or* the single file. Since the back end only handles 1 file at a time, it will use the\r\n * first file in the array, if it's an array\r\n */\r\nexport function uploadPublicAsset(file: File | File[]): Promise<string> {\r\n    return uploadHelper(file, \"public/asset\");\r\n}\r\n\r\n\r\nasync function uploadHelper(file: File | File[], endpoint: string): Promise<string> {\r\n    if (Array.isArray(file)) {\r\n        file = file[0];\r\n    }\r\n    const data = new FormData();\r\n    data.append('file', file);\r\n    const result: UploadSuccess = await fetch(`http://localhost:3001/api/upload/${endpoint}`, {\r\n        headers: {\r\n            'Authorization': 'Bearer ' + localStorage.getItem(JwtLocalStorageKey),\r\n        },\r\n        method: 'POST',\r\n        body: data\r\n    }).then(res => res.json());\r\n    return result.url;\r\n}","import React, {useState} from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {User} from \"../../store/types\";\r\nimport {RootState} from \"../../reducers/rootReducer\";\r\nimport {submitPost, updatePost} from \"../../reducers/postsCreationSlice\";\r\nimport {AppDispatch} from \"../../store\";\r\nimport {unwrapResult} from \"@reduxjs/toolkit\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport PurpleButton from \"../common/PurpleButton\";\r\nimport {uploadPublicAsset} from \"../../api-upload\";\r\n\r\nconst useStyles = makeStyles({\r\n    operation: {\r\n        display: \"flex\",\r\n        flexDirection: \"row\",\r\n        flex: 0,\r\n        marginTop: \"20px\",\r\n    }\r\n});\r\n\r\nconst onCancel = (params, dispatch) => {\r\n    const newPost = {\r\n        title: params.title,\r\n        content: params.content,\r\n        tags: params.tags,\r\n        featuredImg: params.img,\r\n    }\r\n    console.log(\"SUBMIT\" + newPost);\r\n}\r\n\r\n\r\nexport default function Submit(params) {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch<AppDispatch>();\r\n    const history = useHistory();\r\n    // const createdPost = useSelector<RootState, PostsCreation>(state => state.postsCreation);\r\n    const curUser = useSelector<RootState, User>(state => state.user);\r\n\r\n    const onSubmit = async (params, author, dispatch, history) => {\r\n        // console.log(newPost);\r\n        let featuredImg: string;\r\n        if (params.img) {\r\n            featuredImg = await uploadPublicAsset(params.img);\r\n        }\r\n\r\n        const newPost = {\r\n            title: params.title,\r\n            content: params.content,\r\n            tags: params.tags,\r\n            featuredImg,\r\n            author: author,\r\n        }\r\n        // Handle update differently\r\n        if (params.isUpdate) {\r\n            dispatch(updatePost({update: newPost, slug: params.isUpdate})).then(unwrapResult).then(\r\n                dto => {\r\n                    history.push(`/post/${dto.slug}`)\r\n                }\r\n            );\r\n        } else {\r\n            // Create new post\r\n            dispatch(submitPost(newPost)).then(unwrapResult).then(\r\n                dto => {\r\n                    console.log(\"CREATEPOST::SUBMIT\");\r\n                    console.log(dto);\r\n                    history.push(`/post/${dto.slug}`)\r\n                }\r\n            );\r\n        }\r\n    }\r\n\r\n\r\n    console.log(\"CREATEPOST::SUBMIT\");\r\n    console.log(params.tags);\r\n\r\n    return (\r\n        <div className={classes.operation}>\r\n            <div onClick={(event) => {\r\n                onCancel(params, dispatch);\r\n            }}>\r\n                <PurpleButton content=\"Cancel\"/>\r\n            </div>\r\n            <div style={{width: \"15px\"}}></div>\r\n            <div onClick={(event) => {\r\n                onSubmit(params, curUser, dispatch, history);\r\n            }}>\r\n                <PurpleButton content=\"Submit\"/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n","import React, {useState} from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport ImgP from \"./ImgPanel\";\r\nimport TextP from \"./TextPanel\";\r\nimport TagP from \"./TagPanel\";\r\nimport Submit from \"./Submit\";\r\nimport AddMultiple from \"../group/AddMuliple\";\r\nimport {RootState} from \"../../reducers/rootReducer\";\r\nimport {Dictionary} from \"@reduxjs/toolkit\";\r\nimport {Tag} from \"../../store/types\";\r\nimport {useSelector} from \"react-redux\";\r\nimport styled from '@emotion/styled';\r\n\r\nconst useStyles = makeStyles({\r\n    createPost: {\r\n        paddingTop: \"7vh\",\r\n        paddingBottom: \"7vh\",\r\n        // paddingTop: \"3em\",\r\n        display: \"flex\",\r\n        flex: 1,\r\n        flexDirection: \"column\",\r\n        height: \"110vh\",\r\n        alignItems: \"center\",\r\n        // overflowY: \"scroll\",\r\n    }\r\n});\r\n\r\nexport const TagsContainer = styled.div`\r\n  background-color: white;\r\n  width: 49em;\r\n  height: 20vh;\r\n  display: flex;\r\n  box-shadow: 3px 3px #F2F2F2;\r\n  border-radius: 5px;\r\n  padding-left: 2em;\r\n  padding-top: 1em;\r\n`;\r\nexport default function CreatePost() {\r\n    const classes = useStyles();\r\n    const [title, setTitle] = useState('');\r\n    const [content, setContent] = useState('');\r\n    const [postTags, setPostTags] = useState([]);\r\n    const [featuredImg, setImg] = useState('');\r\n    const allTags = useSelector<RootState, Dictionary<Tag>>(state => state.tags.entities);\r\n    const allTagsArr = Object.values(allTags);\r\n    // console.log(\"CREATEPOST::INDEX\");\r\n    // console.log(allTags);\r\n    // console.log(allTagsArr);\r\n    // console.log(postTags);\r\n\r\n    return (\r\n        <div className={classes.createPost}>\r\n            <ImgP setImg={setImg}/>\r\n            <TextP setTitle={setTitle} setContent={setContent}/>\r\n            <TagP setPostTags={setPostTags} allTagsArr={allTagsArr}/>\r\n            <Submit title={title} content={content} tags={postTags} img={featuredImg}/>\r\n        </div>\r\n    );\r\n}\r\n","// tslint:disable\n/**\n * Coder Community\n * The Coder Community API description\n *\n * OpenAPI spec version: 0.0.2\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\nexport interface ConfigurationParameters {\n    apiKey?: string | ((name: string) => string);\n    username?: string;\n    password?: string;\n    accessToken?: string | ((name: string, scopes?: string[]) => string);\n    basePath?: string;\n}\n\nexport class Configuration {\n    /**\n     * parameter for apiKey security\n     * @param name security name\n     * @memberof Configuration\n     */\n    apiKey?: string | ((name: string) => string);\n    /**\n     * parameter for basic security\n     * \n     * @type {string}\n     * @memberof Configuration\n     */\n    username?: string;\n    /**\n     * parameter for basic security\n     * \n     * @type {string}\n     * @memberof Configuration\n     */\n    password?: string;\n    /**\n     * parameter for oauth2 security\n     * @param name security name\n     * @param scopes oauth2 scope\n     * @memberof Configuration\n     */\n    accessToken?: string | ((name: string, scopes?: string[]) => string);\n    /**\n     * override base path\n     * \n     * @type {string}\n     * @memberof Configuration\n     */\n    basePath?: string;\n\n    constructor(param: ConfigurationParameters = {}) {\n        this.apiKey = param.apiKey;\n        this.username = param.username;\n        this.password = param.password;\n        this.accessToken = param.accessToken;\n        this.basePath = param.basePath;\n    }\n}\n","import {createEntityAdapter, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport { Comment } from \"../store/types\";\r\nimport {CreateCommentServerToClientDto} from \"../ws-dto/comments/dto/createComment.ws.dto\";\r\nimport {GetCommentsServerToClientDto} from \"../ws-dto/comments/dto/getCommentsByPostID.ws.dto\";\r\n\r\nconst commentsAdapter = createEntityAdapter<Comment>({\r\n  selectId: item => item._id\r\n});\r\n\r\nexport const commentsSlice = createSlice({\r\n  name: \"comments\",\r\n  initialState: commentsAdapter.getInitialState<{isLoading: boolean}>({\r\n    isLoading: false,\r\n  }),//also has ids[] and entities{}\r\n  reducers: {\r\n    getCommentsByPostIDSuccess: (state, action: PayloadAction<GetCommentsServerToClientDto>) => {\r\n      commentsAdapter.upsertMany(state, action.payload.comments);\r\n    },\r\n    createCommentPending: (state) => {state.isLoading = true},\r\n    createCommentSuccess: (state, action: PayloadAction<CreateCommentServerToClientDto>) => {\r\n      state.isLoading = false;\r\n      commentsAdapter.addOne(state, action.payload.comment);\r\n      // if comment is a reply to the comment, then update the parent comment\r\n      const parentComment = action.payload.comment.parentComment;\r\n      if (parentComment) {\r\n        state.entities[parentComment].replies.push(action.payload.comment._id);\r\n      }\r\n    }\r\n  },\r\n  extraReducers: {}\r\n})\r\n\r\nexport default commentsSlice.reducer;\r\nexport const {createCommentPending, createCommentSuccess, getCommentsByPostIDSuccess} = commentsSlice.actions;","import {createAsyncThunk, createEntityAdapter, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\nimport {\n  GetInitialDataDto,\n  GetInitialDataLoggedInDto,\n  GetPostDetailsSuccessDto,\n  GetPostsByTagDto,\n  PostsApi,\n  TrendingApi,\n  UpdatePostBodyDto,\n  UpdatePostSuccessDto\n} from \"../api\";\nimport {RootState} from \"./rootReducer\";\nimport {Post, User} from \"../store/types\";\nimport {createCommentSuccess, getCommentsByPostIDSuccess} from \"./commentsSlice\";\nimport {GetCommentsServerToClientDto} from \"../ws-dto/comments/dto/getCommentsByPostID.ws.dto\";\nimport {CreateCommentServerToClientDto} from \"../ws-dto/comments/dto/createComment.ws.dto\";\nimport {PostIDPayload, toggleLikePost, userSlice} from './userSlice';\nimport {submitPost, updatePost} from \"./postsCreationSlice\";\nimport _ from \"lodash\";\n\n\n\nconst postsAdapter = createEntityAdapter<Post>({\n  selectId: item => item._id\n});\n\n//https://redux-toolkit.js.org/api/createAsyncThunk\nexport const fetchTrendingPosts = createAsyncThunk(\n  'fetchTrendingPosts',\n  async ({fetchCount}: { fetchCount: number }, {getState, rejectWithValue}) => {\n    const api = new TrendingApi();\n    let initialData: GetInitialDataLoggedInDto | GetInitialDataDto;\n    const isLoggedIn = (getState() as RootState).isLoggedIn;\n    console.log(\"fetchTrendingPosts... isLoggedIn:\", isLoggedIn);\n    try {\n      if (isLoggedIn) {\n        initialData = await api.trendingControllerGetTrendingLoggedIn(fetchCount);\n      } else {\n        initialData = await api.trendingControllerGetTrending(fetchCount);\n      }\n    } catch (err) {\n      console.log(\"Got err from fetchTrendingPosts api call\", err);\n      return rejectWithValue(null);\n    }\n\n    return initialData; //{users[], posts[], tags[]}\n  }\n);\n\n// The backend endpoint can also take optional parameters for excluded post IDs and startIdx\nexport const fetchPostsByTag = createAsyncThunk(\n  'fetchPostsByTag',\n  async ({tagID, startIdx}: { tagID: string, startIdx: number }, {rejectWithValue}) => {\n    let payload: GetPostsByTagDto;\n    try {\n      payload = await new PostsApi().tagsControllerGetPostsByTag(tagID, undefined, startIdx);\n    } catch (err) {\n      return rejectWithValue(tagID);\n    }\n\n    return payload;\n  }\n)\n\nexport const fetchPostBySlug = createAsyncThunk(\n  'fetchPostBySlug',\n  ({slug, getAuthor}: { slug: string, getAuthor: boolean }) => new PostsApi().postsControllerGetPostBySlug(slug, getAuthor)\n)\n\nexport const fetchPostByID = createAsyncThunk(\n  'fetchPostByID',\n  ({id, getAuthor}: { id: string, getAuthor: boolean }) => new PostsApi().postsControllerGetPostByID(id, getAuthor)\n)\n\n//https://redux-toolkit.js.org/api/createSlice\nexport const postsSlice = createSlice({\n  name: \"posts\",\n  initialState: postsAdapter.getInitialState<{\n    trendingPosts: string[],\n    trendingPostsSet: Record<string, boolean>,\n    slugToID: Record<string, string>,\n    trendingPostFetchCount: number,\n    fetchedComments: Record<string, boolean>,\n    hasMorePosts: boolean\n  }>({ //extends EntityState\n    trendingPosts: [],\n    trendingPostsSet: {},\n    slugToID: {},\n    trendingPostFetchCount: 0,\n    fetchedComments: {},\n    hasMorePosts: true,//only for trending posts (of all tags)\n  }),//also has ids[] and entities{}\n  reducers: {\n    deletePost: (state, action) => {\n      postsAdapter.removeOne(state, action.payload.postID);\n      delete state.trendingPostsSet[action.payload.postID];\n      _.pull(state.trendingPosts, action.payload.postID);\n    }\n  },\n  extraReducers: {\n    [fetchTrendingPosts.pending.type]: (state, action: PayloadAction<GetInitialDataDto | GetInitialDataLoggedInDto>) => {\n      state.trendingPostFetchCount++;\n    },\n    [fetchTrendingPosts.fulfilled.type]: (state, action: PayloadAction<GetInitialDataDto | GetInitialDataLoggedInDto>) => {\n      action.payload.posts.forEach(post => {\n        state.slugToID[post.slug] = post._id;\n        if (!state.trendingPostsSet[post._id]) {\n          state.trendingPostsSet[post._id] = true;\n          state.trendingPosts.push(post._id);\n        }\n      })\n      postsAdapter.upsertMany(state, action.payload.posts) //add posts to ids and entities\n    },\n    [fetchTrendingPosts.rejected.type]: (state, action) => {\n      state.hasMorePosts = false;\n    },\n    [fetchPostBySlug.fulfilled.type]: (state, action: PayloadAction<GetPostDetailsSuccessDto>) => {\n      const post = action.payload.post;\n      const _id = post._id;\n      state.slugToID[post.slug] = _id;\n      postsAdapter.upsertOne(state, post);\n    },\n    [fetchPostByID.fulfilled.type]: (state, action: PayloadAction<GetPostDetailsSuccessDto>) => {\n      const post = action.payload.post;\n      const _id = post._id;\n      state.slugToID[post.slug] = _id;\n      postsAdapter.upsertOne(state, post);\n    },\n    [fetchPostsByTag.fulfilled.type]: (state, action: PayloadAction<GetPostsByTagDto>) => {\n      postsAdapter.upsertMany(state, action.payload.posts);\n    },\n    'user/toggleLikePost': (state, action: PayloadAction<PostIDPayload & { increment: boolean }>) => {\n      if (action.payload.increment) {\n        state.entities[action.payload.postID].likes++;\n      } else {\n        state.entities[action.payload.postID].likes--;\n      }\n    },\n\n    // Create and update post:\n    [submitPost.fulfilled.type]: (state, action: PayloadAction<Post>) => {\n      const newPost = action.payload;\n      postsAdapter.addOne(state, newPost);\n    },\n    [updatePost.fulfilled.type]: (state, action: PayloadAction<UpdatePostSuccessDto & UpdatePostBodyDto>) => {\n      state.slugToID[action.payload.slug] = state.slugToID[action.payload.oldSlug];\n      console.log(\"POSTSLICE::UPDATEPOST\");\n      console.log(action.payload);\n      // state.slugToID.delete(action.payload.slug);\n      postsAdapter.updateOne(state, {\n            id: action.payload._id,\n            changes: action.payload\n      });\n      console.log(\"** UPDATE DONE **\");\n    },\n    [getCommentsByPostIDSuccess.type]: (state, action: PayloadAction<GetCommentsServerToClientDto>) => {\n      state.fetchedComments[action.payload.postID] = true;\n    },\n    [createCommentSuccess.type]: (state, action: PayloadAction<CreateCommentServerToClientDto>) => {\n      if (action.payload.comment.commentRoot === 'post') {\n        state.entities[action.payload.comment.parentPost].comments.push(action.payload.comment._id);\n      }\n    }\n  }\n})\n\nexport default postsSlice.reducer;\nexport const { deletePost } = postsSlice.actions;","import React from \"react\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\n\r\nexport function Loading() {\r\n  return <CircularProgress />;\r\n}\r\n","import React from 'react';\r\nimport NotFoundSvg from \"../../assets/404.svg\";\r\n\r\nexport function NotFoundError() {\r\n\r\n  return <div style={{display: \"flex\", width: \"100vw\", height: \"100vh\", position: \"absolute\", justifyContent: \"center\"}}>\r\n    <img src={NotFoundSvg} alt=\"Not Found!\"/>\r\n  </div>;\r\n}\r\n","import React from 'react';\r\nimport NotFoundSvg from \"../../assets/404.svg\";\r\n\r\nexport function NoAccessibilityError() {\r\n    return <div style={{display: \"flex\", width: \"100vw\", height: \"100vh\", position: \"absolute\", justifyContent: \"center\"}}>\r\n        <img src={NotFoundSvg} alt=\"No Accessibility!\"/>\r\n    </div>;\r\n}\r\n","import React from \"react\";\r\nimport NotFoundSvg from \"../../assets/404.svg\";\r\n\r\nexport function NotLoggedInError() {\r\n    return <div style={{display: \"flex\", width: \"100vw\", height: \"100vh\", position: \"absolute\", justifyContent: \"center\"}}>\r\n        <img src={NotFoundSvg} alt=\"Please log in first to see this page!\"/>\r\n    </div>\r\n}","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport AddMultiple from \"../group/AddMuliple\";\r\n\r\nconst useStyles = makeStyles({\r\n  cptag: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    height: \"50vh\",\r\n    width: \"40vw\",\r\n    backgroundColor: \"white\",\r\n    boxShadow: \"3px 3px #F2F2F2\",\r\n    marginBottom: \"1em\",\r\n    borderRadius: \"5px\",\r\n    paddingLeft: \"1.5em\",\r\n    paddingRight: \"1.5em\",\r\n  },\r\n  h4: {\r\n    marginBottom: \"0.5em\",\r\n  },\r\n  display: {\r\n    fontWeight: \"bold\",\r\n    marginBottom: \"1em\",\r\n  },\r\n  input: {\r\n    width: \"100%\",\r\n    height: \"2em\",\r\n    border: \"none\",\r\n    outline: \"none\",\r\n    background: \"white\",\r\n    \"&:hover\": {\r\n      backgroundColor: \"#F2F2F2\",\r\n    },\r\n  },\r\n  tags: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    margin: \"0 0\",\r\n    padding: \"0 0\",\r\n  },\r\n});\r\n\r\nexport default function TagPanel(params) {\r\n  const classes = useStyles();\r\n  const alltags = []; // useState<RootState, >()\r\n  // console.log(\"UPDATEPOST::TAGPANEL\");\r\n  // console.log(params.allTagsArr);\r\n  // console.log(params.oldTagsID);\r\n  return (\r\n      <div className={classes.cptag}>\r\n        <form id=\"tagform\">\r\n          <AddMultiple label=\"Add Tags\" options={params.allTagsArr} defaultValID={params.oldTagsID} setItems={params.setPostTags} panelWidth={\"40vw\"} />\r\n        </form>\r\n      </div>\r\n  );\r\n}\r\n","import React, {useState} from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {User} from \"../../store/types\";\r\nimport {RootState} from \"../../reducers/rootReducer\";\r\nimport {submitPost, updatePost} from \"../../reducers/postsCreationSlice\";\r\nimport {AppDispatch} from \"../../store\";\r\nimport {unwrapResult} from \"@reduxjs/toolkit\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport PurpleButton from \"../common/PurpleButton\";\r\nimport {uploadPublicAsset} from \"../../api-upload\";\r\n\r\nconst useStyles = makeStyles({\r\n  operation: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    flex: 0,\r\n    marginTop: \"20px\",\r\n  }\r\n});\r\n\r\nconst onCancel = (params, dispatch) => {\r\n  const newPost = {\r\n    title: params.title,\r\n    content: params.content,\r\n    tags: params.tags,\r\n    featuredImg: params.img,\r\n  }\r\n  // console.log(\"SUBMIT\" + newPost);\r\n}\r\n\r\n\r\nexport default function Submit(params) {\r\n  // console.log(\"UPDATEPOST::SUBMIT\");\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch<AppDispatch>();\r\n  const history = useHistory();\r\n  // const createdPost = useSelector<RootState, PostsCreation>(state => state.postsCreation);\r\n  const curUser = useSelector<RootState, User>(state => state.user);\r\n\r\n  // const onSubmit = async (params, author, dispatch, history) => {\r\n  const onSubmit = async () => {\r\n    console.log(\"UPDATEPOST::INDEX::ONSUBMIT\");\r\n    let featuredImg: string;\r\n    if (params.img) {\r\n      featuredImg = await uploadPublicAsset(params.img);\r\n    }\r\n\r\n    console.log(params.tags);\r\n    const newPost = {\r\n      title: params.title,\r\n      content: params.content,\r\n      tags: params.tags,\r\n      featuredImg,\r\n      author: curUser._id,\r\n    }\r\n    // Handle update differently\r\n    if (params.isUpdate) {\r\n      dispatch(updatePost({update: newPost, slug: params.isUpdate})).then(unwrapResult).then(\r\n        dto => {\r\n          // console.log(\"UPDATEPOST::SUBMIT::onsubmit\");\r\n          // console.log(dto.slug);\r\n          // console.log(dto);\r\n          // console.log(params.tags);\r\n          history.push(`/post/${dto.slug}`)\r\n        }\r\n      );\r\n    } else {\r\n      // Create new post\r\n      dispatch(submitPost(newPost))\r\n        .then(unwrapResult)\r\n        .then(dto => {\r\n          // console.log(\"UPDATEPOST::SUBMIT::onSubmit\");\r\n          // console.log(dto.slug);\r\n          history.push(`/post/${dto.slug}`)\r\n        });\r\n    }\r\n\r\n  }\r\n\r\n  return (\r\n    <div className={classes.operation}>\r\n      <div onClick={(event) => {\r\n        onCancel(params, dispatch);\r\n      }}>\r\n        <PurpleButton content=\"Cancel\"/>\r\n      </div>\r\n      <div style={{width: \"15px\"}}></div>\r\n      {/*<button onClick={(event) => {\r\n        onSubmit(params, curUser, dispatch, history);\r\n      }}>*/}\r\n      <PurpleButton content=\"Submit\" handleClick={onSubmit} />\r\n    </div>\r\n  );\r\n}\r\n","import React, {useEffect, useState} from \"react\";\r\nimport {Redirect, useParams} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppDispatch} from \"../../store\";\r\nimport {RootState} from \"../../reducers/rootReducer\";\r\nimport {Post, Tag, User} from \"../../store/types\";\r\nimport defaultPostFeaturedImage from \"../../assets/defaultPostFeaturedImage.jpg\";\r\nimport {fetchPostBySlug} from \"../../reducers/postsSlice\";\r\nimport {Loading} from \"../common/Loading\";\r\nimport {NotFoundError} from \"../common/NotFoundError\";\r\nimport {NoAccessibilityError} from \"../common/NoAccessibilityError\";\r\nimport {NotLoggedInError} from \"../common/NotLoggedInError\";\r\nimport ImgP from \"../create_post/ImgPanel\";\r\nimport TextP from \"../create_post/TextPanel\";\r\nimport TagP from \"./TagPanel\";\r\nimport Submit from \"./Submit\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Dictionary, unwrapResult} from \"@reduxjs/toolkit\";\r\n\r\nconst useStyles = makeStyles({\r\n  createPost: {\r\n    paddingTop: \"7vh\",\r\n    paddingBottom: \"7vh\",\r\n    // paddingTop: \"3em\",\r\n    display: \"flex\",\r\n    flex: 1,\r\n    flexDirection: \"column\",\r\n    height: \"110vh\",\r\n    alignItems: \"center\",\r\n    // overflowY: \"scroll\",\r\n  }\r\n});\r\n\r\nexport default function UpdatePost() {\r\n  // console.log(\"UPDATEPOST::INDEX\");\r\n  const {slug} = useParams<{ slug: string }>();\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch<AppDispatch>();\r\n\r\n  const allTags = useSelector<RootState, Dictionary<Tag>>(state => state.tags.entities);\r\n  const allTagsArr = Object.values(allTags);\r\n\r\n  const {post} = useSelector<RootState, { post: Post }>(state => {\r\n    const postID = state.posts.slugToID[slug];\r\n    if (!postID) {\r\n      return {post: null};\r\n    }\r\n    const post = state.posts.entities[postID];\r\n    return {post};\r\n  })\r\n\r\n  // fetch tags\r\n  const tags = useSelector<RootState, Dictionary<Tag>>(state => state.tags.entities);\r\n  const tagsArray = Object.values(tags);\r\n  let oldTagsIDArr = []\r\n  const oldTagsSet = new Set(post.tags);\r\n  for (let i = 0; i < tagsArray.length; i++) {\r\n    if (oldTagsSet.has(tagsArray[i]._id))\r\n      oldTagsIDArr.push(i);\r\n  }\r\n\r\n  const user = useSelector<RootState, User>(state => state.user);\r\n  const [title, setTitle] = useState(post?.title);\r\n  const [content, setContent] = useState(post?.content);\r\n  const [postTags, setPostTags] = useState(post?.tags);\r\n  const [featuredImg, setImg] = useState(post?.featuredImg);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    if (slug == null || slug === \"\") {\r\n      return;\r\n    }\r\n    if (!post?.content) {\r\n      dispatch(fetchPostBySlug({slug, getAuthor: false}))\r\n        .then(unwrapResult)\r\n        .then(dto => {\r\n          setTitle(dto.post.title);\r\n          setContent(dto.post.content);\r\n          setPostTags(dto.post.tags);\r\n        })\r\n        .catch(setError);\r\n    }\r\n  }, []);\r\n\r\n  if (slug == null || slug === \"\") {\r\n    return <Redirect to=\"/\"/>\r\n  }\r\n\r\n  if (!post?.content) {\r\n    return <Loading/>\r\n  }\r\n\r\n  if (error) {\r\n    return <NotFoundError/>\r\n  }\r\n\r\n  // console.log(\"UPDATEPOST::INDEX\");\r\n  if (!user) {\r\n    return <NotLoggedInError/>\r\n  }\r\n  if (user._id !== post.author) {\r\n    return <NoAccessibilityError/>\r\n  }\r\n\r\n  return (\r\n    <div className={classes.createPost}>\r\n      <ImgP setImg={setImg}/>\r\n      <TextP setTitle={setTitle} setContent={setContent} title={post?.title} content={post?.content}/>\r\n      <TagP setPostTags={setPostTags} allTagsArr={allTagsArr} oldTagsID={oldTagsIDArr}/>\r\n      <Submit title={title} content={content} tags={postTags} img={featuredImg} isUpdate={post?.slug}/>\r\n    </div>\r\n  );\r\n}","import { makeStyles } from '@material-ui/core/styles';\r\nimport React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport { RootState } from '../../reducers/rootReducer';\r\nimport { CurrentLoggedInUser, User } from '../../store/types';\r\nimport { Loading } from '../common/Loading';\r\nimport \"../../App.css\";\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    width: \"14vw\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    height: \"93vh\",\r\n    cursor: \"pointer\",\r\n    paddingLeft: \"7em\",\r\n    position: \"fixed\",\r\n    marginLeft: \"8vw\",\r\n    marginTop: \"4vh\",\r\n  },\r\n  diplayAccount: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n  },\r\n  displayImg: {\r\n    width: \"5em\",\r\n    height: \"5em\",\r\n    borderRadius: \"50%\",\r\n    marginTop: \"2em\",\r\n    marginRight: \"1em\",\r\n  },\r\n  displayName: {\r\n    marginTop: \"4em\",\r\n    color: \"#5DCBAF\",\r\n  },\r\n  groupLinks: {\r\n    marginTop: \"2em\",\r\n  },\r\n  showPostsText: {\r\n    marginTop: \"1em\",\r\n    borderBottom: \"solid 1px lightgray\",\r\n    fontSize: \"large\",\r\n    fontFamily: \"Passion One, cursive\",\r\n    color: \"#707070\",\r\n  },\r\n  link: {\r\n    textDecoration: \"none\",\r\n  },\r\n});\r\n\r\nconst LeftSideBar = () => {\r\n  const classes = useStyles();\r\n  const user = useSelector<RootState, CurrentLoggedInUser>(state => state.user);\r\n  const isLoggedIn = useSelector<RootState, boolean>(state => state.isLoggedIn);\r\n\r\n  const history = useHistory(); //to redirect to different route (from current route)\r\n\r\n  if (!user) {\r\n    return <Loading />\r\n  }\r\n\r\n  return (\r\n      <div className={classes.root}>\r\n        {isLoggedIn &&\r\n        <div className={classes.diplayAccount}>\r\n          <img className={classes.displayImg} src={user.profilePic} alt=\"\" />\r\n          <Link to={`/user/${user.userID}`} className={classes.link}>\r\n            <h3 className={classes.displayName}>{user.name}</h3>\r\n          </Link>\r\n        </div>\r\n        }\r\n        <div className={classes.groupLinks}>\r\n          <h3>Daily Challenge</h3>\r\n          {isLoggedIn &&\r\n          <Link to={`/messages`} className={classes.link}>\r\n            <h3>Messages</h3>\r\n          </Link>\r\n          }\r\n          <h3>Hacker News</h3>\r\n          <h3>Posts</h3>\r\n          <h3>Videos</h3>\r\n\r\n          <h3 onClick={() => {\r\n            history.push(\"/home/groups\");\r\n          }}>Groups</h3>\r\n\r\n          {/* <FilterPost /> */}\r\n        </div>\r\n      </div>\r\n  );\r\n};\r\n\r\nexport default LeftSideBar;\r\n","import { Dictionary } from \"@reduxjs/toolkit\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { GetInitialDataDto, GetInitialDataLoggedInDto } from \"../api\";\r\nimport { RootState } from \"../reducers/rootReducer\";\r\nimport { User } from \"../store/types\";\r\n\r\nexport const randomImage = () => {\r\n  // get a random number from 200-350\r\n  const randomNumber = Math.floor(Math.random() * 150 + 200);\r\n  return `https://picsum.photos/${randomNumber}`;\r\n};\r\n\r\nexport const randomBackgroundImage = () => {\r\n  // get a random number from 1000-1400\r\n  const randomNumber = Math.floor(Math.random() * 400 + 1000);\r\n  return `https://picsum.photos/${randomNumber}`;\r\n};\r\n\r\nexport const howLongAgo = (unixTime) => {\r\n  const diff = Date.now() - unixTime;\r\n  if (diff < 60 * 1000) {\r\n    return \"Just now\";\r\n  }\r\n\r\n  const minutes = Math.round(diff / 60000);\r\n\r\n  if (minutes === 1) {\r\n    return \"1 minute ago\";\r\n  }\r\n  if (minutes < 60) {\r\n    return `${minutes} minutes ago`;\r\n  }\r\n\r\n  const hours = Math.round(minutes / 60);\r\n  if (hours === 1) {\r\n    return \"1 hour ago\";\r\n  }\r\n  if (hours < 24) {\r\n    return `${hours} hours ago`;\r\n  }\r\n\r\n  const days = Math.round(hours / 24);\r\n  if (days === 1) {\r\n    return \"1 day ago\";\r\n  }\r\n  if (days < 7) {\r\n    return `${days} days ago`;\r\n  }\r\n\r\n  const weeks = Math.round(days / 7);\r\n  if (weeks === 1) {\r\n    return \"1 week ago\";\r\n  }\r\n  if (weeks < 4) {\r\n    return `${weeks} weeks ago`;\r\n  }\r\n\r\n  const months = Math.round(weeks / 4);\r\n  if (months === 1) {\r\n    return \"1 month ago\";\r\n  }\r\n  if (months < 12) {\r\n    return `${months} months ago`;\r\n  }\r\n\r\n  const years = Math.round(months / 12);\r\n  if (years === 1) {\r\n    return \"1 year ago\";\r\n  }\r\n  return `${years} years ago`;\r\n};\r\n\r\n/**\r\n *\r\n * @param arr backend response eg: posts[], users[]\r\n * convert to maps from _id to Post, User etc.\r\n */\r\nexport const convertArrToMap = (arr): Record<string, any> => {\r\n  return arr.reduce((map, obj) => {\r\n    map[obj._id] = obj;\r\n    return map;\r\n  }, {});\r\n}\r\n\r\n// Type check\r\nexport const isGetInitialDataLoggedInDto\r\n  = (dto: GetInitialDataDto | GetInitialDataLoggedInDto): dto is GetInitialDataLoggedInDto => !!(dto as any).user\r\n\r\n\r\nexport const getFollowingFollowersOfUser = (users: Dictionary<User>, user: User): User[] => {\r\n  let followingFollowers: User[] = [];\r\n  user.followers.concat(user.following).forEach((_id) => {\r\n    if (users[_id]) {\r\n      followingFollowers.push(users[_id])\r\n    }\r\n  });\r\n  return Object.values(convertArrToMap(followingFollowers));\r\n}","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { JwtLocalStorageKey } from \"../constants\";\r\n\r\n//https://redux-toolkit.js.org/api/createSlice\r\nexport const isLoggedInSlice = createSlice({\r\n  name: \"isLoggedIn\",\r\n  initialState: !!localStorage.getItem(JwtLocalStorageKey),//also has ids[] and entities{}\r\n  reducers: {\r\n    loginSuccess: {\r\n      reducer: (user, action: PayloadAction<null>) => {\r\n        return true;\r\n      },\r\n      prepare: ({jwt}: {jwt: string}) => {\r\n        localStorage.setItem(JwtLocalStorageKey, jwt);\r\n        return {payload: null};\r\n      },\r\n    },\r\n    logOut: {\r\n      reducer: (user, action: PayloadAction<null>) => {\r\n        return false;\r\n      },\r\n      prepare: () => {\r\n        localStorage.removeItem(JwtLocalStorageKey);\r\n        return { payload: null };\r\n      }\r\n    },\r\n  }\r\n})\r\n\r\nexport default isLoggedInSlice.reducer;\r\n\r\nexport const {\r\n  loginSuccess, logOut\r\n} = isLoggedInSlice.actions;","import { createEntityAdapter, createSlice, createAsyncThunk, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Group, CurrentLoggedInUser } from \"../store/types\";\nimport { GroupsApi, GetGroupsSuccessDto, CreateGroupDto, CreateGroupSuccessDto, GroupDto } from \"../api\";\nimport { RootState } from \"./rootReducer\";\nimport _ from \"lodash\";\n\nconst groupsAdapter = createEntityAdapter<Group>({\n  selectId: item => item._id\n})\n\nconst api = new GroupsApi();\n//https://redux-toolkit.js.org/api/createAsyncThunk\nexport const fetchGroups = createAsyncThunk(\n  'fetchGroups',\n  async (_, { getState }) => {\n    const groups: GetGroupsSuccessDto = await api.groupsControllerGetGroups();\n    // console.log(groups);\n    return groups;\n  }\n)\n\nexport const fetchGroupById = createAsyncThunk(\n  'fetchGroupById',\n  async (groupID: string) => {\n    const foundGroup: GroupDto = await api.groupsControllerGetPrivateGroup(groupID);\n    return foundGroup;\n  }\n)\nexport const createGroup = createAsyncThunk(\n  'createGroup',\n  async (newGroup: CreateGroupDto, { getState }) => {\n    const user = (getState() as RootState).user as CurrentLoggedInUser;\n    const successDto = await api.groupsControllerCreateGroup(newGroup);\n    return { ...newGroup, _id: successDto._id, admins: [user._id] };\n  }\n)\n\nexport const leaveGroup = createAsyncThunk(\n  'leaveGroup',\n  async (groupID: string, { getState }) => {\n    const user = (getState() as RootState).user as CurrentLoggedInUser;\n    await api.groupsControllerLeaveGroup(groupID, user._id);\n    return { groupID: groupID, userID: user._id }\n  }\n)\n\nexport const joinGroup = createAsyncThunk(\n  'joinGroup',\n  async (groupID: string, { getState }) => {\n    const user = (getState() as RootState).user as CurrentLoggedInUser;\n    await api.groupsControllerJoinGroup(groupID, user._id);\n    return { groupID: groupID, userID: user._id }\n  }\n)\n\n//https://redux-toolkit.js.org/api/createSlice\nexport const groupsSlice = createSlice({\n  name: \"groups\",\n  initialState: groupsAdapter.getInitialState<{ currentGroupID: string }>({\n    currentGroupID: '',\n  }),\n  reducers: {\n    selectGroup: (state, action: PayloadAction<{ groupID: string }>) => {\n      state.currentGroupID = action.payload.groupID;\n    },\n  },\n  extraReducers: {\n    [fetchGroups.fulfilled.type]: (state, action: PayloadAction<GetGroupsSuccessDto>) => {\n      groupsAdapter.addMany(state, action.payload.groups) //add posts to ids and entities\n    },\n    [fetchGroupById.fulfilled.type]: (state, action: PayloadAction<GroupDto>) => {\n      groupsAdapter.upsertOne(state, action.payload) //add posts to ids and entities\n    },\n    [createGroup.fulfilled.type]: (state, action: PayloadAction<CreateGroupSuccessDto & CreateGroupDto & { admins: string[] }>) => {\n      const { _id, name, private: _private, description, profileBanner, profilePic, admins, users } = action.payload;\n      groupsAdapter.addOne(state, {\n        _id, name, private: _private, description, profileBanner, profilePic,\n        admins,\n        users: [admins[0], ...users],\n        createdAt: Date.now().toLocaleString(),\n        posts: [],\n        updatedAt: Date.now().toLocaleString(),\n        videos: []\n      });\n    },\n    [leaveGroup.fulfilled.type]: (state, action: PayloadAction<{ groupID: string, userID: string }>) => {\n      _.pull(state.entities[action.payload.groupID].users, action.payload.userID); //lodash mutates the state\n    },\n    [joinGroup.fulfilled.type]: (state, action: PayloadAction<{ groupID: string, userID: string }>) => {\n      state.entities[action.payload.groupID].users.push(action.payload.userID)\n    }\n  }\n})\n\nexport default groupsSlice.reducer;\nexport const { selectGroup } = groupsSlice.actions;","import { createSlice, createAsyncThunk, PayloadAction } from \"@reduxjs/toolkit\";\nimport { UserApi, GetInitialDataDto, GetInitialDataLoggedInDto, PostsApi, AuthApi, UpdateProfileReqDto, CreateGroupSuccessDto } from \"../api\";\nimport { fetchTrendingPosts, deletePost } from \"./postsSlice\";\nimport { CurrentLoggedInUser } from \"../store/types\";\nimport _ from \"lodash\";\nimport { isGetInitialDataLoggedInDto } from \"../util/helperFunctions\";\nimport { JwtLocalStorageKey } from \"../constants\";\nimport { isLoggedInSlice } from \"./isLoggedInSlice\";\nimport { createGroup, leaveGroup, joinGroup } from \"./groupsSlice\";\nimport {GetCommentsServerToClientDto} from \"../ws-dto/comments/dto/getCommentsByPostID.ws.dto\";\nimport { getCommentsByPostIDSuccess } from \"./commentsSlice\";\n\nconst api = new UserApi();\nexport const getLoggedInUser = createAsyncThunk(\n  'getLoggedInUser',\n  async () => {\n    return await api.userControllerGetUser();\n  }\n)\n\nexport const login = createAsyncThunk(\n  'loginStatus',\n  async ({ code, state }: { code: string, state: string }) => {\n    await new AuthApi().authControllerLoginGitHub({ code, state })\n  }\n);\n\nexport const updateProfile = createAsyncThunk(\n  'updateProfile',\n  async (update: UpdateProfileReqDto) => {\n    await api.userControllerEditProfile(update);\n    return { update };\n  }\n)\n\n/**\n * @deprecated\n * (Not implemented.) Use fetchUserByUsername from usersSlice instead.\n */\nexport const getUserForViewProfile = (userName) => createAsyncThunk(\n  'getUserForViewProfile',\n  async () => {\n    // Use fetchUserByUsername from usersSlice instead.\n  }\n)\n\nexport type PostIDPayload = { postID: string };\nexport type UserIDPayload = { userID: string };\nexport type LikePostPayload = { postID: string, increment: boolean };\n\n//https://redux-toolkit.js.org/api/createSlice\n// The state is just User, and initialized to null\nconst initialState: CurrentLoggedInUser = null;\n\nexport const userSlice = createSlice({\n  name: \"user\",\n  initialState,\n  reducers: {\n    loginSuccess: {\n      reducer: (user, action: PayloadAction<null>) => {\n        return null;\n      },\n      prepare: ({ jwt }: { jwt: string }) => {\n        localStorage.setItem(JwtLocalStorageKey, jwt);\n        return { payload: null };\n      },\n    },\n    logOut: {\n      reducer: (user, action: PayloadAction<null>) => {\n        return null;\n      },\n      prepare: () => {\n        localStorage.removeItem(JwtLocalStorageKey);\n        return { payload: null };\n      }\n    },\n    savePost: {\n      reducer: (user, action: PayloadAction<PostIDPayload>) => {\n        // optimistic update\n        if (user) {\n          user.savedPosts.push(action.payload.postID);\n          user.savedPostsSet[action.payload.postID] = true;\n        }\n\n        return user;\n      },\n      // to perform side effect. Does not affect payload\n      prepare: (payload: PostIDPayload) => {\n        // Send request to back end silently\n        new UserApi().userControllerSavePost(payload.postID)\n          .then(_ => console.log(\"Optimistic update (SAVE POST) finished in back end\"))\n          .catch(err => console.log(\"Optimistic update (SAVE POST) rejected! \", err));\n        return { payload };\n      },\n    },\n    toggleLikePost: {\n      reducer: (user, action: PayloadAction<PostIDPayload & { increment: boolean }>) => {\n        if (user) {\n          // optimistic update\n          const { postID } = action.payload;\n          // User didn't previously like the post\n          if (!user.likedPostsSet[postID]) {\n            user.likedPostsSet[postID] = true;\n            user.likedPosts.push(action.payload.postID);\n          } else {\n            // User previously liked the post, now un-likes it\n            user.likedPostsSet[postID] = false;\n            _.pull(user.likedPosts, action.payload.postID);\n          }\n        }\n        return user;\n      },\n      prepare: ({ postID, increment }: LikePostPayload) => {\n        // Send request to back end silently\n        if (increment) {\n          new PostsApi().postsControllerLikePost(postID)\n            .then(_ => console.log(\"Optimistic update (LIKE POST) finished in back end for Post ID\"))\n            .catch(err => console.log(\"Optimistic update (LIKE POST) rejected! \", err));\n        } else {\n          new PostsApi().postsControllerUnlikePost(postID)\n            .then(_ => console.log(\"Optimistic update (UNLIKE POST) finished in back end for Post ID\"))\n            .catch(err => console.log(\"Optimistic update (UNLIKE POST) rejected! \", err));\n        }\n        return { payload: { postID, increment } };\n      }\n    },\n    follow: {\n      reducer: (state, action: PayloadAction<UserIDPayload>) => {\n        // Optimistic update\n        const other = action.payload.userID;\n        if (!state.followingSet[other]) {\n          state.followingSet[other] = true;\n          state.following.push(other);\n        }\n      },\n      prepare: (payload: UserIDPayload ) => {\n        api.userControllerAddFollowing(payload.userID)\n            .then(_ => console.log(\"Optimistic update (FOLLOW) finished in back end\"))\n            .catch(err => console.log(\"Optimistic update (FOLLOW) rejected! \", err));\n        return { payload };\n      }\n    },\n    unfollow: {\n      reducer: (state, action: PayloadAction<UserIDPayload>) => {\n        // Optimistic update\n        const other = action.payload.userID;\n        if (state.followingSet[other]) {\n          state.followingSet[other] = false;\n          _.pull(state.following, other);\n        }\n      },\n      prepare: (payload: UserIDPayload ) => {\n        api.userControllerRemoveFollowing(payload.userID)\n            .then(_ => console.log(\"Optimistic update (UNFOLLOW) finished in back end\"))\n            .catch(err => console.log(\"Optimistic update (UNFOLLOW) rejected! \", err));\n        return { payload };\n      }\n    },\n\n\n  },\n  extraReducers: {\n    // fetchTrendingPosts will give the current logged in user as well\n    [fetchTrendingPosts.fulfilled.type]: (state, action: PayloadAction<GetInitialDataDto | GetInitialDataLoggedInDto>) => {\n      if (isGetInitialDataLoggedInDto(action.payload)) {\n        const userDto = action.payload.user;\n\n        // If the user already exists, merge the dto with the state (currentUser)\n        if (state) {\n          // Update likedPostsSet and savedPostsSet\n          userDto.likedPosts?.forEach(postID => state.likedPostsSet[postID] = true);\n          userDto.savedPosts?.forEach(postID => state.savedPostsSet[postID] = true);\n          userDto.followers?.forEach(userID => state.followersSet[userID] = true);\n          userDto.following?.forEach(userID => state.followingSet[userID] = true);\n          return { ...state, ...userDto };\n        }\n\n        if (userDto) {\n          const freshlyLoggedInUser = { ...userDto, likedPostsSet: {}, savedPostsSet: {}, followersSet: {}, followingSet: {} } as CurrentLoggedInUser;\n          userDto.likedPosts?.forEach(postID => freshlyLoggedInUser.likedPostsSet[postID] = true);\n          userDto.savedPosts?.forEach(postID => freshlyLoggedInUser.savedPostsSet[postID] = true);\n          userDto.followers?.forEach(userID => freshlyLoggedInUser.followersSet[userID] = true);\n          userDto.following?.forEach(userID => freshlyLoggedInUser.followingSet[userID] = true);\n          return freshlyLoggedInUser;\n        }\n      }\n\n      // state may be null, so must explicitly return it\n      return state;\n    },\n    //add group to user's list of groups\n    [createGroup.fulfilled.type]: (state, action: PayloadAction<CreateGroupSuccessDto>) => {\n      state.groups.push(action.payload._id);\n    },\n\n    [leaveGroup.fulfilled.type]: (state, action: PayloadAction<{ groupID: string, userID: string }>) => {\n      _.pull(state.groups, action.payload.groupID);\n    },\n    [joinGroup.fulfilled.type]: (state, action: PayloadAction<{ groupID: string, userID: string }>) => {\n      state.groups.push(action.payload.groupID);\n    },\n\n    // Logging out should clear the state\n    [isLoggedInSlice.actions.logOut.type]: () => {\n      return null;\n    },\n\n    [updateProfile.fulfilled.type]: (state, action: PayloadAction<UpdateProfileReqDto>) => {\n      if (!state) {\n        return null;\n      }\n      if (action.payload.name) {\n        state.name = action.payload.name;\n      }\n      if (action.payload.status) {\n        state.status = action.payload.status;\n      }\n      if (Array.isArray(action.payload.tags)) {\n        state.tags = action.payload.tags;\n      }\n    },\n\n    [deletePost.type]: (state, action) => {\n      _.pull(state.posts, action.payload.postID);\n    },\n\n  }\n})\n\nexport default userSlice.reducer;\n\nexport const { savePost, toggleLikePost, follow, unfollow, loginSuccess, logOut } = userSlice.actions;","import { initializeGitHubOAuth } from \"../pages/login/login\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { RootState } from \"../reducers/rootReducer\";\r\nimport { CurrentLoggedInUser } from \"../store/types\";\r\nimport { toggleLikePost } from \"../reducers/userSlice\";\r\n\r\ntype HandleToggleLike = () => void;\r\n\r\n/**\r\n * returns whether the user likes the post, and a callback function that sends anonymous user to login\r\n * \r\n * @param postID The ID of the post\r\n */\r\nexport function useLikePost(postID: string): { postIsLikedByUser: boolean, handleToggleLike: HandleToggleLike} {\r\n\r\n\r\n  const user = useSelector<RootState, CurrentLoggedInUser>(state => state.user);\r\n  const dispatch = useDispatch();\r\n\r\n  if (!postID) {\r\n    return {\r\n      postIsLikedByUser: null,\r\n      handleToggleLike: () => {}\r\n    }\r\n  }\r\n\r\n  if (!user) {\r\n    return {\r\n      postIsLikedByUser: false,\r\n      handleToggleLike: initializeGitHubOAuth,\r\n    }\r\n  } else {\r\n    const postIsLikedByUser = !!user.likedPostsSet[postID];\r\n    return {\r\n      postIsLikedByUser,\r\n      handleToggleLike: () => dispatch(toggleLikePost({postID, increment: !postIsLikedByUser})),\r\n    }\r\n  }\r\n}","import { makeStyles } from \"@material-ui/core/styles\";\r\nimport React, {useEffect} from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n// import { likePost, savePost, viewPost } from '../../actions/home.ts';\r\nimport DefaultPic from \"../../assets/user.svg\";\r\nimport CommentIcon from \"../../icons/commentIcon.svg\";\r\nimport HeartIcon from \"../../icons/heartIcon.svg\";\r\nimport HeartIconRed from \"../../icons/heartIconRed.svg\";\r\nimport { RootState } from \"../../reducers/rootReducer\";\r\nimport { Post } from \"../../store/types\";\r\nimport { User } from \"../../store/types\";\r\nimport { Tag } from \"../../store/types\";\r\nimport { Dictionary } from \"@reduxjs/toolkit\";\r\nimport { savePost } from \"../../reducers/userSlice\";\r\nimport { useLikePost } from \"../../hooks/useLikePost\";\r\nimport { Loading } from \"../common/Loading\";\r\nimport {fetchPostByID} from \"../../reducers/postsSlice\";\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    minHeight: \"fit-content\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    width: \"40vw\",\r\n    backgroundColor: \"white\",\r\n    boxShadow: \"3px 3px #F2F2F2\",\r\n    marginBottom: \"1em\",\r\n    borderRadius: \"5px\",\r\n    paddingLeft: \"1.5em\",\r\n    paddingRight: \"1.5em\",\r\n  },\r\n  account: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    paddingTop: \"1em\",\r\n  },\r\n  accountImg: {\r\n    width: \"3em\",\r\n    height: \"3em\",\r\n    borderRadius: \"50%\",\r\n    marginTop: \"0.5em\",\r\n  },\r\n  imgTitle: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n  },\r\n  nameTime: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    marginLeft: \"0.5em\",\r\n  },\r\n  interactions: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n  },\r\n  commentIcon: {\r\n    marginLeft: \"2em\",\r\n    width: \"2em\",\r\n    marginBottom: \"-1.5em\",\r\n  },\r\n  heartIcon: {\r\n    width: \"2em\",\r\n  },\r\n  interactionsIcons: {\r\n    display: \"flex\",\r\n    justifyContent: \"flex-end\",\r\n    flexDirection: \"row\",\r\n  },\r\n  readSave: {\r\n    marginLeft: \"2em\",\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n  },\r\n  link: {\r\n    textDecoration: \"none\",\r\n  },\r\n  tagText: {\r\n    fontFamily: \"Overpass Mono, monospace\",\r\n  },\r\n});\r\n\r\nexport const handleViewPost = (post, dispatch) => {\r\n  // use history.push instead -John\r\n  // dispatch(viewPost(post));\r\n};\r\n\r\ntype Props = {\r\n  postID: string;\r\n};\r\n\r\n//parent: Main\r\nconst Card = ({ postID }: Props) => {\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch();\r\n\r\n  const post = useSelector<RootState, Post>(\r\n    (state) => state.posts.entities[postID]\r\n  );\r\n\r\n  const { postIsLikedByUser, handleToggleLike } = useLikePost(post?._id);\r\n\r\n  const authorID = post?.author;\r\n  const author = useSelector<RootState, User>(\r\n    (state) => state.users.entities[authorID]\r\n  );\r\n  const tags = useSelector<RootState, Dictionary<Tag>>(\r\n    (state) => state.tags.entities\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (!post) {\r\n      dispatch(fetchPostByID({id: postID, getAuthor: !author}));\r\n    }\r\n  }, [])\r\n\r\n  if (!post) {\r\n    return <Loading />\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <div className={classes.account}>\r\n        <img\r\n          className={classes.accountImg}\r\n          src={author.profilePic || DefaultPic}\r\n          alt=\"\"\r\n        />\r\n        <div className={classes.nameTime}>\r\n          <p>\r\n            <Link to={`/user/${author.userID}`} className={classes.link}>\r\n              <span\r\n                style={{\r\n                  fontWeight: \"bold\",\r\n                  color: \"#5DCBAF\",\r\n                }}\r\n              >\r\n                {author.name}&nbsp;\r\n              </span>\r\n            </Link>\r\n            posted&nbsp;\r\n            <span style={{ fontWeight: \"bolder\" }}>\r\n              <Link\r\n                to={`/post/${post.slug}`}\r\n                className={classes.link}\r\n                onClick={() => {\r\n                  handleViewPost(post, dispatch);\r\n                }}\r\n              >\r\n                {post.title}\r\n              </Link>\r\n            </span>\r\n          </p>\r\n          <p style={{ marginTop: \"-0.8em\" }}>{post.createdAt}</p>\r\n        </div>\r\n      </div>\r\n\r\n      <div className={classes.imgTitle}>\r\n        <img\r\n          src={post.featuredImg}\r\n          style={{ marginTop: \"10px\", width: \"200px\", height: \"200px\", objectFit: \"cover\" }}\r\n          alt=\"\"\r\n        />\r\n        <div>\r\n          <p style={{ marginLeft: \"2em\" }}>{post.previewContent}</p>\r\n          <div className={classes.readSave}>\r\n            <Link\r\n              to={`/post/${post._id}`}\r\n              className={classes.link}\r\n              onClick={() => {\r\n                handleViewPost(post, dispatch);\r\n              }}\r\n            >\r\n              <h4\r\n                style={{\r\n                  marginRight: \"2em\",\r\n                  color: \"#5D67E9\",\r\n                  textDecoration: \"none\",\r\n                }}\r\n              >\r\n                Read more\r\n              </h4>\r\n            </Link>\r\n\r\n            <h4\r\n              style={{ color: \"#5D67E9\", cursor: \"pointer\" }}\r\n              onClick={() => {\r\n                dispatch(savePost({ postID: post._id }));\r\n              }}\r\n            >\r\n              Save for later\r\n            </h4>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className={classes.interactions}>\r\n        {post.tags.length > 0 && post.tags.map((_id) => (\r\n          <p key={_id} className={classes.tagText}>\r\n            {/*}#{tags[_id].name}&nbsp;*/}\r\n          </p>\r\n        ))}\r\n        <div style={{ display: \"flex\", flex: 1 }}></div>\r\n        <div className={classes.interactionsIcons}>\r\n          <img\r\n            className={classes.heartIcon}\r\n            src={postIsLikedByUser ? HeartIconRed : HeartIcon}\r\n            alt=\"\"\r\n            onClick={handleToggleLike}\r\n          />\r\n          <p>&nbsp;{post.likes}</p>\r\n          <Link to={`/post/${post.slug}`} className={classes.link}>\r\n            <img className={classes.commentIcon} src={CommentIcon} alt=\"\" />\r\n          </Link>\r\n          <p>&nbsp;{post.commentsCount}</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport { makeStyles, Theme } from \"@material-ui/core/styles\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport \"./TagsCarousel.css\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../reducers/rootReducer\";\r\nimport { Tag } from \"../../store/types\";\r\nimport { Dictionary } from \"@reduxjs/toolkit\";\r\n\r\ninterface TabPanelProps {\r\n  children?: React.ReactNode;\r\n  index: any;\r\n  value: any;\r\n}\r\n\r\nfunction a11yProps(index: any) {\r\n  return {\r\n    id: `scrollable-auto-tab-${index}`,\r\n    \"aria-controls\": `scrollable-auto-tabpanel-${index}`\r\n  };\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    width: \"50%\",\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n}));\r\n\r\nexport const TagsCarousel = ({ value, setValue }) => {\r\n  const classes = useStyles();\r\n  const tags = useSelector<RootState, Dictionary<Tag>>(state => state.tags.entities);\r\n  const tagsArr = [null].concat(Object.values(tags));\r\n\r\n  const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"relative\" color=\"default\">\r\n        <Tabs\r\n          value={value}\r\n          onChange={handleChange}\r\n          indicatorColor=\"primary\"\r\n          textColor=\"primary\"\r\n          variant=\"scrollable\"\r\n          scrollButtons=\"auto\"\r\n          aria-label=\"scrollable auto tabs example\"\r\n        >\r\n          {tagsArr.map((tag, idx) => {\r\n            if (idx === 0) {\r\n              return <Tab label=\"all\" {...a11yProps({ idx })} key={idx} />;\r\n            }\r\n            return <Tab label={tag.name} {...a11yProps({ idx })} key={idx} />;\r\n          })}\r\n        </Tabs>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport Card from './Card';\r\nimport { RootState } from '../../reducers/rootReducer';\r\nimport InfiniteScroll from 'react-infinite-scroll-component';\r\nimport { Loading } from '../common/Loading';\r\nimport { fetchPostsByTag, fetchTrendingPosts } from '../../reducers/postsSlice';\r\nimport { AppDispatch } from '../../store';\r\nimport { Dictionary, unwrapResult } from '@reduxjs/toolkit';\r\nimport { TagsCarousel } from './TagsCarousel';\r\nimport { Tag } from '../../store/types';\r\n\r\n//parent: Home\r\nconst Main = () => {\r\n  const trendingPosts = useSelector<RootState, string[]>(\r\n      (state) => state.posts.trendingPosts\r\n  );\r\n  const dispatch: AppDispatch = useDispatch();\r\n  const [items, setItems] = useState(trendingPosts);//has 5 things initially\r\n  const currFetchCount: number = useSelector<RootState, number>(state => state.posts.trendingPostFetchCount);\r\n  const hasMoreTrendingPosts: boolean = useSelector<RootState, boolean>(state => state.posts.hasMorePosts);\r\n\r\n  const [tabIndex, setTabIndex] = React.useState(0);\r\n  const tags = useSelector<RootState, Dictionary<Tag>>(state => state.tags.entities);\r\n  const hasMorePostsInTags = useSelector<RootState, Record<string, boolean>>(state => state.tags.hasMorePostsInTags);\r\n  const tagsArr = Object.values(tags);\r\n  const currentTag = tagsArr[tabIndex - 1];\r\n  const currentTagID = currentTag?._id;\r\n\r\n  let hasMore: boolean;\r\n  if (tabIndex === 0) {\r\n    hasMore = hasMoreTrendingPosts;\r\n  } else {\r\n    hasMore = hasMorePostsInTags[currentTagID];\r\n  }\r\n\r\n  const handleTabChange = (newIdx: number) => {\r\n    setTabIndex(newIdx);\r\n    // if new index is 0 (All - trending posts)\r\n    if (newIdx === 0) {\r\n      setItems(trendingPosts);\r\n      return;\r\n    }\r\n    const currentTag = tagsArr[newIdx - 1];\r\n    console.log(currentTag);\r\n    // switch to a tag\r\n    setItems(Object.keys(currentTag.postsSet));\r\n    const startIdx = items.length; // communicate to back end which ones to skip\r\n    const tagID = currentTagID;\r\n    dispatch(fetchPostsByTag({ tagID, startIdx })).then(unwrapResult).then(res => {\r\n      setItems(prev => prev.concat(res.posts.map(post => post._id)))\r\n    }).catch(err => console.log(err));\r\n  }\r\n\r\n  const fetchMoreData = () => {\r\n    if (tabIndex === 0) {\r\n      if (hasMoreTrendingPosts) {\r\n        dispatch(fetchTrendingPosts({ fetchCount: currFetchCount })).then(unwrapResult).then(res => {\r\n          setItems(prev => prev.concat(res.posts.map(post => post._id)))\r\n        }).catch(err => console.log(err));\r\n      } else {\r\n        return;\r\n      }\r\n    }\r\n\r\n    const startIdx = items.length; // communicate to back end which ones to skip\r\n    const tagID = currentTagID;\r\n    if (hasMorePostsInTags[tagID]) {\r\n      dispatch(fetchPostsByTag({ tagID, startIdx })).then(unwrapResult).then(res => {\r\n        setItems(prev => prev.concat(res.posts.map(post => post._id)))\r\n      }).catch(err => console.log(err));\r\n    }\r\n  }\r\n\r\n  return (\r\n      <>\r\n        <div style={{ display: \"flex\", position: \"fixed\", justifyContent: \"center\", width: \"50%\", zIndex: 10, marginTop: \"-40px\" }}>\r\n          <TagsCarousel value={tabIndex} setValue={handleTabChange} />\r\n        </div>\r\n        <div style={{ marginTop: \"50px\" }}>\r\n          <InfiniteScroll\r\n              dataLength={items.length} //This is important field to render the next data\r\n              next={fetchMoreData}\r\n              hasMore={hasMore}\r\n              key={tabIndex.toString()}\r\n              loader={<Loading />}\r\n              endMessage={\r\n                <p style={{ textAlign: 'center' }}>\r\n                  <b>You've seen it all!</b>\r\n                </p>\r\n              }>\r\n            {items.map((_id, idx) => (\r\n                <Card postID={_id} key={idx} />\r\n            ))}\r\n          </InfiniteScroll>\r\n        </div>\r\n      </>\r\n  );\r\n};\r\nexport default Main;\r\n","import { makeStyles } from '@material-ui/core/styles';\r\nimport React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { RootState } from '../../reducers/rootReducer';\r\nimport { TinyButton as ScrollUpButton } from \"react-scroll-up-button\"; //https://www.npmjs.com/package/react-scroll-up-button\r\nimport \"./TagsCarousel.css\";\r\nimport { Dictionary } from '@reduxjs/toolkit';\r\nimport { Post, User } from '../../store/types';\r\nimport Avatar from '../common/Avatar';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    width: \"20vw\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    cursor: \"pointer\",\r\n    paddingLeft: \"2em\",\r\n    paddingTop: \"10vh\",\r\n    marginRight: \"5vw\",\r\n    position: \"fixed\",\r\n    right: 0,\r\n\r\n  },\r\n  savePostSection: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    height: \"50vh\",\r\n    overflowY: \"scroll\",\r\n  },\r\n  savePostText: {\r\n    marginBottom: \"-1px\",\r\n    borderBottom: \"solid 1px lightgray\",\r\n    fontSize: \"large\",\r\n    fontFamily: \"Passion One, cursive\",\r\n    color: \"#707070\",\r\n  },\r\n  link: {\r\n    textDecoration: \"none\",\r\n  },\r\n});\r\n\r\n//parent:\r\nexport default function RightSideBar() {\r\n  const classes = useStyles();\r\n\r\n  /*\r\n  const currViewedPost = null;\r\n  const savedPosts = [\r\n    {\r\n      postID: \"5f00faca1a9b9b1781929025\", author: \"fred\", title: \"sad\", previewContent: \"It is sad\", content: \"It is so sad\", tags: [ \"cpp\", \"html\" ], featuredImg: \"\", likesCount: 100, comments: \"this is a comment\", commentsCount: 100, views: 10, createdAt: \"created here\", likedByUser: true, slug: \"slug\", group: \"group\"\r\n    }\r\n  ];\r\n  let isLoggedIn = useSelector<RootState, boolean>((state) => state.isLoggedIn);\r\n  console.log(isLoggedIn);\r\n  isLoggedIn = true;\r\n  */\r\n  const isLoggedIn = useSelector<RootState, boolean>((state) => state.isLoggedIn);\r\n  const trendingPosts = useSelector<RootState, string[]>(\r\n    (state) => state.posts.trendingPosts\r\n  );\r\n\r\n  const posts = useSelector<RootState, Dictionary<Post>>(\r\n    (state) => state.posts.entities\r\n  );\r\n  const users = useSelector<RootState, Dictionary<User>>(\r\n    (state) => state.users.entities\r\n  );\r\n  return (\r\n    <div className={classes.root}>\r\n      {isLoggedIn && <div>\r\n        <p className={classes.savePostText}># POPULAR</p>\r\n        <div className={classes.savePostSection}>\r\n          {trendingPosts.map((_id, idx) => (\r\n            <div key={idx}>\r\n              <Avatar pic={users[posts[_id].author].profilePic} title={posts[_id].title} subtitle={posts[_id].content.substr(0, 60).concat(\"...\")} isButton={false} isPost={true} extraText={posts[_id].createdAt}></Avatar>\r\n              {/* <Link\r\n                to={`/post/${post.postID}`}\r\n                className={classes.link}\r\n                onClick={() => {\r\n                  handleViewPost(currViewedPost, post);\r\n                }}\r\n              > */}\r\n              {/* <p style={{ marginTop: \"-0.5em\", fontWeight: \"bold\" }}>\r\n                {post.title}\r\n              </p> */}\r\n              {/* </Link> */}\r\n            </div>\r\n          ))}\r\n        </div>\r\n\r\n        <p className={classes.savePostText}># WHO TO FOLLOW</p>\r\n        <ScrollUpButton />\r\n      </div>}\r\n\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nconst ErrorPage = ({ error }) => {\r\n  return (<h3 style={{ position: \"absolute\", height: \"500px\", top: \"200px\" }}>Error: {JSON.stringify(error)}</h3>)\r\n}\r\n\r\nexport default ErrorPage;","import { createEntityAdapter, createSlice, PayloadAction, createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport { fetchTrendingPosts, fetchPostBySlug } from \"./postsSlice\";\r\nimport { User } from \"../store/types\";\r\nimport {\r\n  GetInitialDataDto,\r\n  GetInitialDataLoggedInDto,\r\n  GetPostDetailsSuccessDto,\r\n  UserApi,\r\n  GetUsersSuccessDto,\r\n  UserDto\r\n} from \"../api\";\r\nimport { leaveGroup, joinGroup } from \"./groupsSlice\";\r\nimport _ from \"lodash\";\r\nimport {getCommentsByPostIDSuccess} from \"./commentsSlice\";\r\nimport {GetCommentsServerToClientDto} from \"../ws-dto/comments/dto/getCommentsByPostID.ws.dto\";\r\n\r\nconst api = new UserApi();\r\n\r\nconst usersAdapter = createEntityAdapter<User>({\r\n  selectId: item => item._id,\r\n});\r\n\r\nexport const fetchUsersByIDs = createAsyncThunk('fetchUsersByIDs', async (IDs: string[]) => {\r\n  return await api.userControllerGetUsersByIDs(IDs.join());\r\n});\r\n\r\nexport const fetchUserByUsername = createAsyncThunk('fetchUserByUsername', async (username: string) => {\r\n  return await api.userControllerGetUserByUsername(username);\r\n})\r\n\r\n//https://redux-toolkit.js.org/api/createSlice\r\nexport const usersSlice = createSlice({\r\n  name: \"users\",\r\n  initialState: usersAdapter.getInitialState<{ usernameToID: Record<string, string> }>(\r\n    { usernameToID: {} }\r\n  ),\r\n  reducers: {\r\n\r\n  },\r\n  extraReducers: {\r\n    [fetchTrendingPosts.fulfilled.type]: (state, action: PayloadAction<GetInitialDataDto | GetInitialDataLoggedInDto>) => {\r\n      usersAdapter.addMany(state, action.payload.users) //add users (trending posts' authors) to ids and entities\r\n      // Update username to ObjectID map\r\n      action.payload.users.forEach(user => state.usernameToID[user.userID] = user._id);\r\n    },\r\n    [fetchPostBySlug.fulfilled.type]: (state, action: PayloadAction<GetPostDetailsSuccessDto>) => {\r\n      if (action.payload.author) {\r\n        usersAdapter.upsertOne(state, action.payload.author);\r\n\r\n        // Update username to ObjectID map\r\n        state.usernameToID[action.payload.author.userID] = action.payload.author._id;\r\n      }\r\n    },\r\n    [fetchUsersByIDs.fulfilled.type]: (state, action: PayloadAction<GetUsersSuccessDto>) => {\r\n      usersAdapter.upsertMany(state, action.payload.users);\r\n      // Update username to ObjectID map\r\n      action.payload.users.forEach(user => state.usernameToID[user.userID] = user._id);\r\n    },\r\n    [fetchUserByUsername.fulfilled.type]: (state, action: PayloadAction<UserDto>) => {\r\n      usersAdapter.upsertOne(state, action.payload);\r\n      // Update username to ObjectID map\r\n      state.usernameToID[action.payload.userID] = action.payload._id;\r\n    },\r\n    [leaveGroup.fulfilled.type]: (state, action: PayloadAction<{ groupID: string, userID: string }>) => {\r\n      if (state.entities[action.payload.userID]) {\r\n        _.pull(state.entities[action.payload.userID].groups, action.payload.groupID);\r\n      }\r\n    },\r\n    [joinGroup.fulfilled.type]: (state, action: PayloadAction<{ groupID: string, userID: string }>) => {\r\n      if (state.entities[action.payload.userID].groups) {\r\n        state.entities[action.payload.userID].groups.push(action.payload.groupID)\r\n      }\r\n    },\r\n    'getConversationsAndUsers': (state, action: PayloadAction<any>) => {\r\n      usersAdapter.upsertMany(state, action.payload.users);\r\n    },\r\n    [getCommentsByPostIDSuccess.type]: (state, action: PayloadAction<GetCommentsServerToClientDto>) => {\r\n      usersAdapter.upsertMany(state, action.payload.authors);\r\n    }\r\n  }\r\n})\r\n\r\nexport default usersSlice.reducer;","import React from 'react';\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Radio, { RadioProps } from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    '&:hover': {\r\n      backgroundColor: 'transparent',\r\n    },\r\n  },\r\n  icon: {\r\n    borderRadius: '50%',\r\n    width: 16,\r\n    height: 16,\r\n    boxShadow: 'inset 0 0 0 1px rgba(16,22,26,.2), inset 0 -1px 0 rgba(16,22,26,.1)',\r\n    backgroundColor: '#f5f8fa',\r\n    backgroundImage: 'linear-gradient(180deg,hsla(0,0%,100%,.8),hsla(0,0%,100%,0))',\r\n    '$root.Mui-focusVisible &': {\r\n      outline: '2px auto rgba(19,124,189,.6)',\r\n      outlineOffset: 2,\r\n    },\r\n    'input:hover ~ &': {\r\n      backgroundColor: '#ebf1f5',\r\n    },\r\n    'input:disabled ~ &': {\r\n      boxShadow: 'none',\r\n      background: 'rgba(206,217,224,.5)',\r\n    },\r\n  },\r\n  checkedIcon: {\r\n    backgroundColor: '#137cbd',\r\n    backgroundImage: 'linear-gradient(180deg,hsla(0,0%,100%,.1),hsla(0,0%,100%,0))',\r\n    '&:before': {\r\n      display: 'block',\r\n      width: 16,\r\n      height: 16,\r\n      backgroundImage: 'radial-gradient(#fff,#fff 28%,transparent 32%)',\r\n      content: '\"\"',\r\n    },\r\n    'input:hover ~ &': {\r\n      backgroundColor: '#106ba3',\r\n    },\r\n  },\r\n});\r\n\r\n// Inspired by blueprintjs\r\nfunction StyledRadio(props: RadioProps) {\r\n  const classes = useStyles();\r\n  return (\r\n    <Radio\r\n      className={classes.root}\r\n      disableRipple\r\n      color=\"default\"\r\n      checkedIcon={<span className={clsx(classes.icon, classes.checkedIcon)} />}\r\n      icon={<span className={classes.icon} />}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n\r\nexport default function RadioButtons({ setItem }) {\r\n  const handleChange = (value) => { setItem(value) }\r\n  return (\r\n    <FormControl component=\"fieldset\" required={true}>\r\n      <FormLabel component=\"legend\" focused={false}>Privacy</FormLabel>\r\n\r\n      <RadioGroup row defaultValue=\"public\" name=\"customized-radios\" onChange={handleChange}>\r\n        <FormControlLabel value=\"public\" control={<StyledRadio />} label=\"Public\" />\r\n        <FormControlLabel value=\"private\" control={<StyledRadio />} label=\"Private\" />\r\n\r\n      </RadioGroup>\r\n    </FormControl>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport ImageUploader from \"react-images-upload\";\r\nimport AddMultiple from './AddMuliple';\r\nimport { RootState } from '../../reducers/rootReducer';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { User } from '../../store/types';\r\nimport { Dictionary, unwrapResult } from '@reduxjs/toolkit';\r\nimport { AppDispatch } from '../../store';\r\nimport { Loading } from '../common/Loading';\r\nimport ErrorPage from '../common/ErrorPage';\r\nimport { fetchUsersByIDs } from '../../reducers/usersSlice';\r\nimport { convertArrToMap, getFollowingFollowersOfUser } from '../../util/helperFunctions';\r\nimport { TextFields } from './TextFields';\r\nimport RadioButtons from './RadioButtons';\r\nimport styled from '@emotion/styled';\r\nimport { withStyles, Theme } from '@material-ui/core';\r\nimport MuiDialogActions from '@material-ui/core/DialogActions';\r\nimport PurpleButton from '../common/PurpleButton';\r\nimport { createGroup } from '../../reducers/groupsSlice';\r\nimport { UploadApi } from '../../api';\r\nimport { JwtLocalStorageKey } from '../../constants';\r\nimport { uploadPublicAsset } from \"../../api-upload\";\r\n\r\nconst TextWrapper = styled.div`\r\n  margin-left: 10px;\r\n  margin-right: 10px;\r\n`;\r\n\r\nconst DialogActions = withStyles((theme: Theme) => ({\r\n  root: {\r\n    padding: theme.spacing(1),\r\n  },\r\n}))(MuiDialogActions);\r\n\r\nexport const CreateGroupForm = ({ handleClose }) => {\r\n  const [people, setPeople] = useState<string[]>([]);\r\n  const [profileBannerFile, setProfileBanner] = useState<File>(null);\r\n  const [profilePicFile, setProfilePic] = useState<File>(null);\r\n  const [name, setName] = useState(\"\");\r\n  const [description, setDescription] = useState(\"\");\r\n  const [_private, setPrivate] = useState(false);\r\n\r\n  const usersMap = useSelector<RootState, Dictionary<User>>(state => state.users.entities);\r\n  const user = useSelector<RootState, User>(state => state.user);\r\n  let followingFollowers: User[] = getFollowingFollowersOfUser(usersMap, user);\r\n\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [creatingGroupLoading, setCreatingGroupLoading] = useState(false);\r\n\r\n  const dispatch = useDispatch<AppDispatch>();\r\n  useEffect(() => {\r\n    if (user.followers.length > 0 || user.following.length > 0) {\r\n      setLoading(true);\r\n      dispatch(fetchUsersByIDs(user.following.concat(user.followers)))\r\n        .then(unwrapResult).then( //must set dispatch to any to use .then\r\n          () => {\r\n            setLoading(false)\r\n          }\r\n        ).catch(error => {\r\n          console.log(error);\r\n          setError(error);\r\n          setLoading(false);\r\n        });\r\n    }\r\n  }, []);\r\n\r\n  if (!followingFollowers || loading) {\r\n    return <Loading />\r\n  }\r\n\r\n  if (error) {\r\n    return <ErrorPage error={error} />\r\n  }\r\n\r\n  const handleBannerImageChange = picture => {\r\n    // picture is an array containing 1 file\r\n    setProfileBanner(picture[0]);\r\n  }\r\n    ;\r\n\r\n  const handleProfilePicChange = picture => {\r\n    // picture is an array containing 1 file\r\n    setProfilePic(picture[0])\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    // Upload images if they exist\r\n    let profilePic: string;\r\n    let profileBanner: string;\r\n    // upload profile pic\r\n    if (profilePicFile) {\r\n      // TODO: show loading while uploading\r\n      profilePic = await uploadPublicAsset(profilePicFile);\r\n    }\r\n\r\n    if (profileBannerFile) {\r\n      profileBanner = await uploadPublicAsset(profileBannerFile);\r\n    }\r\n\r\n    const group = {\r\n      name,\r\n      description,\r\n      private: _private,\r\n      users: people,\r\n      profilePic,\r\n      profileBanner,\r\n    };\r\n\r\n    dispatch(createGroup(group)).then(unwrapResult).then(() => {\r\n      setCreatingGroupLoading(true);\r\n    }).catch(err => {\r\n      setLoading(false);\r\n      setError(err);\r\n    })\r\n    handleClose();\r\n  }\r\n\r\n\r\n  return (\r\n    <>\r\n      {creatingGroupLoading ? <Loading /> :\r\n        <form onSubmit={handleSubmit}>\r\n          {/* https://github.com/jakehartnell/react-images-upload#readme */}\r\n          <div style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\" }}>\r\n            <ImageUploader\r\n              // {...props}\r\n              buttonText='Upload cover photo'\r\n              withPreview={true}\r\n              withIcon={true}\r\n              onChange={handleBannerImageChange}\r\n              imgExtension={[\".jpg\", \".jpeg\", \".gif\", \".png\", \".gif\"]}\r\n              maxFileSize={5242880}\r\n              singleImage={true}\r\n              buttonStyles={{ backgroundColor: \"#6a6a6a\" }}\r\n            />\r\n            {/* <div style={{ width: \"20px\" }}></div> */}\r\n            <ImageUploader\r\n              // {...props}\r\n              buttonText='Upload profile pic'\r\n              withPreview={true}\r\n              withIcon={false}\r\n              onChange={handleProfilePicChange}\r\n              imgExtension={[\".jpg\", \".jpeg\", \".gif\", \".png\", \".gif\"]}\r\n              maxFileSize={5242880}\r\n              style={{ width: \"50%\" }}\r\n              singleImage={true}\r\n              buttonStyles={{ backgroundColor: \"#6a6a6a\" }}\r\n            />\r\n          </div>\r\n\r\n          <TextFields name=\"Add Group Name\" description=\"Add Group Description\" setName={setName} setDescription={setDescription} />\r\n\r\n          {/* https://material-ui.com/components/autocomplete/#Tags.tsx */}\r\n          <TextWrapper>\r\n            <AddMultiple label=\"Add People\" options={followingFollowers} imgKey=\"profilePic\" setItems={setPeople} panelWidth={500} />\r\n          </TextWrapper>\r\n\r\n          <div style={{ height: \"25px\" }}></div>\r\n\r\n          <TextWrapper>\r\n            <RadioButtons setItem={setPrivate} />\r\n          </TextWrapper>\r\n\r\n          <DialogActions>\r\n            <div>\r\n              <PurpleButton content=\"Create group\" />\r\n            </div>\r\n          </DialogActions>\r\n        </form>}\r\n    </>\r\n  )\r\n}","import React, { useState } from 'react';\r\nimport { createStyles, Theme, withStyles, WithStyles } from '@material-ui/core/styles';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\r\nimport MuiDialogContent from '@material-ui/core/DialogContent';\r\nimport MuiDialogActions from '@material-ui/core/DialogActions';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport styled from '@emotion/styled';\r\nimport PurpleButton from '../common/PurpleButton';\r\nimport { CreateGroupForm } from './CreateGroupForm';\r\n\r\nconst CreateGroupButton = styled.p`\r\n  margin-top: 10px;\r\n  color: #5D67E9; \r\n  font-weight: bold;\r\n  padding-top: 20px;\r\n  cursor: pointer;\r\n`;\r\nexport interface DialogTitleProps extends WithStyles<typeof styles> {\r\n  id: string;\r\n  children: React.ReactNode;\r\n  onClose: () => void;\r\n}\r\n\r\nconst styles = (theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      margin: 0,\r\n      padding: theme.spacing(2),\r\n    },\r\n    closeButton: {\r\n      position: 'absolute',\r\n      right: theme.spacing(1),\r\n      top: theme.spacing(1),\r\n      color: theme.palette.grey[500],\r\n    },\r\n  });\r\n\r\nconst DialogTitle = withStyles(styles)((props: DialogTitleProps) => {\r\n  const { children, classes, onClose, ...other } = props;\r\n  return (\r\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\r\n      <Typography variant=\"h6\">{children}</Typography>\r\n      {onClose ? (\r\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\r\n          <CloseIcon />\r\n        </IconButton>\r\n      ) : null}\r\n    </MuiDialogTitle>\r\n  );\r\n});\r\n\r\nconst DialogContent = withStyles((theme: Theme) => ({\r\n  root: {\r\n    padding: theme.spacing(2),\r\n  },\r\n}))(MuiDialogContent);\r\n\r\n\r\n\r\nconst intialState = {\r\n  name: \"\",\r\n  description: \"\",\r\n  private: false,\r\n  profilePic: \"\",\r\n  profileBanner: \"\",\r\n  admins: [],\r\n  users: [],\r\n  posts: [],\r\n  videos: [],\r\n}\r\n\r\nexport const CreateGroupModal = () => {\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <CreateGroupButton onClick={handleClickOpen}>\r\n        Create Group\r\n      </CreateGroupButton>\r\n\r\n      <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\r\n\r\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\r\n          Create a Group\r\n        </DialogTitle>\r\n\r\n        <DialogContent dividers>\r\n          <CreateGroupForm handleClose={handleClose} />\r\n        </DialogContent>\r\n\r\n\r\n\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}","import React, { useEffect, useState } from \"react\";\nimport styled from '@emotion/styled';\nimport Avatar from \"../common/Avatar\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { RootState } from \"../../reducers/rootReducer\";\nimport { User, Group } from \"../../store/types\";\nimport { Dictionary, unwrapResult } from \"@reduxjs/toolkit\";\nimport { AppDispatch } from \"../../store\";\nimport { Loading } from \"../common/Loading\";\nimport ErrorPage from \"../common/ErrorPage\";\nimport { fetchGroups, leaveGroup, joinGroup, selectGroup } from \"../../reducers/groupsSlice\";\nimport PurpleButton from \"../common/PurpleButton\";\nimport { CreateGroupModal } from \"./CreateGroupModal\";\nimport { Link } from \"react-router-dom\";\n\nconst GroupContainer = styled.div`\n  width: 40%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  background-color: white;\n\n`;\nconst Header = styled.div`\n  display: flex;\n  flex-direction: row;\n  padding-left: 30px;\n  padding-right: 30px;\n  padding-top: 10px;\n  border-bottom: solid 1px lightgray;\n`;\n\nconst GroupContent = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding-left: 30px;\n  padding-right: 30px;\n  overflow-y: scroll;\n  margin-bottom: 5vh;\n`;\n\nconst GroupCard = ({ currentGroup, isUserAMember }: { currentGroup: Group, isUserAMember: boolean }) => {\n  const dispatch = useDispatch();\n\n  const handleJoinGroup = () => {\n    dispatch(joinGroup(currentGroup._id));\n  }\n  const handleLeaveGroup = () => {\n    dispatch(leaveGroup(currentGroup._id));\n  }\n\n  if (!currentGroup)\n    return <div><h1>NULL GROUP</h1></div>\n\n  return <div>\n    <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n\n      <Link to={`/group/${currentGroup._id}`} style={{ textDecoration: \"none\" }}>\n        <Avatar pic={currentGroup.profilePic} title={currentGroup.name} subtitle={currentGroup.description} extraText=\"\" />\n      </Link>\n\n      <div style={{ flex: 1 }}></div>\n      <div style={{ marginTop: \"30px\" }}>\n        {!isUserAMember && <div onClick={handleJoinGroup}>\n          <PurpleButton content=\"Join Group\" /> </div>}\n        {isUserAMember && <div onClick={handleLeaveGroup}> <PurpleButton content=\"Leave Group\" /> </div>}\n      </div>\n    </div>\n  </div>\n}\n\nexport default function GroupTab() {\n  const user = useSelector<RootState, User>(state => state.user);\n  const groups = useSelector<RootState, Dictionary<Group>>(state => state.groups.entities);\n\n  const dispatch: AppDispatch = useDispatch();\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    setLoading(true);\n    dispatch(fetchGroups()).then(unwrapResult).then(() => {\n      setLoading(false);\n    }).catch(err => {\n      setLoading(false);\n      setError(err);\n    })\n  }, []);\n\n  if (loading || !groups) {\n    return <Loading />\n  }\n  if (error) {\n    return <ErrorPage error={error} />\n  }\n\n  const joinedGroupIDs = user.groups;\n  const otherGroupsIDs = Object.keys(groups).filter((_id) => {\n    return !joinedGroupIDs.includes(_id);\n  })\n\n  return (\n    <GroupContainer>\n      <Header>\n        <span><h2>Groups</h2></span>\n        <div style={{ flex: 1 }}></div>\n        <span>\n          <CreateGroupModal />\n        </span>\n      </Header>\n\n      <hr style={{ color: \"black\" }}></hr>\n      <GroupContent>\n        {joinedGroupIDs.length > 0 && <>\n          <h3>Your groups</h3>\n          {joinedGroupIDs.map((_id) => {\n            return <GroupCard currentGroup={groups[_id]} key={_id} isUserAMember={true} />\n          })}\n        </>}\n\n        {joinedGroupIDs.length === 0 && <h3>Groups you may be interested in</h3>}\n        {joinedGroupIDs.length > 0 && <h3>Other groups</h3>}\n        {otherGroupsIDs.map((_id) => {\n          return <GroupCard currentGroup={groups[_id]} key={_id} isUserAMember={false} />\n        })}\n      </GroupContent>\n    </GroupContainer >\n  );\n}","import { makeStyles } from '@material-ui/core/styles';\r\nimport React from 'react';\r\nimport LeftSideBar from './LeftSideBar';\r\nimport Main from './Main';\r\nimport RightSideBar from './RightSideBar';\r\nimport GroupTab from '../group';\r\nimport { Route, Switch, useRouteMatch } from 'react-router-dom';\r\n\r\nconst useStyles = makeStyles({\r\n  home: {\r\n    paddingTop: \"7vh\",\r\n    display: \"flex\",\r\n  },\r\n  main: {\r\n    marginTop: \"5vh\",\r\n    display: \"flex\",\r\n    flex: 1,\r\n    marginBottom: \"1vh\",\r\n    height: \"86vh\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n    width: \"100%\",\r\n  },\r\n});\r\n\r\nexport default function Home() {\r\n  const classes = useStyles();\r\n  // https://reactrouter.com/web/example/nesting\r\n  // path and url are both for building relative destinations\r\n  // path is for route, url is for link\r\n  const { path } = useRouteMatch();\r\n\r\n  return (\r\n    <div className={classes.home}>\r\n      <LeftSideBar />\r\n      <div className={classes.main}>\r\n        <Switch>\r\n          <Route path={`${path}/groups`}>\r\n            <GroupTab />\r\n          </Route>\r\n          <Route exact path={path}>\r\n            <Main />\r\n          </Route>\r\n        </Switch>\r\n      </div>\r\n      <RightSideBar />\r\n    </div>\r\n  );\r\n}","import React from 'react'\r\nimport { useEffect } from \"react\"\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useDispatch } from 'react-redux';\r\nimport { loginSuccess } from '../../reducers/isLoggedInSlice';\r\n\r\nexport function DevLogin() {\r\n  const history = useHistory();\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    fetch(\"http://localhost:3001/api/dev/login\").then(res => res.json()).then(\r\n      (res) => {\r\n        const jwt: string = res.jwt;\r\n        dispatch(loginSuccess({jwt}));\r\n        history.push(\"/\");\r\n      }\r\n    )\r\n  }, [])\r\n  return (<h1>Logging in...</h1>);\r\n}","import { createAsyncThunk, createEntityAdapter, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { Socket } from \"socket.io-client\";\r\nimport { CreateMessageBodyDto, CreateMessageSuccessDto, MessageDto, MessagesApi } from \"../api\";\r\nimport { Message } from \"../store/types\";\r\nimport _ from \"lodash\";\r\n\r\nconst messagesAdapter = createEntityAdapter<Message>({\r\n  selectId: item => item._id,\r\n});\r\n\r\nexport const fetchMessagesInConversation = createAsyncThunk(\r\n  'fetchMessagesInConversation',\r\n  async ({ conversationID }: { conversationID: string }) => {\r\n    return await new MessagesApi().messagesControllerGetMessagesInConversation(conversationID);\r\n  }\r\n)\r\n\r\nexport type PendingMessage = {\r\n  createdAt: number,\r\n  conversationID: string,\r\n  text: string\r\n}\r\n\r\nexport const messagesSlice = createSlice({\r\n  name: \"messages\",\r\n  initialState: messagesAdapter.getInitialState<{ isSending: boolean, isTyping: boolean, isError: any, pendingMessages: PendingMessage[] }>({\r\n    isSending: false,\r\n    isTyping: false,\r\n    isError: null,\r\n    pendingMessages: []\r\n  }),//also has ids[] and entities{}\r\n  reducers: {\r\n    createMessagePending: (state, action: PayloadAction<CreateMessageBodyDto>) => {\r\n      state.isSending = true;\r\n      state.isError = null;\r\n      const newMessage: PendingMessage = {\r\n        conversationID: action.payload.conversationID,\r\n        text: action.payload.text,\r\n        createdAt: action.payload.createdAt,\r\n      }\r\n      state.pendingMessages.push(newMessage);\r\n    },\r\n    createMessageSuccess: (state, action: PayloadAction<CreateMessageSuccessDto>) => {\r\n      state.isSending = false;\r\n      messagesAdapter.addOne(state, action.payload);\r\n      _.remove(state.pendingMessages, (message) => {\r\n        return message.createdAt === action.payload.createdAt;\r\n      });\r\n      state.isError = null;\r\n    },\r\n    createMessageError: (state, action: PayloadAction<Error>) => {\r\n      state.isSending = false;\r\n      state.isError = action.payload;\r\n    },\r\n    receiveNewMessage: (state, action: PayloadAction<CreateMessageSuccessDto>) => {\r\n      messagesAdapter.addOne(state, action.payload);\r\n    }\r\n  },\r\n  extraReducers: {\r\n    [fetchMessagesInConversation.fulfilled.type]: (state, action: PayloadAction<CreateMessageSuccessDto[]>) => {\r\n      messagesAdapter.upsertMany(state, action.payload);\r\n    }\r\n  }\r\n})\r\n\r\nexport default messagesSlice.reducer;\r\nexport const { createMessagePending, createMessageSuccess, createMessageError, receiveNewMessage } = messagesSlice.actions;","import {createEntityAdapter, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {CreateConversationBodyDto, CreateMessageSuccessDto} from \"../api\";\r\nimport {Conversation} from \"../store/types\";\r\nimport {ConversationDto} from \"../ws-dto/messages/messenger.ws.dto\";\r\nimport {fetchMessagesInConversation, createMessageSuccess, receiveNewMessage} from \"./messagesSlice\";\r\n\r\nconst conversationsAdapter = createEntityAdapter<Conversation>({\r\n  selectId: item => item._id\r\n});\r\n\r\nexport const conversationSlice = createSlice({\r\n  name: \"conversations\",\r\n  initialState: conversationsAdapter.getInitialState<{\r\n    currentConversationID: string,\r\n    isGroupConversation: boolean,\r\n    isDirectConversation: boolean\r\n    isLoading: boolean,\r\n  }>({\r\n    currentConversationID: '', //the conversation shown in CHat Window\r\n    isGroupConversation: false,\r\n    isDirectConversation: true,\r\n    isLoading: false,\r\n  }),//also has ids[] and entities{}\r\n  reducers: {\r\n    addConversation: (state, action: PayloadAction<ConversationDto>) => {\r\n      conversationsAdapter.addOne(state, action.payload);\r\n    },\r\n    setNewConversation: (state) => {\r\n      state.currentConversationID = \"\";\r\n    },\r\n    selectConversation: (state, action: PayloadAction<{ conversationID: string }>) => {\r\n      const id = action.payload.conversationID;\r\n      const conversation = state.entities[id];\r\n      if (conversation.users.length > 2) {\r\n        state.isDirectConversation = false;\r\n        state.isGroupConversation = true;\r\n      } else {\r\n        state.isDirectConversation = true;\r\n        state.isGroupConversation = false;\r\n      }\r\n      state.isLoading = true;\r\n      state.currentConversationID = id;\r\n    },\r\n    createDirectConversationPending: (state) => {\r\n      state.isLoading = true;\r\n      state.isDirectConversation = true;\r\n      state.isGroupConversation = false;\r\n    },\r\n    createGroupConversationPending: (state) => {\r\n      state.isLoading = true;\r\n      state.isGroupConversation = true;\r\n      state.isDirectConversation = false;\r\n    },\r\n    createConversationSuccess: (state, action: PayloadAction<ConversationDto>) => {\r\n      conversationsAdapter.addOne(state, action.payload);\r\n      state.isLoading = true;\r\n      state.currentConversationID = action.payload._id;\r\n    }\r\n  },\r\n  extraReducers: {\r\n    'getConversationsAndUsers': (state, action: PayloadAction<any>) => {\r\n      conversationsAdapter.upsertMany(state, action.payload.conversations);\r\n    },\r\n    [fetchMessagesInConversation.fulfilled.type]: (state) => {\r\n      state.isLoading = false;\r\n    },\r\n    [createMessageSuccess.type]: (state, action: PayloadAction<CreateMessageSuccessDto>) => {\r\n      state.entities[state.currentConversationID].messages.push(action.payload._id);\r\n    },\r\n    [receiveNewMessage.type]: (state, action: PayloadAction<CreateMessageSuccessDto>) => {\r\n      state.entities[action.payload.conversationID].messages.push(action.payload._id);\r\n    }\r\n  }\r\n\r\n})\r\nexport default conversationSlice.reducer;\r\nexport const {\r\n  addConversation,\r\n  selectConversation,\r\n  createDirectConversationPending,\r\n  createGroupConversationPending,\r\n  createConversationSuccess,\r\n  setNewConversation\r\n} = conversationSlice.actions;","import React, { useState, useEffect, useContext } from 'react';\r\nimport { RootState } from '../../reducers/rootReducer';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { User } from '../../store/types';\r\nimport { Dictionary, unwrapResult } from '@reduxjs/toolkit';\r\nimport { AppDispatch } from '../../store';\r\nimport { Loading } from '../common/Loading';\r\nimport ErrorPage from '../common/ErrorPage';\r\nimport { fetchUsersByIDs } from '../../reducers/usersSlice';\r\nimport { convertArrToMap } from '../../util/helperFunctions';\r\nimport styled from '@emotion/styled';\r\nimport { withStyles, Theme } from '@material-ui/core';\r\nimport MuiDialogActions from '@material-ui/core/DialogActions';\r\nimport PurpleButton from '../common/PurpleButton';\r\nimport { TextFields } from '../group/TextFields';\r\nimport AddMultiple from '../group/AddMuliple';\r\nimport { NewConversationClientToServerDto } from \"../../ws-dto/messages/messenger.ws.dto\";\r\nimport { createDirectConversationPending, createGroupConversationPending } from \"../../reducers/conversationsSlice\";\r\nimport { SocketContext } from '../../App';\r\n\r\nconst TextWrapper = styled.div`\r\n  margin-left: 10px;\r\n  margin-right: 10px;\r\n`;\r\n\r\nconst DialogActions = withStyles((theme: Theme) => ({\r\n  root: {\r\n    padding: theme.spacing(1),\r\n  },\r\n}))(MuiDialogActions);\r\n\r\nexport const CreateGroupChatForm = ({ handleClose }) => {\r\n  const [people, setPeople] = useState<string[]>([]);\r\n  const [name, setName] = useState(\"\");\r\n\r\n  const usersMap = useSelector<RootState, Dictionary<User>>(state => state.users.entities);\r\n\r\n  const user = useSelector<RootState, User>(state => state.user);\r\n  let followingFollowers: User[] = [];\r\n  user.followers.concat(user.following).forEach((_id) => {\r\n    if (usersMap[_id]) {\r\n      followingFollowers.push(usersMap[_id])\r\n    }\r\n  });\r\n  followingFollowers = Object.values(convertArrToMap(followingFollowers));\r\n\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [creatingGroupLoading, setCreatingGroupLoading] = useState(false);\r\n\r\n  const socket = useContext(SocketContext);\r\n\r\n  const dispatch = useDispatch<AppDispatch>();\r\n  useEffect(() => {\r\n    if (user.followers.length > 0 || user.following.length > 0) {\r\n      setLoading(true);\r\n      dispatch(fetchUsersByIDs(user.following.concat(user.followers)))\r\n        .then(unwrapResult).then( //must set dispatch to any to use .then\r\n          () => {\r\n            setLoading(false)\r\n          }\r\n        ).catch(error => {\r\n          console.log(error);\r\n          setError(error);\r\n          setLoading(false);\r\n        });\r\n    }\r\n  }, []);\r\n\r\n  if (!followingFollowers || loading) {\r\n    return <Loading />\r\n  }\r\n\r\n  if (error) {\r\n    return <ErrorPage error={error} />\r\n  }\r\n\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    // if the conversationID is \"\", then the user is starting a new group chat with anonymous name\r\n    const dto: NewConversationClientToServerDto = { otherUsers: people, name }\r\n    socket.current.emit('newConversation', dto);\r\n    dispatch(createGroupConversationPending());\r\n    // when the back end responds, dispatch is called (in socket.on in messenger/index)\r\n    handleClose();\r\n  }\r\n\r\n\r\n  return (\r\n    <>\r\n      {creatingGroupLoading ? <Loading /> :\r\n        <form onSubmit={handleSubmit}>\r\n          <TextFields name=\"Add Name\" setName={setName} />\r\n\r\n          <TextWrapper>\r\n            <AddMultiple label=\"Add People\" options={followingFollowers} imgKey=\"profilePic\" setItems={setPeople} />\r\n          </TextWrapper>\r\n\r\n          <div style={{ height: \"25px\" }}></div>\r\n\r\n          <DialogActions>\r\n            <PurpleButton content=\"Done\" />\r\n          </DialogActions>\r\n\r\n        </form>}\r\n    </>\r\n  )\r\n}","import React, { useState } from 'react';\r\nimport { createStyles, Theme, withStyles, WithStyles } from '@material-ui/core/styles';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\r\nimport MuiDialogContent from '@material-ui/core/DialogContent';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport styled from '@emotion/styled';\r\nimport PurpleButton from '../common/PurpleButton';\r\nimport { CreateGroupChatForm } from './CreateGroupChatForm';\r\nimport { HeadingText } from './SideBar';\r\nimport PlusIcon from \"../../icons/plusIcon.svg\";\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { selectConversation } from \"../../reducers/conversationsSlice\";\r\nimport { RootState } from '../../reducers/rootReducer';\r\nimport { Dictionary } from '@reduxjs/toolkit';\r\nimport { Conversation, Group, User } from '../../store/types';\r\nimport Avatar from \"../common/Avatar\";\r\nimport { fetchMessagesInConversation } from \"../../reducers/messagesSlice\";\r\n\r\nexport interface DialogTitleProps extends WithStyles<typeof styles> {\r\n  id: string;\r\n  children: React.ReactNode;\r\n  onClose: () => void;\r\n}\r\n\r\nconst styles = (theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      margin: 0,\r\n      padding: theme.spacing(2),\r\n    },\r\n    closeButton: {\r\n      position: 'absolute',\r\n      right: theme.spacing(1),\r\n      top: theme.spacing(1),\r\n      color: theme.palette.grey[500],\r\n    },\r\n  });\r\n\r\nconst DialogTitle = withStyles(styles)((props: DialogTitleProps) => {\r\n  const { children, classes, onClose, ...other } = props;\r\n  return (\r\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\r\n      <Typography variant=\"h6\">{children}</Typography>\r\n      {onClose ? (\r\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\r\n          <CloseIcon />\r\n        </IconButton>\r\n      ) : null}\r\n    </MuiDialogTitle>\r\n  );\r\n});\r\n\r\nconst DialogContent = withStyles((theme: Theme) => ({\r\n  root: {\r\n    padding: theme.spacing(2),\r\n  },\r\n}))(MuiDialogContent);\r\n\r\n\r\nexport const GroupConversations = ({ setOpen }: { setOpen: any }) => {\r\n  const conversations = useSelector<RootState, Dictionary<Conversation>>(state => state.conversations.entities);\r\n  const groupConv = Object.values(conversations).filter(c => { return c.users.length > 2 });\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const handleSelectConversation = (conversationID) => {\r\n    // console.log(conversationID);\r\n    dispatch(selectConversation({ conversationID }));\r\n\r\n    // console.log(conversationID);\r\n    //fetch messages in current conversation\r\n    dispatch(fetchMessagesInConversation({ conversationID }));\r\n  }\r\n  return (<>\r\n    <div style={{ paddingTop: \"20px\" }}>\r\n      <span><img src={PlusIcon} alt=\"\" style={{ float: \"right\" }} onClick={setOpen} /></span>\r\n\r\n      <span><HeadingText>GROUP CONVERSATIONS</HeadingText></span>\r\n\r\n      {groupConv.length > 0 && groupConv.map((group) => {\r\n        return (\r\n          <p style={{ fontWeight: \"bold\", color: \"#333333\" }}\r\n            onClick={() => handleSelectConversation(group._id)}>#{group.name}</p>)\r\n\r\n      })}\r\n    </div>\r\n  </>)\r\n}\r\n\r\nexport const CreateGroupChatModal = () => {\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {/* list of all group chats */}\r\n      <GroupConversations setOpen={handleClickOpen}></GroupConversations>\r\n\r\n      <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open} disableBackdropClick={true}>\r\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\r\n          Create a Group Chat\r\n        </DialogTitle>\r\n\r\n        <DialogContent dividers >\r\n          <CreateGroupChatForm handleClose={handleClose} />\r\n        </DialogContent>\r\n\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}","import { Dictionary } from \"@reduxjs/toolkit\";\r\nimport React, { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../reducers/rootReducer\";\r\nimport { Conversation, User } from \"../../store/types\";\r\nimport Avatar from \"../common/Avatar\";\r\nimport styled from '@emotion/styled';\r\nimport ComposeIcon from \"../../icons/composeIcon.svg\";\r\nimport { CreateGroupChatModal } from \"./CreateGroupChatModal\";\r\nimport { selectConversation, setNewConversation } from \"../../reducers/conversationsSlice\";\r\nimport { fetchMessagesInConversation } from \"../../reducers/messagesSlice\";\r\nimport { AppDispatch } from \"../../store\";\r\n\r\nconst SideBarContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 17%;\r\n  height: 92vh;\r\n  cursor: pointer;\r\n  box-shadow: 2px 2px 3px #F5F5F5;\r\n  z-index: 1;\r\n`;\r\n\r\nexport const HeadingText = styled.div`\r\n  font-size: larger;\r\n  font-family: Passion One, cursive;\r\n  color: #707070;\r\n`;\r\n\r\nconst DirectMessages = () => {\r\n  const dispatch: AppDispatch = useDispatch();\r\n  const conversations = useSelector<RootState, Dictionary<Conversation>>(state => state.conversations.entities);\r\n  const directConv = Object.values(conversations).filter(c => {return c.users.length === 2});\r\n\r\n  const userID = useSelector<RootState, string>(state => state.user._id);\r\n  //these are only the users who have posts\r\n  const usersMap = useSelector<RootState, Dictionary<User>>(state => state.users.entities);\r\n\r\n  const handleSelectConversation = (conversationID) => {\r\n    // console.log(conversationID);\r\n    dispatch(selectConversation({ conversationID }));\r\n\r\n    // console.log(conversationID);\r\n    //fetch messages in current conversation\r\n    dispatch(fetchMessagesInConversation({ conversationID }));\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <span><img src={ComposeIcon} alt=\"\" style={{ float: \"right\" }} onClick={() => {\r\n        dispatch(setNewConversation());\r\n      }}/></span>\r\n\r\n      <span><HeadingText>DIRECT MESSAGES</HeadingText></span>\r\n\r\n      <div style={{ overflowY: \"scroll\" }}>\r\n        {directConv.length > 0 && directConv.map((c) => {\r\n          const otherUserID = c.users.filter((id) => id !== userID)[0];\r\n          const otherUser: User = usersMap[otherUserID];\r\n          return (\r\n            <div onClick={() => handleSelectConversation(c._id)} >\r\n              <Avatar isText={true} pic={otherUser.profilePic} title={otherUser.name} />\r\n            </div>)\r\n        })}\r\n      </div>\r\n\r\n    </>\r\n  )\r\n}\r\n\r\nexport const SideBar = () => {\r\n  // const users = useSelector<RootState, Dictionary<User>>(state => state.users.entities);\r\n  //replace these groups with group chat later\r\n\r\n  return (\r\n    <SideBarContainer>\r\n      {/* <SearchBar></SearchBar> */}\r\n      <div style={{ paddingLeft: \"30px\", paddingRight: \"30px\", marginTop: \"20%\" }}>\r\n\r\n        <DirectMessages></DirectMessages>\r\n\r\n        <CreateGroupChatModal></CreateGroupChatModal>\r\n      </div>\r\n\r\n    </SideBarContainer >\r\n  )\r\n}","import { Dictionary } from \"@reduxjs/toolkit\";\r\nimport React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../reducers/rootReducer\";\r\nimport { Conversation, User } from \"../../store/types\";\r\nimport Avatar from \"../common/Avatar\";\r\nimport styled from '@emotion/styled';\r\nimport { HeadingText } from \"./SideBar\";\r\nimport { ChatHeader } from \"./ChatArea\";\r\n\r\nconst ChatInfoContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 20%;\r\n  height: 92vh;\r\n  box-shadow: 1px 1px 2px 4px #F5F5F5;\r\n`;\r\n\r\nexport const H2 = styled.h2`\r\n  margin-bottom: -1px;\r\n`;\r\n\r\nexport const ChatInfoHeader = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  height: 15vh;\r\n`;\r\nexport const ChatInfo = () => {\r\n  const isGroupConversation = useSelector<RootState, boolean>(state => state.conversations.isGroupConversation);\r\n  const conversations = useSelector<RootState, Dictionary<Conversation>>(state => state.conversations.entities);\r\n  const currentConversationID = useSelector<RootState, string>(state => state.conversations.currentConversationID);\r\n  const currentConversation = conversations[currentConversationID];\r\n  //replace with people in the conversation\r\n  const users = useSelector<RootState, Dictionary<User>>(state => state.users.entities);\r\n\r\n  return (!currentConversation? <></> :\r\n    <ChatInfoContainer>\r\n      <ChatInfoHeader>\r\n        <div style={{ paddingLeft: \"30px\" }}>\r\n          {isGroupConversation ? <H2>Group info</H2> : <H2>Chat info</H2>}\r\n           {/*<p>{currentConversation.createdAt}</p>*/}\r\n          <span>Created Jul 17, 2020</span>\r\n        </div>\r\n      </ChatInfoHeader>\r\n\r\n      {/* <hr></hr> */}\r\n      <div style={{ paddingLeft: \"30px\", paddingTop: \"10px\" }}>\r\n        <HeadingText>PEOPLE</HeadingText>\r\n        {currentConversation.users.map((uID) => (\r\n          <Avatar isText={true} pic={users[uID].profilePic} title={users[uID].name} />\r\n        ))}\r\n      </div>\r\n    </ChatInfoContainer >\r\n  )\r\n}","import Quill from \"quill\";\r\nimport React, { useContext, useEffect, useRef } from \"react\";\r\nimport styled from '@emotion/styled';\r\nimport SendIcon from \"../../icons/sendIcon.svg\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../reducers/rootReducer\";\r\nimport { createMessagePending, fetchMessagesInConversation } from \"../../reducers/messagesSlice\";\r\nimport { CreateMessageBodyDto } from \"../../api\";\r\nimport \"../../App.css\";\r\nimport { createDirectConversationPending, createGroupConversationPending, selectConversation } from \"../../reducers/conversationsSlice\";\r\nimport { NewConversationClientToServerDto } from \"../../ws-dto/messages/messenger.ws.dto\";\r\nimport { Dictionary } from \"@reduxjs/toolkit\";\r\nimport { Conversation } from \"../../store/types\";\r\nimport { SocketContext } from \"../../App\";\r\n\r\nconst Editor = styled.div`\r\n  max-height: 50%;\r\n  height: fit-content;\r\n  width: 63%;\r\n  position: absolute;\r\n  bottom: 50px;\r\n  background-color: white;\r\n  overflow: scroll;\r\n  font-size: medium;\r\n`;\r\n\r\nconst Toolbar = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  position: absolute;\r\n  bottom: 0;\r\n  width: 63%;\r\n  background-color: #D3D3D3;\r\n  padding-left: 30px;\r\n`;\r\n\r\nexport const ChatInput = ({ newMessageSelectedUserIDs }: { newMessageSelectedUserIDs: string[] }) => {\r\n  const editor = useRef<Quill>(null);//handy for keeping any mutable value around similar to how you’d use instance fields in classes.\r\n  const socket = useContext(SocketContext);\r\n  const userID = useSelector<RootState, string>(state => state.user._id);\r\n\r\n  const conversations = useSelector<RootState, Dictionary<Conversation>>(state => state.conversations.entities);\r\n  const conversationID = useSelector<RootState, string>(state => state.conversations.currentConversationID);\r\n  const dispatch = useDispatch();\r\n\r\n  const handleSend = useRef(null);\r\n  // console.log(\"ChatInput render... newMessageSelectedUserIDs\", newMessageSelectedUserIDs);\r\n\r\n  useEffect(() => {\r\n    handleSend.current = () => {\r\n      // get text from editor\r\n      const text = editor.current.root.innerHTML;\r\n\r\n      // if the conversationID is \"\", then the user is starting a new group chat with anonymous name\r\n      if (conversationID === \"\") {\r\n        const dto: NewConversationClientToServerDto = { otherUsers: newMessageSelectedUserIDs, initialMessage: text }\r\n\r\n        if (newMessageSelectedUserIDs.length > 1) {\r\n          socket.current.emit('newConversation', dto);\r\n          dispatch(createGroupConversationPending())\r\n        } else {\r\n          let foundExistingConversation = false;\r\n          for (const conv of Object.values(conversations)) {\r\n            if (conv.users.length !== 2) {\r\n              continue;\r\n            }\r\n            if (conv.users.includes(newMessageSelectedUserIDs[0])) {\r\n              // Select this conversation instead of making a new one\r\n              console.log(\"Found existing conversation!\");\r\n              dispatch(selectConversation({ conversationID: conv._id }));\r\n              dispatch(fetchMessagesInConversation({ conversationID: conv._id }));\r\n\r\n              const messageDto: CreateMessageBodyDto = { conversationID: conv._id, text, userID, createdAt: Date.now()};\r\n              socket.current.emit('newMessage', messageDto);\r\n              dispatch(createMessagePending(messageDto));\r\n              foundExistingConversation = true;\r\n              break;\r\n            }\r\n          }\r\n          if (!foundExistingConversation) {\r\n            socket.current.emit('newConversation', dto);\r\n            dispatch(createDirectConversationPending());\r\n          }\r\n        }\r\n        return;\r\n        // when the back end responds, dispatch is called (in socket.on in messenger/index)\r\n      }\r\n\r\n      //general case, when sending a message\r\n      const createMessageBodyDto: CreateMessageBodyDto = {\r\n        userID,\r\n        conversationID,\r\n        // text: editor.current.getText(),\r\n        text,\r\n        createdAt: Date.now(),\r\n      }\r\n      console.log(createMessageBodyDto);\r\n      socket.current.emit('newMessage', createMessageBodyDto);\r\n      dispatch(createMessagePending(createMessageBodyDto));\r\n      editor.current.setText('');\r\n    }\r\n  }, [conversationID, newMessageSelectedUserIDs]);\r\n\r\n  useEffect(() => {\r\n    editor.current = new Quill('#editor', {\r\n      modules: {\r\n        toolbar: '#toolbar',\r\n        keyboard: {\r\n          bindings: {\r\n            enter: {\r\n              key: 13,\r\n              handler: () => handleSend.current()\r\n            }\r\n          }\r\n        }\r\n      },\r\n      placeholder: 'Send message',\r\n      theme: 'snow'  // or 'bubble'\r\n    });\r\n  }, [])\r\n\r\n  return (\r\n    <>\r\n      <Editor id=\"editor\">\r\n      </Editor>\r\n\r\n      <Toolbar id=\"toolbar\">\r\n        {/* < Add a bold button  */}\r\n        <button className=\"ql-bold\"></button>\r\n        {/* add subscript and superscript buttons */}\r\n        <button className=\"ql-italic\"></button>\r\n        <button className=\"ql-underline\"></button>\r\n        <button className=\"ql-strike\"></button>\r\n        <button className=\"ql-image\"></button>\r\n        <button className=\"ql-code-block\"></button>\r\n        <button className=\"ql-link\"></button>\r\n        <button className=\"ql-blockquote\"></button>\r\n        <button className=\"ql-list\" value=\"ordered\"></button>\r\n        <button className=\"ql-list\" value=\"bullet\"></button>\r\n\r\n        <div style={{ flex: 1 }}></div>\r\n        <p style={{ fontSize: \"small\", fontStyle: \"italic\" }}>\r\n          <strong>Enter</strong> to send&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n          <strong>Shift</strong> + <strong>Enter</strong> to add a new line&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n\r\n        <div style={{ marginRight: \"15px\", marginTop: \"10px\" }}>\r\n          <img src={SendIcon} alt=\"send\" onClick={handleSend.current} />\r\n        </div>\r\n      </Toolbar>\r\n    </>\r\n  )\r\n}","import React, { useEffect, useRef } from \"react\";\r\nimport styled from '@emotion/styled';\r\n\r\nexport const ChatBubble = styled.div<{ isUser: boolean }>`\r\n  margin-left: 2.6em;\r\n  margin-top: ${({ isUser }) => isUser ? \"-1em\" : \"-0.5em\"};\r\n  `\r\n\r\nexport const ChatMessage = ({ content, isUser }) => {\r\n  const chatMessage = useRef(null);\r\n  useEffect(() => {\r\n    chatMessage.current.innerHTML += content;\r\n  }, [content])\r\n\r\n  return (\r\n    <div className=\"ql-snow\" >\r\n      <div className=\"ql-editor\">\r\n        <ChatBubble ref={chatMessage} isUser={isUser} />\r\n      </div>\r\n    </div>\r\n  )\r\n}","import { Dictionary } from \"@reduxjs/toolkit\";\r\nimport React, { useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../reducers/rootReducer\";\r\nimport { User } from \"../../store/types\";\r\nimport { getFollowingFollowersOfUser } from \"../../util/helperFunctions\";\r\nimport AddMultiple from \"../group/AddMuliple\";\r\nimport { ChatHeader } from \"./ChatArea\";\r\nimport { H2 } from \"./ChatInfo\";\r\n\r\n\r\nexport const NewConversation = ({ setPeople }) => {\r\n  const usersMap = useSelector<RootState, Dictionary<User>>(state => state.users.entities);\r\n  const user = useSelector<RootState, User>(state => state.user);\r\n  let followingFollowers: User[] = getFollowingFollowersOfUser(usersMap, user);\r\n\r\n  return (\r\n    <ChatHeader>\r\n      <div style={{ paddingLeft: \"30px\", display: \"flex\", flexDirection: \"row\", alignItems: \"center\" }}>\r\n        <div style={{ display: \"flex\", flexDirection: \"column\", marginLeft: \"20px\" }}>\r\n          <H2>New message</H2>\r\n          {/* <p>ViewProfile</p> */}\r\n          <AddMultiple label=\"To: Select names to send message\" options={followingFollowers} imgKey=\"profilePic\" setItems={setPeople}></AddMultiple>\r\n        </div>\r\n      </div>\r\n    </ChatHeader>\r\n  )\r\n}","import React, {useState} from \"react\";\r\nimport styled from '@emotion/styled';\r\nimport {useSelector} from \"react-redux\";\r\nimport {RootState} from \"../../reducers/rootReducer\";\r\nimport Avatar from \"../common/Avatar\";\r\nimport {Dictionary} from \"@reduxjs/toolkit\";\r\nimport {Conversation, CurrentLoggedInUser, Message, User} from \"../../store/types\";\r\nimport {ChatInfoHeader, H2} from \"./ChatInfo\";\r\nimport {ChatInput} from \"./ChatInput\";\r\n\r\nimport {PendingMessage} from \"../../reducers/messagesSlice\";\r\nimport {ChatMessage} from \"./ChatMessage\";\r\nimport \"../../App.css\";\r\nimport moment from \"moment\";\r\nimport {NewConversation} from \"./NewConversation\";\r\nimport { Loading } from \"../common/Loading\";\r\n\r\nconst ChatAreaContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 63%;\r\n  height: 80vh;\r\n  background-color: white;\r\n`;\r\n\r\nexport const ChatHeader = styled(ChatInfoHeader)`\r\n  border-bottom: 1px solid #F2F2F2;\r\n`;\r\n\r\nconst GroupChatHeader = ({ conversation }: {conversation: Conversation}) => {\r\n  return (\r\n    <ChatHeader>\r\n      <div style={{ paddingLeft: \"30px\" }}>\r\n        <H2>{conversation.name}</H2>\r\n        <span>{conversation.users.length} members&nbsp;&nbsp;&nbsp;&nbsp;</span>\r\n        <span>+ Add member</span>\r\n      </div>\r\n    </ChatHeader >)\r\n}\r\n\r\nconst DirectChatHeader = ({ currentConversation }) => {\r\n  // const user = useSelector<RootState, CurrentLoggedInUser>(state => state.user);\r\n  const userID = useSelector<RootState, string>(state => state.user._id);\r\n\r\n  const users = useSelector<RootState, Dictionary<User>>(state => state.users.entities);\r\n  const otherUserID = currentConversation.users.filter((id) => id !== userID)[0];\r\n  const otherUser: User = users[otherUserID];\r\n  return (\r\n    <ChatHeader>\r\n      <div style={{ paddingLeft: \"30px\", display: \"flex\", flexDirection: \"row\", alignItems: \"center\" }}>\r\n        <div style={{ display: \"flex\", flexDirection: \"column\", marginLeft: \"20px\" }}>\r\n          <H2>{otherUser.name}</H2>\r\n          <p>ViewProfile</p>\r\n        </div>\r\n      </div>\r\n    </ChatHeader>)\r\n}\r\n\r\nexport const ChatArea = () => {\r\n  const user = useSelector<RootState, CurrentLoggedInUser>(state => state.user);\r\n  const users = useSelector<RootState, Dictionary<User>>(state => state.users.entities);\r\n\r\n  const isGroupConversation = useSelector<RootState, boolean>(state => state.conversations.isGroupConversation);\r\n  const isDirectConversation = useSelector<RootState, boolean>(state => state.conversations.isDirectConversation);\r\n\r\n  const conversations = useSelector<RootState, Dictionary<Conversation>>(state => state.conversations.entities);\r\n  const currentConversationID = useSelector<RootState, string>(state => state.conversations.currentConversationID);\r\n  const currentConversation = conversations[currentConversationID];\r\n\r\n  const messages = useSelector<RootState, Dictionary<Message>>(state => state.messages.entities);\r\n  const messagesArr = Object.values(messages).filter((message) => {\r\n    if (currentConversation) {\r\n      return currentConversation.messages.includes(message._id);\r\n    }\r\n  });\r\n\r\n  const pendingMessages = useSelector<RootState, PendingMessage[]>(state => state.messages.pendingMessages);\r\n  const pendingMessagesFromCurrConversation = pendingMessages.filter((msg) => msg.conversationID === currentConversationID);\r\n\r\n  const [people, setPeople] = useState<string[]>([]);\r\n\r\n  const isLoading = useSelector<RootState, boolean>(state => state.conversations.isLoading);\r\n  if (isLoading) {\r\n    return (\r\n      <Loading></Loading>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <ChatAreaContainer>\r\n      {!currentConversation && <NewConversation setPeople={setPeople}></NewConversation>}\r\n      {currentConversation && isGroupConversation && <GroupChatHeader conversation={currentConversation} />}\r\n      {currentConversation && isDirectConversation && <DirectChatHeader currentConversation={currentConversation} />}\r\n\r\n      {/* all messages sent by the server */}\r\n      { currentConversation &&\r\n      <div style={{ paddingTop: \"20px\", overflowY: \"scroll\" }}>\r\n        {messagesArr.map((msg) => {\r\n          return (\r\n            <div style={{ margin: \"10px 40px 10px 40px\" }}>\r\n              {msg.author === user._id ? (\r\n                <>\r\n                  <div className=\"textBlock\" style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n                    <Avatar pic={user.profilePic} title={user.name} isText={true} extraText={moment(msg.createdAt).calendar()}></Avatar>\r\n                    <ChatMessage content={msg.text} isUser={true} />\r\n                  </div>\r\n                </>\r\n              ) :\r\n                <>\r\n                  <div className=\"textBlock\" style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n                    <Avatar pic={users[msg.author].name} title={users[msg.author].name} isText={true} extraText={moment(msg.createdAt).calendar()}></Avatar>\r\n                    <ChatMessage content={msg.text} isUser={false}></ChatMessage>\r\n                  </div>\r\n                </>}\r\n            </div>)\r\n        })}</div>\r\n      }\r\n\r\n      {/* pending message from current user */}\r\n      <div style={{ paddingTop: \"20px\", overflowY: \"scroll\" }}>\r\n        {pendingMessagesFromCurrConversation.map((pendingMsg) => (\r\n          <div style={{ margin: \"10px 40px 10px 40px\" }}>\r\n            <Avatar pic={user.profilePic} title={user.name} subtitle={pendingMsg.text} isText={true} />\r\n            <em style={{ fontSize: \"smaller\", paddingLeft: \"50px\" }}>Sending...</em>\r\n          </div>\r\n        ))}</div>\r\n\r\n      <ChatInput newMessageSelectedUserIDs={people}></ChatInput>\r\n\r\n    </ChatAreaContainer >\r\n  )\r\n}","import React, { useEffect, useRef } from \"react\";\r\nimport { SideBar } from \"./SideBar\";\r\nimport styled from '@emotion/styled';\r\nimport { ChatArea } from \"./ChatArea\";\r\nimport { ChatInfo } from \"./ChatInfo\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../reducers/rootReducer\";\r\nimport io from 'socket.io-client';\r\nimport { createMessageSuccess, fetchMessagesInConversation, receiveNewMessage } from \"../../reducers/messagesSlice\";\r\nimport { BackEndBaseUriForWs, JwtLocalStorageKey } from \"../../constants\";\r\nimport { addConversation, createConversationSuccess } from \"../../reducers/conversationsSlice\";\r\nimport { NewConversationServerToClientDto } from \"../../ws-dto/messages/messenger.ws.dto\";\r\n\r\nexport const ChatContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  padding-top: 8vh;\r\n`;\r\n\r\nexport const Messenger = () => {\r\n  // const userID = useSelector<RootState, string>(state => state.user._id);\r\n  // const dispatch = useDispatch();\r\n\r\n  return (\r\n      <ChatContainer>\r\n        <SideBar />\r\n        <ChatArea />\r\n        <ChatInfo />\r\n      </ChatContainer>\r\n  )\r\n}","import React, {useContext, useRef} from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nimport PurpleButton from \"../common/PurpleButton\";\r\nimport {createCommentPending} from \"../../reducers/commentsSlice\";\r\n\r\nimport { CreateCommentClientToServerDto } from \"../../ws-dto/comments/dto/createComment.ws.dto\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport { SocketContext } from \"../../App\";\r\nimport {RootState} from \"../../reducers/rootReducer\";\r\nimport {Loading} from \"../common/Loading\";\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    marginTop: \"1em\",\r\n  },\r\n  name: {\r\n    fontSize: \"medium\",\r\n    border: \"none\",\r\n    borderRadius: \"5px\",\r\n    width: \"60%\",\r\n    paddingLeft: \"2em\",\r\n    height: \"3em\",\r\n    marginBottom: \"1em\",\r\n  },\r\n  comment: {\r\n    alignContent: \"\",\r\n    height: \"5em\",\r\n  },\r\n});\r\n\r\nconst NewComment = ({postID}) => {\r\n  const socket = useContext(SocketContext);\r\n  const classes = useStyles();\r\n  const inputRef = useRef(null);\r\n  const dispatch = useDispatch();\r\n  const createPending = useSelector<RootState, boolean>(state => state.comments.isLoading);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (inputRef.current.value.trim() === '') {\r\n      return;\r\n    }\r\n    const content = inputRef.current.value.trim();\r\n    const newCommentDto: CreateCommentClientToServerDto = {\r\n      content,\r\n      // parentComment?: string;\r\n      parentPost: postID,\r\n      // parentVideo?: string;\r\n      commentRoot: \"post\",\r\n    };\r\n    socket.current.emit('createComment', newCommentDto);\r\n    dispatch(createCommentPending());\r\n  }\r\n\r\n  if (createPending) {\r\n    return <Loading />\r\n  }\r\n\r\n  return (\r\n    <form className={classes.root} onSubmit={(e) => handleSubmit(e)}>\r\n      <input\r\n        className={`${classes.name} ${classes.comment}`}\r\n        placeholder=\"Type comment\"\r\n        ref={inputRef}\r\n      />\r\n      {/*<input className={classes.name} placeholder=\"Type comment\" />*/}\r\n      <PurpleButton content=\"Post comment\"></PurpleButton>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default NewComment;\r\n","import {Link, useHistory} from \"react-router-dom\";\r\nimport PurpleButton from \"../common/PurpleButton\";\r\nimport React from \"react\";\r\n\r\nfunction UpdateButton(params) {\r\n    const history = useHistory();\r\n\r\n    const handleClick = () => {\r\n        console.log(\"POSTDETAIL::UPDATE\");\r\n        console.log(params);\r\n        console.log(params.slug);\r\n        history.push(`/update-post/${params.slug}`);\r\n    }\r\n    return (<PurpleButton handleClick={handleClick} content={\"Update Post\"}></PurpleButton>);\r\n}\r\n\r\nexport default UpdateButton;","import React from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {RootState} from \"../../reducers/rootReducer\";\r\nimport {Comment, User} from \"../../store/types\";\r\nimport Avatar from \"../common/Avatar\";\r\nimport moment from \"moment\";\r\nimport styled from \"@emotion/styled\";\r\n\r\nconst Container = styled.div`\r\n\r\n`\r\n\r\nconst CommentContent = styled.p`\r\n  margin-left: 3.5em;\r\n  margin-top: -0.35em;\r\n`\r\n\r\nexport function ChildComment({commentID}: {commentID: string}) {\r\n  const comment = useSelector<RootState, Comment>(state => state.comments.entities[commentID]);\r\n  const author = useSelector<RootState, User>(state => state.users.entities[comment?.author]);\r\n\r\n  return (<Container>\r\n    <Avatar pic={author.profilePic}\r\n            small\r\n            title={author.userID} titleSrc={`/user/${author.userID}`}\r\n            subtitle={moment(comment.createdAt).calendar()}\r\n            subtitleIsDate\r\n    ></Avatar>\r\n    <CommentContent>{comment.content}</CommentContent>\r\n  </Container>);\r\n}","import React, {useContext, useRef, useState} from \"react\";\r\nimport styled from \"@emotion/styled\";\r\nimport {RootState} from \"../../reducers/rootReducer\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {Comment, CurrentLoggedInUser, User} from \"../../store/types\";\r\nimport Avatar from \"../common/Avatar\";\r\nimport moment from \"moment\";\r\nimport {ChildComment} from \"./ChildComment\";\r\nimport {Modal} from \"@material-ui/core\";\r\nimport {initializeGitHubOAuth} from \"../login/login\";\r\nimport {SocketContext} from \"../../App\";\r\nimport {CreateCommentClientToServerDto, CreateCommentEvent} from \"../../ws-dto/comments/dto/createComment.ws.dto\";\r\nimport ReplySvg from \"../../assets/reply.svg\";\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport Fade from '@material-ui/core/Fade';\r\n\r\n\r\nconst CommentContent = styled.p`\r\n  margin-left: 3.5em;\r\n  margin-top: -0.35em;\r\n`\r\n\r\nconst TopLevelCommentContainer = styled.div`\r\n\r\n`\r\n\r\nconst ChildCommentsContainer = styled.div`\r\n  margin-left: 5em;\r\n`\r\n\r\nconst CreateCommentReplyContainer = styled.div`\r\n  background-color: white;\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  padding: 1em;\r\n  text-align: center;\r\n`\r\n\r\nconst CreateCommentInfo = styled.p`\r\n  font-style: italic;\r\n  color: gray;\r\n`\r\n\r\nconst CreateCommentReplyInput = styled.input`\r\n  width: 300px;\r\n  font-size: medium;\r\n  padding: 1em;\r\n`\r\n\r\ntype Props = {\r\n  commentID: string;\r\n}\r\n\r\nexport function TopLevelComment({commentID}: Props) {\r\n  const comment = useSelector<RootState, Comment>(state => state.comments.entities[commentID]);\r\n  const author = useSelector<RootState, User>(state => state.users.entities[comment?.author]);\r\n  const [expanded, setExpanded] = useState(false);\r\n  const [openReplyModal, setOpenReplyModal] = useState(false);\r\n  const replyInputRef = useRef(null); // Form input for creating a reply in the modal\r\n  const currentUser = useSelector<RootState, CurrentLoggedInUser>(state => state.user);\r\n  const socket = useContext(SocketContext);\r\n\r\n  if (!comment) {\r\n    console.log('TopLevelComment.tsx.. Comment does not exist in Redux store for ID: ', commentID);\r\n    return <></>;\r\n  }\r\n\r\n  function createCommentReply(event) {\r\n    event.preventDefault();\r\n\r\n    if (replyInputRef.current.value.trim() === '') {\r\n      return;\r\n    }\r\n\r\n    const content = replyInputRef.current.value.trim();\r\n    const dto: CreateCommentClientToServerDto = {\r\n      commentRoot: 'post',\r\n      parentPost: comment.parentPost,\r\n      parentComment: commentID,\r\n      content\r\n    };\r\n    socket.current.emit(CreateCommentEvent, dto);\r\n    setOpenReplyModal(false);\r\n  }\r\n\r\n  function handleClickReply(event) {\r\n    if (!currentUser) {\r\n      // Send user to login\r\n      initializeGitHubOAuth();\r\n      return; // unreacheable\r\n    }\r\n    setOpenReplyModal(true);\r\n  }\r\n\r\n  return (\r\n    <div style={{backgroundColor: expanded ? \"white\" : \"inherit\", borderRadius: \"20px\", paddingLeft: \"1em\", paddingBottom: \"1.5em\", cursor: \"pointer\"}}>\r\n      <TopLevelCommentContainer onClick={() => setExpanded(expanded => !expanded)}>\r\n        <Avatar pic={author.profilePic}\r\n                title={author.userID} titleSrc={`/user/${author.userID}`}\r\n                subtitle={moment(comment.createdAt).calendar()}\r\n                subtitleIsDate\r\n                extraText=\"Reply\"\r\n                extraTextOnClick={handleClickReply}\r\n        ></Avatar>\r\n\r\n      </TopLevelCommentContainer>\r\n      <CommentContent>{comment.content}</CommentContent>\r\n      {expanded && (<ChildCommentsContainer>\r\n        {comment.replies.map(reply => <ChildComment commentID={reply}></ChildComment>)}\r\n      </ChildCommentsContainer>)}\r\n\r\n      <Modal open={openReplyModal} onClose={() => setOpenReplyModal(false)} closeAfterTransition\r\n             BackdropComponent={Backdrop} BackdropProps={{timeout: 500}}>\r\n        <Fade in={openReplyModal}>\r\n          <CreateCommentReplyContainer>\r\n            <img height={80} src={ReplySvg} alt=\"Reply\"/>\r\n            <CreateCommentInfo>Reply to {author.userID}</CreateCommentInfo>\r\n            <form onSubmit={createCommentReply}>\r\n              <CreateCommentReplyInput ref={replyInputRef} placeholder=\"Type comment\"/>\r\n            </form>\r\n          </CreateCommentReplyContainer>\r\n        </Fade>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}","import { CommentDto } from './getCommentsByPostID.ws.dto';\r\n\r\nexport const CreateCommentEvent = \"createComment\";\r\nexport const CreateCommentInvalidPostErrorString = \"Cannot create comment -- invalid Post ID\";\r\nexport const CreateCommentInvalidParentCommentErrorString = \"Cannot create comment -- invalid parent comment ID\";\r\n\r\nexport class CreateCommentClientToServerDto {\r\n  content: string;\r\n  parentComment?: string;\r\n  parentPost?: string;\r\n  parentVideo?: string;\r\n  commentRoot: string;\r\n}\r\n\r\nexport class CreateCommentServerToClientDto {\r\n  comment: CommentDto;\r\n}","import React, {useContext, useEffect, useState} from \"react\";\r\nimport styled from \"@emotion/styled\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {RootState} from \"../../reducers/rootReducer\";\r\nimport {Dictionary} from \"@reduxjs/toolkit\";\r\nimport {Comment, Post} from \"../../store/types\";\r\nimport {Loading} from \"../common/Loading\";\r\nimport WriteThefirstComment from \"../../assets/write_the_first_comment.svg\";\r\nimport Avatar from \"../common/Avatar\";\r\nimport {SocketContext} from \"../../App\";\r\nimport {\r\n  GetCommentsByPostIDEvent,\r\n  GetCommentsClientToServerDto\r\n} from \"../../ws-dto/comments/dto/getCommentsByPostID.ws.dto\";\r\nimport {TopLevelComment} from \"./TopLevelComment\";\r\n\r\nconst Container = styled.div`\r\n\r\n`\r\n\r\nconst NoCommentsContainer = styled.div`\r\n  text-align: center;\r\n`\r\n\r\nconst SubtleEncouragement = styled.p`\r\n  color: gray;\r\n  font-style: italic;\r\n`\r\n\r\nfunction postHasNoComments() {\r\n  return (<NoCommentsContainer>\r\n    <SubtleEncouragement>No comments yet...</SubtleEncouragement>\r\n    <img height={150} src={WriteThefirstComment} alt='Write the first comment'/>\r\n    <SubtleEncouragement>Write the first comment below!</SubtleEncouragement>\r\n  </NoCommentsContainer>)\r\n}\r\n\r\nexport function Comments({postID}:{postID?:string}) {\r\n  const post = useSelector<RootState, Post>(state => state.posts.entities[postID]);\r\n  const fetchedComments = useSelector<RootState, boolean>(state => state.posts.fetchedComments[postID]);\r\n  const socket = useContext(SocketContext);\r\n\r\n  // Emit fetch comments WS event if needed\r\n  useEffect(() => {\r\n    console.log('post_detail/Comments.tsx useEffect, postID:', postID)\r\n    if (postID && !fetchedComments) {\r\n      const dto: GetCommentsClientToServerDto = {postID};\r\n      socket.current.emit(GetCommentsByPostIDEvent, dto);\r\n      console.log('post_detail/Comments.tsx useEffect -- emitting ', GetCommentsByPostIDEvent);\r\n    }\r\n  }, [postID]);\r\n\r\n  const topLevelComments = useSelector<RootState, string[]>(state => {\r\n    const ret = [];\r\n    post?.comments?.forEach(commentID => {\r\n      const comment = state.comments.entities[commentID];\r\n      if (comment && !comment.parentComment) {\r\n        // top level comment if it has no parentComment\r\n        ret.push(commentID);\r\n      }\r\n    });\r\n    return ret;\r\n  });\r\n\r\n  if (!post?.content) {\r\n    console.log('post_detail/Comments.tsx render .. post is not loaded');\r\n    return <Loading />\r\n  }\r\n\r\n  if (post.comments.length === 0) {\r\n    return postHasNoComments();\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      {topLevelComments.map(commentID => <TopLevelComment commentID={commentID}/>)}\r\n    </Container>\r\n  )\r\n}","export const GetCommentsByPostIDEvent = \"getCommentsByPostID\";\r\n\r\nexport class GetCommentsServerToClientDto {\r\n  postID: string;\r\n  comments: CommentDto[];\r\n  authors: CommentAuthorDto[];\r\n}\r\n\r\nexport class GetCommentsClientToServerDto {\r\n  postID: string;\r\n}\r\n\r\nexport class CommentDto {\r\n  _id: string;\r\n  author: string;\r\n  content: string;\r\n  commentRoot: string;\r\n  replies?: string[];\r\n  likes: number;\r\n  parentPost?: string;\r\n  parentComment?: string;\r\n  parentVideo?: string;\r\n  createdAt: number;\r\n}\r\n\r\nexport class CommentAuthorDto {\r\n  _id: string;\r\n  userID: string;\r\n  name: string;\r\n  profilePic?: string;\r\n}\r\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nconst useStyles = makeStyles({\n  root: {\n    backgroundColor: \"red\",\n    color: \"white\",\n    width: \"fit-content\",\n    height: \"2em\",\n    border: \"none\",\n    borderRadius: \"10px\",\n    fontSize: \"15px\",\n    padding: \"10px\",\n    display: \"flex\",\n    alignItems: \"center\",\n  },\n});\n\nconst RedButton = ({ handleClick, params, content }: { handleClick?: (params) => any, params?: any, content: string }) => {\n  const classes = useStyles();\n  return <button onClick={handleClick} className={classes.root}>{content}</button>;\n};\nexport default RedButton;\n","import {useHistory} from \"react-router-dom\";\nimport RedButton from \"../common/RedButton\";\nimport React, {useState} from \"react\";\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport {Button} from \"@material-ui/core\";\nimport {useDispatch} from \"react-redux\";\nimport {Loading} from \"../common/Loading\";\nimport { deletePost } from \"../../reducers/postsSlice\";\nimport {PostsApi} from \"../../api\";\n\nfunction DeletePostButton({postID}: { postID: string }) {\n  const history = useHistory();\n  const [open, setOpen] = useState(false);\n  const dispatch = useDispatch();\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleClick = () => {\n    handleClose();\n    new PostsApi().postsControllerDeletePostByPostID(postID).then(() => {console.log('Confirmed optimistic post deletion from backend!')})\n      .catch(console.log);\n    dispatch(deletePost({postID}));\n    history.push('/');\n  }\n\n  if (!postID) {\n    return <Loading/>\n  }\n\n  return (<>\n    <RedButton handleClick={handleClickOpen} content={\"Delete Post\"}></RedButton>\n    <Dialog\n      open={open}\n      onClose={handleClose}\n      aria-labelledby=\"alert-dialog-title\"\n      aria-describedby=\"alert-dialog-description\"\n    >\n      <DialogTitle id=\"alert-dialog-title\">{\"Delete this post?\"}</DialogTitle>\n      <DialogContent>\n        <DialogContentText id=\"alert-dialog-description\">\n          Note: this action is irreversible\n        </DialogContentText>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={handleClick} color=\"secondary\" autoFocus>\n          Confirm Delete\n        </Button>\n      </DialogActions>\n    </Dialog>\n  </>);\n}\n\nexport default DeletePostButton;\n","import {makeStyles} from '@material-ui/core/styles';\nimport React, {useEffect, useState} from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {Redirect, useParams} from 'react-router-dom';\nimport {PostDetailParams} from '../../App';\nimport Avatar from '../common/Avatar';\nimport {Loading} from '../common/Loading';\nimport {NotFoundError} from '../common/NotFoundError';\nimport NewComment from './NewComment';\nimport UpdateButton from './UpdateButton';\nimport {RootState} from '../../reducers/rootReducer';\nimport {fetchPostBySlug} from '../../reducers/postsSlice';\nimport {CurrentLoggedInUser, Post, User} from '../../store/types';\nimport {AppDispatch} from '../../store';\nimport defaultPostFeaturedImage from \"../../assets/defaultPostFeaturedImage.jpg\";\nimport {PostsApi} from \"../../api\";\nimport {useLikePost} from \"../../hooks/useLikePost\";\nimport CommentIcon from \"../../icons/commentIcon.svg\";\nimport HeartIcon from \"../../icons/heartIcon.svg\";\nimport HeartIconRed from \"../../icons/heartIconRed.svg\";\nimport BookmarkEmpty from \"../../icons/bookmarkEmpty.svg\";\nimport {Comments} from \"./Comments\";\nimport DeletePostButton from \"./DeletePostButton\";\n\nconst useStyles = makeStyles({\n  root: {\n    display: \"flex\",\n    flexDirection: \"column\",\n  },\n  postDetail: {\n    paddingTop: \"10vh\",\n    // paddingBottom: \"20vh\",\n    width: \"60vw\",\n    margin: \"0 auto\",\n  },\n  interactions: {\n    display: \"flex\",\n    flexDirection: \"row\",\n  },\n  shareIcon: {\n    marginLeft: \"2em\",\n    width: \"1.5em\",\n  },\n  heartIcon: {\n    width: \"1.3em\",\n  },\n  interactionsIcons: {\n    display: \"flex\",\n    justifyContent: \"flex-start\",\n    flexDirection: \"row\",\n    alignContent: \"center\",\n    marginTop: \"6vh\",\n  },\n});\n\nconst Interactions = () => {\n  return <> </>\n}\n\nconst PostDetail = () => {\n  const {slug} = useParams<PostDetailParams>(); //get the url param to render the appropriate post\n  const classes = useStyles();\n  const dispatch = useDispatch<AppDispatch>();\n  const currentUser = useSelector<RootState, CurrentLoggedInUser>(state => state.user);\n\n  // const slugtoid = useSelector<RootState, Record<string, string>>(state => state.posts.slugToID);\n  const {post, author} = useSelector<RootState, { post: Post, author: User }>(state => {\n    const postID = state.posts.slugToID[slug];\n    if (!postID) {\n      return {post: null, author: null};\n    }\n    const post = state.posts.entities[postID];\n    const author = state.users.entities[post.author];\n    return {post, author};\n  });\n\n  const {postIsLikedByUser, handleToggleLike} = useLikePost(post?._id);\n\n  let canUpdate = false; // if the current user is the author, show an 'update post' button\n  if (author !== null) {\n    canUpdate = currentUser !== null && currentUser._id === author._id;\n  }\n\n  const [error, setError] = useState(null);\n\n  let featuredImg: string;\n  if (!post?.featuredImg) {\n    featuredImg = defaultPostFeaturedImage;\n  } else {\n    featuredImg = post.featuredImg;\n  }\n\n  useEffect(() => {\n    if (slug == null || slug === \"\") {\n      return;\n    }\n    if (!post?.content) {\n      // automatically increments view count in PostService\n      dispatch(fetchPostBySlug({slug, getAuthor: !author})).catch(setError);\n    } else {\n      // increment view count if don't need to fetch the post\n      new PostsApi().postsControllerIncrementView(post._id).then(() => console.log(\"Already had post. Incremented view count.\")).catch(console.log);\n    }\n  }, []);\n\n  if (slug == null || slug === \"\") {\n    return <Redirect to=\"/\"/>\n  }\n\n  if (!post?.content || !author) {\n    return <Loading/>\n  }\n\n  if (error) {\n    return <NotFoundError/> // TODO: add something for server error\n  }\n\n  // post has item with content\n  // const likedByUser = isLoggedIn && post.likedByUser;\n\n  return (\n    <div className={classes.root}>\n      <div className={classes.postDetail}>\n        <img\n          src={featuredImg}\n          style={{height: \"20em\", objectFit: \"cover\", width: \"100%\"}} alt=\"featured\"\n        />\n        <h1>{post.title}</h1>\n\n        <Avatar pic={author.profilePic} title={author.userID} subtitle={post.createdAt} isPost={true}\n                extraText=\"follow\" isButton={true}></Avatar>\n\n        <p>{post.content}</p>\n\n        <Interactions/>\n        <div className={classes.interactionsIcons}>\n          <span>\n            <img className={classes.heartIcon} src={postIsLikedByUser ? HeartIconRed : HeartIcon} alt=\"\"\n                 onClick={() => {\n                   handleToggleLike()\n                   ;\n                 }}/>&nbsp;&nbsp;{post.likes}\n          </span>\n          <span>\n            <img className={classes.shareIcon} src={CommentIcon} alt=\"\"/>\n            &nbsp;&nbsp;{post.commentsCount}\n          </span>\n          <span>\n            <img className={classes.shareIcon} src={BookmarkEmpty} alt=\"\"/>\n            &nbsp;&nbsp;Save\n          </span>\n        </div>\n\n        <hr></hr>\n        <Comments postID={post._id}></Comments>\n        <NewComment postID={post._id}></NewComment>\n        <div style={{height: \"20px\"}}/>\n        {canUpdate && <UpdateButton params={slug}/>}\n        <div style={{height: \"20px\"}}/>\n        {canUpdate && <DeletePostButton postID={post?._id}/>}\n      </div>\n    </div>\n  );\n};\n\nexport default PostDetail;\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n}));\r\n\r\nexport default function TagCard() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div>\r\n      <Button variant=\"contained\" color=\"secondary\" className={classes.button} endIcon={<CloseIcon/>}>Cpp\r\n      </Button>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n// import { useDispatch, useSelector } from \"react-redux\";\r\n// import { RootState, SavedPost, CurrentViewedPost, Tag } from \"../../initialData\";\r\nimport TagCard from \"./TagCard\";\r\n\r\nconst useStyles = makeStyles({\r\n  rightbar: {\r\n    width: \"20vw\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    // height: \"100%\",\r\n    cursor: \"pointer\",\r\n    paddingLeft: \"2em\",\r\n    paddingTop: \"5vh\",\r\n    marginRight: \"5vw\",\r\n  },\r\n  title: {\r\n    fontSize: \"1em\"\r\n  },\r\n  search: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    height: \"40vh\",\r\n    overflowY: \"auto\",\r\n  },\r\n  searchoption: {\r\n    fontSize: \"1em\"\r\n  },\r\n  filter: {\r\n    height: \"56vh\",\r\n    display: \"flex\",\r\n  },\r\n  display: {\r\n    fontWeight: \"bold\",\r\n    marginBottom: \"1em\",\r\n  },\r\n  filtertags: {\r\n  }\r\n});\r\n\r\nexport default function RightSideBar() {\r\n  const classes = useStyles();\r\n  // const dispatch = useDispatch();\r\n  // const currViewedPost = useSelector<RootState, CurrentViewedPost>(\r\n  //   (state) => state.currentViewedPost\r\n  // );\r\n  // const savedPosts = useSelector<RootState, SavedPost[]>(\r\n  //   (state) => state.savedPosts\r\n  // );\r\n\r\n  // const tags = useSelector<RootState, Tag[]>((state) => state.tags);\r\n\r\n  return (\r\n    <div className={classes.rightbar}>\r\n      <div className={classes.search}>\r\n        <p className={classes.title}># Search</p>\r\n        <hr className={classes.display}></hr>\r\n        <div className={classes.searchoption}>\r\n          <input type=\"checkbox\" checked />\r\n          <label>posts</label>\r\n          <br></br>\r\n          <input type=\"checkbox\" />\r\n          <label>users</label>\r\n          <br></br>\r\n          <input type=\"checkbox\" />\r\n          <label>videos</label>\r\n        </div>\r\n      </div>\r\n      <div className={classes.filter}>\r\n        <p className={classes.title}># Filter by</p>\r\n        <hr className={classes.display}></hr>\r\n        <div className={classes.filtertags}>\r\n          <TagCard />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import { makeStyles } from '@material-ui/core/styles';\r\nimport React from 'react';\r\n\r\nimport Main from '../home/Main';\r\nimport RightSideBar from './RightSideBar';\r\n\r\nconst useStyles = makeStyles({\r\n  home: {\r\n    paddingTop: \"7vh\",\r\n    display: \"flex\",\r\n  },\r\n});\r\n\r\nexport default function Home() {\r\n  const classes = useStyles();\r\n  return (\r\n    <div className={classes.home}>\r\n      <Main />\r\n      <RightSideBar />\r\n    </div>\r\n  );\r\n}\r\n","import * as React from \"react\";\r\nimport {useState} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootState} from \"../../reducers/rootReducer\";\r\nimport {Dictionary, unwrapResult} from \"@reduxjs/toolkit\";\r\nimport {User} from \"../../store/types\";\r\nimport {convertArrToMap} from \"../../util/helperFunctions\";\r\nimport {AppDispatch} from \"../../store\";\r\nimport {useEffect} from \"react\";\r\nimport {fetchUsersByIDs} from \"../../reducers/usersSlice\";\r\nimport {Loading} from \"../common/Loading\";\r\nimport ErrorPage from \"../common/ErrorPage\";\r\nimport {uploadPublicAsset} from \"../../api-upload\";\r\nimport {createGroup} from \"../../reducers/groupsSlice\";\r\nimport ImageUploader from \"react-images-upload\";\r\nimport {TextFields} from \"../group/TextFields\";\r\nimport AddMultiple from \"../group/AddMuliple\";\r\nimport RadioButtons from \"../group/RadioButtons\";\r\nimport PurpleButton from \"../common/PurpleButton\";\r\n\r\n// export const VideoUpload = ({ handleClose }) => {\r\n//     const [people, setPeople] = useState<string[]>([]);\r\n//     const [video, setVideo] = useState<File>(null);\r\n//     const [name, setName] = useState(\"\");\r\n//     const [description, setDescription] = useState(\"\");\r\n//\r\n//     const [loading, setLoading] = useState(false);\r\n//     const [error, setError] = useState(null);\r\n//     // const [creatingGroupLoading, setCreatingGroupLoading] = useState(false);\r\n//\r\n//     const dispatch = useDispatch<AppDispatch>();\r\n//\r\n//     if (error) {\r\n//         return <ErrorPage error={error} />\r\n//     }\r\n//\r\n//     const handleVideoChange = video => {\r\n//             // picture is an array containing 1 file\r\n//             setVideo(video[0]);\r\n//         }\r\n//     ;\r\n//\r\n//     const handleSubmit = async (e) => {\r\n//         e.preventDefault();\r\n//\r\n//         // Upload images if they exist\r\n//         let video: string;\r\n//         // upload profile pic\r\n//         if (video) {\r\n//             // TODO: show loading while uploading\r\n//             video = await uploadPublicAsset(video);\r\n//         }\r\n//\r\n//         const group = {\r\n//             name,\r\n//             description,\r\n//             users: people,\r\n//             video,\r\n//             path: \"\",\r\n//             preview: null,\r\n//             data: null\r\n//         };\r\n//         this.changePath = this.changePath.bind(this);\r\n//\r\n//     }\r\n//\r\n//     return (\r\n//         <>\r\n//             {\r\n//                 <form onSubmit={handleSubmit}>\r\n//                     {/* https://github.com/jakehartnell/react-images-upload#readme */}\r\n//                     <div style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\" }}>\r\n//                         <ImageUploader\r\n//                             // {...props}\r\n//                             buttonText='Upload video'\r\n//                             withPreview={true}\r\n//                             withIcon={true}\r\n//                             onChange={handleBannerImageChange}\r\n//                             imgExtension={[\".jpg\", \".jpeg\", \".gif\", \".png\", \".gif\"]}\r\n//                             maxFileSize={5242880}\r\n//                             singleImage={true}\r\n//                             buttonStyles={{ backgroundColor: \"#6a6a6a\" }}\r\n//                         />\r\n//                         {/* <div style={{ width: \"20px\" }}></div> */}\r\n//                         <ImageUploader\r\n//                             // {...props}\r\n//                             buttonText='Upload profile pic'\r\n//                             withPreview={true}\r\n//                             withIcon={false}\r\n//                             onChange={handleProfilePicChange}\r\n//                             imgExtension={[\".jpg\", \".jpeg\", \".gif\", \".png\", \".gif\"]}\r\n//                             maxFileSize={5242880}\r\n//                             style={{ width: \"50%\" }}\r\n//                             singleImage={true}\r\n//                             buttonStyles={{ backgroundColor: \"#6a6a6a\" }}\r\n//                         />\r\n//                     </div>\r\n//\r\n//                     <TextFields name=\"Add Group Name\" description=\"Add Group Description\" setName={setName} setDescription={setDescription} />\r\n//\r\n//                     {/* https://material-ui.com/components/autocomplete/#Tags.tsx */}\r\n//                     <TextWrapper>\r\n//                         <AddMultiple label=\"Add People\" options={followingFollowers} imgKey=\"profilePic\" setItems={setPeople} />\r\n//                     </TextWrapper>\r\n//\r\n//                     <div style={{ height: \"25px\" }}></div>\r\n//\r\n//                     <TextWrapper>\r\n//                         <RadioButtons setItem={setPrivate} />\r\n//                     </TextWrapper>\r\n//\r\n//                     <DialogActions>\r\n//                         <div>\r\n//                             <PurpleButton content=\"Create group\" />\r\n//                         </div>\r\n//                     </DialogActions>\r\n//                 </form>}\r\n//         </>\r\n//     )\r\n// }\r\n\r\n\r\n\r\nexport interface IProps {\r\n  closeOverlay: any;\r\n  // setUrl:any;\r\n}\r\n\r\nexport interface IState {\r\n  name: string;\r\n  path: string;\r\n  preview: any;\r\n  data: any;\r\n}\r\n\r\nclass VideoUpload extends React.Component<IProps, IState> {\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = {\r\n      name: \"\",\r\n      path: \"\",\r\n      preview: null,\r\n        data: null,\r\n    };\r\n    this.changePath = this.changePath.bind(this);\r\n    this.upload = this.upload.bind(this);\r\n    this.cancel = this.cancel.bind(this);\r\n  }\r\n\r\n\r\n  //change the path and autoPlay\r\n  changePath(e: any) {\r\n    console.log(e.target.files.length);\r\n    //for loop to implement multiple files uploading\r\n    for (var i = 0; i < e.target.files.length; i++) {\r\n      const file = e.target.files[i];\r\n      console.log(file);\r\n      if (!file) {\r\n        return;\r\n      }\r\n      let { src, preview } = file;\r\n      src = URL.createObjectURL(file);\r\n      preview = <video src={src} height={450} width={800} autoPlay controls />;\r\n      this.setState({\r\n        path: file.name,\r\n        data: file,\r\n        preview: preview\r\n      });\r\n    }\r\n  }\r\n\r\n\r\n  //file upload\r\n  upload(event) {\r\n      event.preventDefault();  // let the website wont refresh after click upload\r\n    const data = this.state.data;\r\n    const url = \"\";\r\n      // uploadPublicAsset(data).then(res => {this.props.setUrl(res)});  //uploadPublicAsset return promise\r\n      uploadPublicAsset(data).then(res => {console.log(res)}); // res(url), after upload a file, click the link on console and will show the uploaded file\r\n\r\n      // const form = new FormData();\r\n    // form.append(\"file\", data);\r\n    // fetch(url, {\r\n    //   method: \"POST\",\r\n    //   body: form\r\n    // }).then(res => {\r\n    //   console.log(res);\r\n    // });\r\n    // console.log(this.state.name);\r\n\r\n    //show file uploaded\r\n    alert(this.state.path.toString() + \" is successfully uploaded!\");\r\n  }\r\n\r\n  //cancel file playing\r\n  cancel() {\r\n    this.props.closeOverlay();\r\n  }\r\n\r\n  render() {\r\n    const { path, preview } = this.state;\r\n    return (\r\n      <div>\r\n        <div className=\"row\">\r\n          <div className=\"row-input\">\r\n            <span\r\n            style={{\r\n                    fontFamily: \"Arial\",\r\n            //         fontSize: \"1.5em\"\r\n            }}\r\n            >\r\n            {path ? path : \"Choose files\"}</span>\r\n            <br />\r\n            <input\r\n              type=\"file\"\r\n              accept=\"video\"\r\n              multiple\r\n              onChange={this.changePath}\r\n              style={{\r\n              fontFamily: \"Arial\",\r\n      //         fontSize: \"1.5em\"\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <button\r\n        className=\"primary upload\"\r\n        onClick={this.upload}\r\n        style={{\r\n        fontFamily: \"Arial\",\r\n//         fontSize: \"0.5em\"\r\n        }}\r\n        >\r\n          upload\r\n        </button>\r\n        &nbsp;\r\n        <button\r\n        className=\"primary cancel\"\r\n        onClick={this.cancel}\r\n        style={{\r\n        fontFamily: \"Arial\",\r\n//         fontSize: \"1.5em\"\r\n        }}\r\n        >\r\n          cancel\r\n        </button>\r\n        <div\r\n        className=\"media\"\r\n        style={{\r\n          alignItems: \"center\",\r\n           display: \"flex\",\r\n           flex: 1,\r\n           flexDirection: \"column\",\r\n          }}\r\n          >\r\n          {preview}</div> {/* video content */}\r\n        <br />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default VideoUpload;","import * as React from \"react\";\r\nimport GroupList from \"../create_post/GroupList\";\r\nimport VideoUpload from \"./VideoUpload\";\r\nimport { fade, makeStyles } from \"@material-ui/core/styles\";\r\nimport {useState} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootState} from \"../../reducers/rootReducer\";\r\nimport {Dictionary, unwrapResult} from \"@reduxjs/toolkit\";\r\nimport {User} from \"../../store/types\";\r\nimport {convertArrToMap} from \"../../util/helperFunctions\";\r\nimport {AppDispatch} from \"../../store\";\r\nimport {useEffect} from \"react\";\r\nimport {fetchUsersByIDs} from \"../../reducers/usersSlice\";\r\nimport {Loading} from \"../common/Loading\";\r\nimport ErrorPage from \"../common/ErrorPage\";\r\nimport {uploadPublicAsset} from \"../../api-upload\";\r\nimport {createGroup} from \"../../reducers/groupsSlice\";\r\n\r\nconst _onVideoUpload = (event) => {\r\n\t// event.preventDefault();\r\n\t// alert(this.url);\r\n\t// this.props.setVideo(this.url);\r\n}\r\n\r\nconst _onChange = (event) => {\r\n\t// this.url = event.target.value;\r\n}\r\n\r\nconst _omVideoRm = (event) => {\r\n\t// event.preventDefault();\r\n\t// this.url = '';\r\n\t// this.props.setVideo('');\r\n}\r\n\r\n\r\nexport interface IProps {\r\n    // setUrl: any;\r\n}\r\n\r\nexport interface IState {\r\n  overlayActive: any;\r\n}\r\n\r\nclass VideoPanel extends React.Component<IProps, IState> {\r\n\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = {\r\n      overlayActive: true\r\n    };\r\n    this.closeOverlay = this.closeOverlay.bind(this);\r\n    this.showOverlay = this.showOverlay.bind(this);\r\n  }\r\n\r\n  closeOverlay() {\r\n    this.setState({\r\n      overlayActive: false\r\n    });\r\n  }\r\n\r\n  showOverlay() {\r\n    this.setState({\r\n      overlayActive: true\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n      className={\"root\"}\r\n      style={{\r\n      marginTop: \"3em\",\r\n      display: \"flex\",\r\n      flexDirection: \"column\",\r\n      height: \"30vh\",\r\n      width: \"40vw\",\r\n      backgroundColor: \"white\",\r\n      boxShadow: \"3px 3px #F2F2F2\",\r\n      marginBottom: \"1em\",\r\n      borderRadius: \"5px\",\r\n      paddingLeft: \"1.5em\",\r\n      paddingRight: \"1.5em\",\r\n      }}\r\n       >\r\n        <form onSubmit={_onVideoUpload}>\r\n            <button\r\n            className={\"button\"}\r\n            onClick={this.showOverlay}\r\n            style={{\r\n            border: \"none\",\r\n            outline: \"none\",\r\n            borderRadius: \"5px\",\r\n            margin: \"1em auto\",\r\n            width: \"100%\",\r\n            height: \"7vh\",\r\n            backgroundColor: \"#F2F2F2\",\r\n            fontFamily: \"Arial\",\r\n            fontSize: \"1.5em\"\r\n            }}\r\n            >\r\n            Upload Video\r\n            </button>\r\n          {this.state.overlayActive && (\r\n            // <VideoUpload closeOverlay={this.closeOverlay} setUrl={this.props.setUrl}/>\r\n              <VideoUpload closeOverlay={this.closeOverlay} />\r\n          )}\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default VideoPanel;\r\n\r\n","import React, {useEffect, useState} from \"react\";\r\nimport {Redirect, useParams} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppDispatch} from \"../../store\";\r\nimport {RootState} from \"../../reducers/rootReducer\";\r\nimport {Post, Tag} from \"../../store/types\";\r\nimport defaultPostFeaturedImage from \"../../assets/defaultPostFeaturedImage.jpg\";\r\nimport {fetchPostBySlug} from \"../../reducers/postsSlice\";\r\nimport {Loading} from \"../common/Loading\";\r\nimport {NotFoundError} from \"../common/NotFoundError\";\r\nimport VideoP from \"../create_video_post/VideoPanel\";\r\nimport TextP from \"../create_post/TextPanel\";\r\nimport AddMultiple from \"../group/AddMuliple\";\r\nimport Submit from \"../create_post/Submit\";\r\nimport {TagsContainer} from \"../create_post/CreatePost\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Dictionary, unwrapResult} from \"@reduxjs/toolkit\";\r\n\r\nimport styled from \"@emotion/styled\";\r\nimport ImgP from \"../create_post/ImgPanel\";\r\n\r\nconst useStyles = makeStyles({\r\n    createPost: {\r\n        paddingTop: \"7vh\",\r\n        paddingBottom: \"7vh\",\r\n        // paddingTop: \"3em\",\r\n        display: \"flex\",\r\n        flex: 1,\r\n        flexDirection: \"column\",\r\n        height: \"110vh\",\r\n        alignItems: \"center\",\r\n        // overflowY: \"scroll\",\r\n    }\r\n});\r\n\r\nexport default function CreateVideoPost() {\r\n    const classes = useStyles();\r\n    const [title, setTitle] = useState('');\r\n    const [content, setContent] = useState('');\r\n    const [postTags, setPostTags] = useState([]);\r\n    // const [url, setUrl] = useState('');\r\n    const allTags = useSelector<RootState, Dictionary<Tag>>(state => state.tags.entities);\r\n    const allTagsArr = Object.values(allTags);\r\n\r\n    // function submitVideo() {\r\n        // const\r\n    // }\r\n\r\n    return (\r\n        <div className={classes.createPost}>\r\n            {/*<VideoP setUrl={setUrl}/>*/}\r\n            <VideoP />\r\n            <TextP setTitle={setTitle} setContent={setContent} />\r\n            {/* <TagP setTags={setTags} /> */}\r\n            <TagsContainer>\r\n                <AddMultiple label=\"Add Tags\" options={allTagsArr} setItems={setPostTags} />\r\n            </TagsContainer>\r\n            {/*<button onClick={submitVideo}/>*/}\r\n            {/*<Submit title={title} content={content} tags={postTags} img={featuredImg} />*/}\r\n            <Submit title={title} content={content} tags={postTags} />\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { createStyles, makeStyles } from \"@material-ui/core/styles\";\r\nimport {ImageType} from \"../../constants\";\r\nimport {UpdateImageModal} from \"../common/UpdateImageModal\";\r\n\r\nconst useStyles = makeStyles(() =>\r\n  createStyles({\r\n    bannerImg: {\r\n      maxHeight: \"284px\",\r\n      marginLeft: \"10%\",\r\n      width: \"80%\",\r\n      objectFit: \"none\",\r\n    },\r\n  })\r\n);\r\n\r\nexport function ProfileBanner({ imgSrc }) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div style={{ height: \"284px\" }}>\r\n      <img className={classes.bannerImg} src={imgSrc} alt=\"banner\"></img>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\nimport styled from '@emotion/styled';\nimport { User } from \"../../store/types\";\nimport { useFollow, UseFollowHook } from \"../../hooks/useFollow\";\nimport { Loading } from \"../common/Loading\";\n\nexport const TradingCardContainer = styled.div`\n  height: 450px;\n  width: 288px;\n  background-color: white;\n  border-radius: 20px;\n  display: flex;\n  flex-direction: column;\n`\n\nexport const AvatarPic = styled.img`\n  margin-top: 19px;\n  margin-left: 98px;\n  margin-right: 98px;\n  width: 92px;\n  height: 92px;\n  border-radius: 100px;\n`\n\nexport const AllCapsName = styled.h3`\n  padding: 0;\n  margin-top: 16px;\n  margin-bottom: 0;\n  font-family: Roboto, sans-serif;;\n  font-style: normal;\n  font-weight: bold;\n  font-size: 24px;\n  color: #000000;\n  text-align: center;\n`\n\nexport const Subtitle = styled.h4`\n  margin-top: 4px;\n  padding: 0;\n  font-family: Roboto, sans-serif;;\n  font-style: normal;\n  font-weight: normal;\n  font-size: 20px;\n  line-height: 23px;\n  color: #000000;\n  text-align: center;\n`;\n\nexport const FollowersAndPostsCountContainer = styled.div`\n  display: flex;\n\n`\n\nexport const FollowersCountContainer = styled.div`\n  font-family: Roboto, sans-serif;;\n  font-style: normal;\n  font-weight: 300;\n  font-size: 18px;\n  line-height: 21px;\n  padding: 0;\n  margin: 0;\n\n  color: #000000;\n`\n\nexport const PostsCountContainer = FollowersCountContainer;\n\nexport const BigBoldNumber = styled.p`\n  padding: 0;\n  margin: 0;\n  font-family: Roboto, sans-serif;;\n  font-style: normal;\n  font-weight: bold;\n  font-size: 24px;\n  line-height: 28px;\n  color: #000000;\n`\n\nexport const SpaceBetweenFollowersAndPosts = styled.div`\n  width: 87px;\n`\n\nexport const SpaceAround = styled.div`\n  flex: 1;\n`\n\nexport const TradingCardButton = styled.button`\n  margin-bottom: 23px;\n  margin-left: 73px;\n  margin-right: 73px;\n  background: #FFFFFF;\n  border: 1px solid #000000;\n  box-sizing: border-box;\n  width: 141px;\n  height: 38px;\n  border-radius: 10px;\n  font-family: Roboto, sans-serif;\n  font-style: normal;\n  font-weight: 500;\n  font-size: 18px;\n  line-height: 21px;\n`\n\n// https://www.figma.com/file/ehowTfq9OAMUdMf3Qbngi0/Programmers-Social-Network?node-id=50%3A0\n// Can be adapted to work for groups as well, need to change props\nexport function TradingCard({ user, isCurrentUser, followHook }: { user: User, isCurrentUser?: boolean, followHook?: UseFollowHook }) {\n\n  // TODO: Change follow button depending on follow relationship\n  function button() {\n    if (isCurrentUser) {\n      return (<TradingCardButton onClick={() => console.log(\"edit profile button clicked!\")}>Edit\n                profile</TradingCardButton>)\n    }\n\n    if (followHook.followsOtherUser && followHook.isFollowedByOtherUser) {\n      return (<TradingCardButton onClick={(e) => followHook.handleToggleFollow(e)}>Unfollow</TradingCardButton>)\n    }\n\n    if (followHook.followsOtherUser) {\n      return (<TradingCardButton onClick={(e) => followHook.handleToggleFollow(e)}>Unfollow</TradingCardButton>)\n    }\n\n    if (!followHook.followsOtherUser && followHook.isFollowedByOtherUser) {\n      return (<TradingCardButton onClick={(e) => followHook.handleToggleFollow(e)}>Follow</TradingCardButton>)\n    }\n\n    // Neither is following each other\n    return (<TradingCardButton onClick={(e) => followHook.handleToggleFollow(e)}>Follow</TradingCardButton>);\n  }\n\n\n  return (<TradingCardContainer>\n    <AvatarPic src={user.profilePic} />\n    <AllCapsName>{user.name.toUpperCase()}</AllCapsName>\n    <Subtitle>{user.status}</Subtitle>\n    <FollowersAndPostsCountContainer>\n      <SpaceAround />\n      <FollowersCountContainer>\n        <BigBoldNumber>\n          {user.followers.length}\n        </BigBoldNumber>\n        {user.followers.length !== 1 ? \"followers\" : \"follower\"}\n            </FollowersCountContainer>\n      <SpaceBetweenFollowersAndPosts />\n      <PostsCountContainer>\n        <BigBoldNumber>\n          {user.posts.length}\n        </BigBoldNumber>\n                posts\n            </PostsCountContainer>\n      <SpaceAround />\n    </FollowersAndPostsCountContainer>\n    <SpaceAround />\n    {button()}\n  </TradingCardContainer>)\n}","import React, {useState} from \"react\";\r\nimport {CurrentLoggedInUser} from \"../../store/types\";\r\nimport styled from '@emotion/styled';\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport Card from \"../home/Card\";\r\n\r\nconst Container = styled.div`\r\n  width: 816px; // to match the Card.tsx width\r\n  align-content: center;\r\n`\r\n\r\nconst PostsContainer = styled.div`\r\n  margin-top: 34px;\r\n  \r\n`\r\n\r\nconst SavedPostsContainer = PostsContainer;\r\n\r\n\r\nexport function OwnPostsBoard({user}: {user: CurrentLoggedInUser}) {\r\n    const [tabIdx, setTabIdx] = useState(0);\r\n\r\n    function child() {\r\n        if (tabIdx === 0) {\r\n            return (\r\n                <PostsContainer>\r\n                    {user.posts.map(postID => <Card postID={postID} />)}\r\n                </PostsContainer>\r\n            );\r\n        } else {\r\n            return (\r\n                <SavedPostsContainer>\r\n                    {user.savedPosts.map(postID => <Card postID={postID} />)}\r\n                </SavedPostsContainer>\r\n            );\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <Tabs\r\n              value={tabIdx}\r\n              onChange={(_, newValue) => {setTabIdx(newValue)}}\r\n              indicatorColor=\"primary\"\r\n              textColor=\"inherit\"\r\n              variant=\"fullWidth\"\r\n            >\r\n              <Tab\r\n                label=\"Posts\"\r\n                style={{\r\n                  fontFamily: \"Roboto\",\r\n                  textTransform: \"none\",\r\n                  fontWeight: tabIdx === 0 ? \"bold\" : \"lighter\",\r\n                  fontSize: \"1.2rem\",\r\n                }}\r\n              />\r\n              <Tab\r\n                 label=\"Saved\"\r\n                 style={{\r\n                   fontFamily: \"Roboto\",\r\n                   textTransform: \"none\",\r\n                   fontWeight: tabIdx === 1 ? \"bold\" : \"lighter\",\r\n                   fontSize: \"1.2rem\",\r\n                 }}\r\n              />\r\n            </Tabs>\r\n            {child()}\r\n        </Container>\r\n    );\r\n}","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../reducers/rootReducer\";\r\nimport { CurrentLoggedInUser } from \"../../store/types\";\r\nimport styled from '@emotion/styled';\r\nimport { ProfileBanner } from \"./ProfileBanner\";\r\nimport DefaultImg from \"../../assets/defaultUserProfileBannerImg.jpg\";\r\nimport { TradingCard } from \"./TradingCard\";\r\nimport { OwnPostsBoard } from \"./OwnPostsBoard\";\r\n\r\nexport const Container = styled.div`\r\n  display: flex;\r\n`\r\n\r\nexport const FlexSpace = styled.div<{ flex?: number }>`\r\n  flex: ${props => props.flex || 1};\r\n`\r\n\r\nexport const WidthSpace = styled.div<{ width: string }>`\r\n  width: ${props => props.width};\r\n`\r\n\r\nexport const HeightSpace = styled.div<{ height: string }>`\r\n  height: ${props => props.height};\r\n`\r\n\r\nexport function OwnProfile() {\r\n  const user = useSelector<RootState, CurrentLoggedInUser>(state => state.user);\r\n  const src = user.profileBanner || DefaultImg;\r\n\r\n  return (\r\n    <>\r\n      <ProfileBanner imgSrc={src} />\r\n      <HeightSpace height=\"26px\" />\r\n      <Container>\r\n        <FlexSpace flex={1} />\r\n        <TradingCard user={user} isCurrentUser />\r\n        <WidthSpace width=\"47px\" />\r\n        <OwnPostsBoard user={user} />\r\n        <FlexSpace flex={3} />\r\n      </Container>\r\n    </>\r\n  );\r\n}","import React, { useEffect } from \"react\";\r\nimport {User} from \"../../store/types\";\r\nimport styled from \"@emotion/styled\";\r\nimport Card from \"../home/Card\";\r\nimport { Loading } from \"../common/Loading\";\r\nimport {fetchUserByUsername} from \"../../reducers/usersSlice\";\r\nimport {AppDispatch} from \"../../store\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\nconst Container = styled.div`\r\n  width: 816px; // to match the Card.tsx width\r\n  align-content: center;\r\n`\r\n\r\nconst PostsContainer = styled.div`\r\n  margin-top: 34px;\r\n  \r\n`\r\n\r\nexport function OtherPostsBoard ({user}: {user: User}) {\r\n    const dispatch = useDispatch<AppDispatch>();\r\n\r\n    useEffect(() => {\r\n        if (!user?.posts) {\r\n            dispatch(fetchUserByUsername(user.userID));\r\n        }\r\n    }, []);\r\n\r\n    if (!user?.posts) {\r\n        return <Loading />\r\n    }\r\n\r\n    return <Container>\r\n        <PostsContainer>\r\n            {user.posts.map(postID => <Card postID={postID} />)}\r\n        </PostsContainer>\r\n    </Container>\r\n}","import React, {useEffect, useState} from \"react\";\r\nimport {User} from \"../../store/types\";\r\nimport {RootState} from \"../../reducers/rootReducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppDispatch} from \"../../store\";\r\nimport {fetchUserByUsername} from \"../../reducers/usersSlice\";\r\nimport {NotFoundError} from \"../common/NotFoundError\";\r\nimport {unwrapResult} from \"@reduxjs/toolkit\";\r\nimport {ProfileBanner} from \"./ProfileBanner\";\r\nimport {TradingCard} from \"./TradingCard\";\r\nimport styled from \"@emotion/styled\";\r\nimport {OtherPostsBoard} from \"./OtherPostsBoard\";\r\nimport { Loading } from \"../common/Loading\";\r\nimport DefaultImg from \"../../assets/defaultUserProfileBannerImg.jpg\";\r\nimport {useFollow} from \"../../hooks/useFollow\";\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n`\r\n\r\nconst FlexSpace = styled.div<{flex: number}>`\r\n  flex: ${props => props.flex};\r\n`\r\n\r\nconst WidthSpace = styled.div<{width: string}>`\r\n  width: ${props => props.width};\r\n`\r\n\r\nconst HeightSpace = styled.div<{height: string}>`\r\n  height: ${props => props.height};\r\n`\r\n\r\nexport function OtherProfile({username}: {username: string}) {\r\n    const userObjectID = useSelector<RootState, string>(state => state.users.usernameToID[username]);\r\n    const user = useSelector<RootState, User>(state => state.users.entities[userObjectID]);\r\n    const [notFound, setNotFound] = useState(false);\r\n    const followHook = useFollow(user?._id);\r\n    const dispatch = useDispatch<AppDispatch>();\r\n\r\n\r\n    useEffect(() => {\r\n        if (!user?.followers) {\r\n            dispatch(fetchUserByUsername(username))\r\n                .then(unwrapResult)\r\n                .catch(err => setNotFound(true));\r\n        }\r\n    }, []);\r\n\r\n    if (notFound) {\r\n        return <NotFoundError />\r\n    }\r\n\r\n    if (!user?.followers) {\r\n        return <Loading />\r\n    }\r\n    const src = user.profileBanner || DefaultImg;\r\n    return <>\r\n        <ProfileBanner imgSrc={src}/>\r\n        <HeightSpace height=\"26px\" />\r\n        <Container>\r\n            <FlexSpace flex={1} />\r\n            <TradingCard user={user} isCurrentUser={false} followHook={followHook} />\r\n            <WidthSpace width=\"47px\"/>\r\n            <OtherPostsBoard user={user}/>\r\n            <FlexSpace flex={3} />\r\n        </Container>\r\n    </>\r\n}","import { initializeGitHubOAuth } from \"../pages/login/login\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { RootState } from \"../reducers/rootReducer\";\r\nimport {CurrentLoggedInUser} from \"../store/types\";\r\nimport { unfollow, follow } from \"../reducers/userSlice\";\r\n\r\n\r\ntype HandleToggleFollow = (event?) => void;\r\n\r\nexport type UseFollowHook = {\r\n    followsOtherUser: boolean,\r\n    isFollowedByOtherUser: boolean,\r\n    handleToggleFollow: HandleToggleFollow\r\n}\r\n\r\n/**\r\n * Helper hook for displaying and interacting with follows\r\n *\r\n * @param otherUserID The ID of the user to follow or unfollow\r\n */\r\nexport function useFollow(otherUserID?: string): UseFollowHook {\r\n    const currentUser = useSelector<RootState, CurrentLoggedInUser>(state => state.user);\r\n    const dispatch = useDispatch();\r\n\r\n    // Not logged in\r\n    if (!currentUser) {\r\n        return {\r\n            followsOtherUser: false,\r\n            isFollowedByOtherUser: false,\r\n            // Redirect user to log in\r\n            handleToggleFollow: initializeGitHubOAuth\r\n        }\r\n    }\r\n\r\n    // Edge case, not done loading yet\r\n    if (!currentUser.followersSet) {\r\n        return null;\r\n    }\r\n\r\n    // Same person!\r\n    if (currentUser._id === otherUserID) {\r\n        return null;\r\n    }\r\n\r\n    const followsOtherUser = !!currentUser.followingSet[otherUserID];\r\n    let handleToggleFollow: HandleToggleFollow;\r\n    if (followsOtherUser) {\r\n        handleToggleFollow = (event?) => {\r\n            if (event) {\r\n                event.preventDefault();\r\n            }\r\n            dispatch(unfollow({userID: otherUserID}));\r\n        }\r\n    } else {\r\n        handleToggleFollow = (event?) => {\r\n            if (event) {\r\n                event.preventDefault();\r\n            }\r\n            dispatch(follow({userID: otherUserID}));\r\n        }\r\n    }\r\n\r\n    const isFollowedByOtherUser = !!currentUser.followersSet[otherUserID];\r\n    return {\r\n        followsOtherUser,\r\n        isFollowedByOtherUser,\r\n        handleToggleFollow,\r\n    }\r\n}","import { createStyles, makeStyles } from '@material-ui/core/styles';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useParams, Redirect } from 'react-router-dom';\r\n\r\nimport { ViewProfileParams } from '../../App';\r\nimport { Loading } from '../common/Loading';\r\nimport { NotFoundError } from '../common/NotFoundError';\r\nimport { getLoggedInUser, getUserForViewProfile } from '../../reducers/userSlice';\r\nimport { RootState } from '../../reducers/rootReducer';\r\nimport { CurrentLoggedInUser, User } from '../../store/types';\r\nimport { OwnProfile } from \"./OwnProfile\";\r\nimport { OtherProfile } from './OtherProfile';\r\nimport styled from '@emotion/styled';\r\n\r\nconst Container = styled.div`\r\n  margin-top: 9.5vh;\r\n`\r\n\r\nconst useStyles = makeStyles(() =>\r\n  createStyles({\r\n    container: {\r\n      display: \"g rid\",\r\n      gridTemplateAreas: `\r\n        \"banner banner banner\"\r\n        \"card board space\"\r\n      `,\r\n      gridTemplateColumns: \"1fr 1.5fr 1fr\",\r\n      gridTemplateRows: \"min-content auto\",\r\n      backgroundColor: \"#E5E5E5\",\r\n      height: \"100%\",\r\n    },\r\n    banner: {\r\n      gridArea: \"banner\",\r\n      marginBottom: \"1rem\",\r\n    },\r\n    card: {\r\n      gridArea: \"card\",\r\n    },\r\n    board: {\r\n      gridArea: \"board\",\r\n    },\r\n  })\r\n);\r\n\r\nexport function ViewProfile() {\r\n  const { username } = useParams<ViewProfileParams>();\r\n  const loggedInUsername = useSelector<RootState, string>(state => state.user?.userID);\r\n\r\n  function child() {\r\n    if (!username) {\r\n      return <Redirect to=\"/\" />\r\n    }\r\n\r\n    if (username === loggedInUsername) {\r\n      return <OwnProfile />\r\n    }\r\n\r\n    if (!loggedInUsername || loggedInUsername !== username) {\r\n      return <OtherProfile username={username} />\r\n    }\r\n  }\r\n\r\n  return (<Container>{child()}</Container>);\r\n}\r\n//\r\n//   let viewedUser = useSelector<RootState, User>(\r\n//     (state) => {\r\n//       const userObjectID = state.user._id;\r\n//       return state.users[userObjectID];\r\n//     }\r\n//   );\r\n//\r\n//   // Load the viewed user if user hasn't loaded yet\r\n//   useEffect(() => {\r\n//     // check redux cache for user(s)\r\n//     if (isLoggedIn) {\r\n//       // check current user\r\n//       if (!currentUser && !loading && !error) {\r\n//         dispatch(getLoggedInUser());\r\n//       }\r\n//     }\r\n//     if (currentUser && currentUser.userID === username) {\r\n//       // Current user is looking at own profile, so there is no other user info to get\r\n//       return;\r\n//     }\r\n//     if (!viewedUser) {\r\n//       dispatch(getUserForViewProfile(username));\r\n//       return;\r\n//     }\r\n//     if (viewedUser && !loading && !error && !viewedUser.posts) {\r\n//       dispatch(getUserForViewProfile(username));\r\n//     }\r\n//   }, []);\r\n//\r\n//   if (!currentUser || loading || !viewedUser) {\r\n//     return <Loading />\r\n//   }\r\n//\r\n//   if (error) {\r\n//     return <NotFoundError />\r\n//   }\r\n//\r\n//   const userIsLookingAtOwnProfile = isLoggedIn && currentUser?.userID === username;\r\n//   if (userIsLookingAtOwnProfile) {\r\n//     viewedUser = currentUser;\r\n//   }\r\n//\r\n//   return (\r\n//     <div className={classes.container}>\r\n//       {/* <div className={classes.banner}>\r\n//         <ProfileBanner imgSrc={viewedUser.item.profileBanner} isUser={userIsLookingAtOwnProfile}></ProfileBanner>\r\n//       </div>\r\n//       <div className={classes.card}>\r\n//         <ProfileCard profile={profile} isUser={userIsLookingAtOwnProfile}></ProfileCard>\r\n//       </div>\r\n//       <div className={classes.board}>\r\n//         {userIsLookingAtOwnProfile ? (\r\n//           <ProfileBoard\r\n//             isUser={userIsLookingAtOwnProfile}\r\n//             user={viewedUser}\r\n//             savedPosts={savedPosts}\r\n//           ></ProfileBoard>\r\n//         ) : (\r\n//             <ProfileBoard isUser={false} posts={posts}></ProfileBoard>\r\n//           )}\r\n//       </div> */}\r\n//     </div>\r\n//   );\r\n// }\r\n","import React, { useEffect } from 'react'\r\nimport { useDispatch } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { logOut } from '../../reducers/isLoggedInSlice';\r\n\r\nexport function LogOut() {\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  useEffect(() => {\r\n    dispatch(logOut());\r\n    history.push('/');\r\n  }, [])\r\n\r\n  return <></>\r\n}","import React, { useState, useEffect } from 'react'\r\nimport { DevApi } from '../../api';\r\n\r\n/**\r\n * Used for testing only\r\n */\r\nexport function Experimental() {\r\n  const [text, setText] = useState(\"...\");\r\n  useEffect(() => {\r\n    const api = new DevApi();\r\n    //@ts-ignore\r\n    api.devControllerMarcoPersonal().then(res => res.json()).then(res => setText(JSON.stringify(res)));\r\n  }, [])\r\n\r\n  return <h1 style={{height: \"500px\", marginTop: \"200px\", \"zIndex\": 500 }}>{text}</h1>\r\n}","import React, {useEffect} from \"react\";\r\nimport {useHistory, useLocation} from \"react-router-dom\";\r\nimport qs from \"qs\";\r\nimport {stateContainer} from \"./login\";\r\nimport {AuthApi} from \"../../api\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {loginSuccess} from \"../../reducers/isLoggedInSlice\";\r\nimport {AppDispatch} from \"../../store\";\r\n\r\nexport function LoginGitHub() {\r\n  const location = useLocation();\r\n  const history = useHistory();\r\n  const dispatch = useDispatch<AppDispatch>();\r\n\r\n  const parsed = qs.parse(location.search);\r\n  const code = parsed[\"?code\"];\r\n  const state = parsed[\"state\"];\r\n\r\n  const expectedState = stateContainer.state;\r\n\r\n  if ((state as string) !== expectedState) {\r\n    console.log(\"Got back different state from GitHub OAuth!\");\r\n  }\r\n\r\n  useEffect(() => {\r\n    new AuthApi()\r\n      .authControllerLoginGitHub({\r\n        code: code as string,\r\n        state: state as string,\r\n      })\r\n      .then((loginSuccessDto) => {\r\n        dispatch(loginSuccess(loginSuccessDto));\r\n        history.push(\"/\");\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  }, []);\r\n\r\n  if (!code || !state) {\r\n    history.push(\"/\");\r\n  }\r\n\r\n  return <h1>Hello... we are waiting for the back end to respond!</h1>;\r\n}\r\n","import React from \"react\";\r\nimport styled from \"@emotion/styled\";\r\n\r\nconst Container = styled.div`\r\n  margin-top: 8vh;\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 85vh;\r\n`\r\n\r\nexport function SearchHomePage() {\r\n    return <Container></Container>\r\n}","import {createAsyncThunk} from \"@reduxjs/toolkit\";\r\nimport {SearchApi} from \"../api\";\r\n\r\n/**\r\n * At this moment, not yet connected to Redux store proper to cache the results.\r\n */\r\nexport const search = createAsyncThunk(\r\n    'search',\r\n    async ({query}: {query: string}) => {\r\n        const api = new SearchApi();\r\n        const posts = await api.searchControllerSearch(query);\r\n        return posts;\r\n    });\r\n\r\n","import React, {useEffect, useState} from \"react\";\r\nimport styled from \"@emotion/styled\";\r\nimport {Loading} from \"../common/Loading\";\r\nimport {NotFoundError} from \"../common/NotFoundError\";\r\nimport {AppDispatch} from \"../../store\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {search} from \"../../reducers/search\";\r\nimport {unwrapResult} from \"@reduxjs/toolkit\";\r\nimport ErrorPage from \"../common/ErrorPage\";\r\nimport Card from \"../home/Card\";\r\nimport {FlexSpace} from \"../view_profile/OwnProfile\";\r\n\r\nconst Header = styled.h2`\r\n  text-align: center;\r\n`\r\n\r\nconst Container = styled.div`\r\n  margin-top: 10vh;\r\n  height: 90vh;\r\n`\r\n\r\nconst Content = styled.div`\r\n  display: flex;\r\n`\r\n\r\nexport function Search({query}: {query:string}) {\r\n    const [results, setResults] = useState(null);\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n    const dispatch = useDispatch<AppDispatch>();\r\n\r\n    useEffect(() => {\r\n        setLoading(true);\r\n        dispatch(search({query}))\r\n            .then(unwrapResult)\r\n            .then(\r\n            dto =>\r\n            {\r\n                setLoading(false);\r\n                setResults(dto.posts);\r\n            }\r\n        ).catch(err => {\r\n            setLoading(false);\r\n            setError(err);\r\n        })\r\n    }, [query]);\r\n\r\n    if (!results || loading) {\r\n        return <Loading />\r\n    }\r\n\r\n    if (results.length === 0) {\r\n        return <NotFoundError />\r\n    }\r\n\r\n    if (error) {\r\n        return <ErrorPage error={error} />\r\n    }\r\n\r\n    // Show search results\r\n    return (\r\n        <Container>\r\n            <Header>{results.length} results for: {query}</Header>\r\n            <Content>\r\n            <FlexSpace />\r\n            <div>\r\n            {results.map((post, idx) => <Card postID={post._id} key={idx} />)}\r\n            </div>\r\n            <FlexSpace />\r\n            </Content>\r\n        </Container>\r\n    )\r\n}","import React from \"react\";\r\nimport qs from \"qs\";\r\nimport {useLocation} from \"react-router-dom\";\r\nimport { SearchHomePage } from \"./SearchHomePage\";\r\nimport {Search} from \"./Search\";\r\n\r\nexport function SearchPage() {\r\n    const location = useLocation();\r\n\r\n    const parsed = qs.parse(location.search);\r\n    const query = parsed[\"?q\"];\r\n\r\n    if (!query) {\r\n        return <SearchHomePage />\r\n    }\r\n\r\n    return <Search query={query.toString()}/>\r\n}","import React from \"react\";\nimport styled from '@emotion/styled';\nimport {CurrentLoggedInUser, Group} from \"../../store/types\";\nimport { AllCapsName, AvatarPic, BigBoldNumber, FollowersAndPostsCountContainer, FollowersCountContainer, PostsCountContainer, SpaceAround, SpaceBetweenFollowersAndPosts, TradingCardButton, TradingCardContainer } from \"../view_profile/TradingCard\";\nimport {RootState} from \"../../reducers/rootReducer\";\nimport {useSelector} from \"react-redux\";\nimport {initializeGitHubOAuth} from \"../login/login\";\n\nconst AdminsContainer = styled.div`\n  text-align: center;\n`\n\nconst Subtitle = styled.h4`\n  margin-top: 4px;\n  padding: 0;\n  font-family: 'Fira Mono', monospace;\n  font-style: normal;\n  font-weight: normal;\n  font-size: 1em;\n  line-height: 23px;\n  color: #606060;\n  text-align: center;\n`;\n\n// https://www.figma.com/file/ehowTfq9OAMUdMf3Qbngi0/Programmers-Social-Network?node-id=50%3A0\nexport function GroupTradingCard({ group }: { group: Group }) {\n  const membersCount = group.admins.length + group.users.length;\n  const user = useSelector<RootState, CurrentLoggedInUser>(state => state.user);\n\n  function bottom() {\n    if (!user) {\n      return <TradingCardButton onClick={initializeGitHubOAuth}>\n        Login to Join\n      </TradingCardButton>\n    }\n\n    if (user && group.admins.includes(user._id)) {\n      return <div style={{textAlign: \"center\"}}>\n        <h3>You are Admin <span role='img' aria-label='crown'>👑</span></h3>\n        <TradingCardButton onClick={()=>{console.log('admin button clicked!')}}>\n          Settings\n        </TradingCardButton>\n      </div>\n    }\n\n    if (user && group.users.includes(user._id)) {\n      return <div style={{textAlign: \"center\"}}><h3>You're a Member <span role='img' aria-label='sunglasses'>😎</span></h3></div>\n    }\n  }\n\n  return (<TradingCardContainer>\n    <AvatarPic src={group.profilePic} />\n    <AllCapsName>{group.name.toUpperCase()}</AllCapsName>\n     <Subtitle>{group.description || `<Coder Community Group/>`}</Subtitle>\n    <FollowersAndPostsCountContainer>\n      <SpaceAround />\n      <FollowersCountContainer>\n        <BigBoldNumber>\n           {membersCount}\n        </BigBoldNumber>\n        {membersCount === 1 ? \"member\" : \"members\"}\n            </FollowersCountContainer>\n      <SpaceBetweenFollowersAndPosts />\n      <PostsCountContainer>\n        <BigBoldNumber>\n          {group.posts.length}\n        </BigBoldNumber>\n        {group.posts.length === 1 ? \"post\" : \"posts\"}\n        </PostsCountContainer>\n      <SpaceAround />\n    </FollowersAndPostsCountContainer>\n    <SpaceAround />\n    <hr style={{marginTop: \"20px\",  width: \"60%\"}} />\n    {bottom()}\n  </TradingCardContainer>)\n}","import React, { useState } from \"react\";\r\nimport { CurrentLoggedInUser, Group } from \"../../store/types\";\r\nimport styled from '@emotion/styled';\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport Card from \"../home/Card\";\r\n\r\nconst Container = styled.div`\r\n  width: 816px; // to match the Card.tsx width\r\n  align-content: center;\r\n`\r\n\r\nconst PostsContainer = styled.div`\r\n  margin-top: 34px;\r\n\r\n`\r\nconst SavedPostsContainer = PostsContainer;\r\n\r\n\r\nexport function GroupPostsBoard({ group }: { group: Group }) {\r\n  const [tabIdx, setTabIdx] = useState(0);\r\n\r\n  function child() {\r\n    if (tabIdx === 0) {\r\n      return (\r\n        <PostsContainer>\r\n          {group.posts.map(postID => <Card postID={postID} />)}\r\n        </PostsContainer>\r\n      );\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <Tabs\r\n        value={tabIdx}\r\n        onChange={(_, newValue) => { setTabIdx(newValue) }}\r\n        indicatorColor=\"primary\"\r\n        textColor=\"inherit\"\r\n        variant=\"fullWidth\"\r\n      >\r\n        <Tab\r\n          label=\"Posts\"\r\n          style={{\r\n            fontFamily: \"Roboto\",\r\n            textTransform: \"none\",\r\n            fontWeight: tabIdx === 0 ? \"bold\" : \"lighter\",\r\n            fontSize: \"1.2rem\",\r\n          }}\r\n        />\r\n        <Tab\r\n          label=\"Saved\"\r\n          style={{\r\n            fontFamily: \"Roboto\",\r\n            textTransform: \"none\",\r\n            fontWeight: tabIdx === 1 ? \"bold\" : \"lighter\",\r\n            fontSize: \"1.2rem\",\r\n          }}\r\n        />\r\n      </Tabs>\r\n      {child()}\r\n    </Container>\r\n  );\r\n}","import React, {useEffect, useState} from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {useParams} from 'react-router-dom';\n\nimport {ViewGroupParams} from '../../App';\nimport {Loading} from '../common/Loading';\nimport {NotFoundError} from '../common/NotFoundError';\nimport {RootState} from '../../reducers/rootReducer';\nimport {CurrentLoggedInUser, Group} from '../../store/types';\nimport {ProfileBanner} from '../view_profile/ProfileBanner';\nimport {Container, FlexSpace, HeightSpace, WidthSpace} from '../view_profile/OwnProfile';\nimport DefaultImg from \"../../assets/defaultUserProfileBannerImg.jpg\";\nimport {GroupTradingCard} from './GroupTradingCard';\nimport {GroupPostsBoard} from './GroupPostsBoard';\nimport {fetchGroupById} from \"../../reducers/groupsSlice\";\nimport {AppDispatch} from \"../../store\";\nimport {unwrapResult} from \"@reduxjs/toolkit\";\n\nexport function ViewGroupProfile() {\n  const {groupID} = useParams<ViewGroupParams>();\n  const user = useSelector<RootState, CurrentLoggedInUser>(state => state.user);\n  const group = useSelector<RootState, Group>(state => state.groups.entities[groupID]);\n  const dispatch = useDispatch<AppDispatch>();\n  const [error, setError] = useState(false);\n\n  useEffect(() => {\n    if (!group) {\n      dispatch(fetchGroupById(groupID))\n        .then(unwrapResult)\n        .catch(() => {\n          setError(true);\n        })\n    }\n  }, [groupID]);\n\n  if (error) {\n    return <NotFoundError/>\n  }\n\n  if (!group) {\n    return <Loading />\n  }\n\n  const src = group.profileBanner || DefaultImg;\n\n  return (\n    <>\n      <ProfileBanner imgSrc={src}/>\n      <HeightSpace height=\"26px\"/>\n      <Container>\n        <FlexSpace flex={1}/>\n        <div>\n          <GroupTradingCard group={group}/>\n        </div>\n        <WidthSpace width=\"47px\"/>\n        <GroupPostsBoard group={group}/>\n        <FlexSpace flex={3}/>\n      </Container>\n    </>\n  );\n}","import \"./App.css\";\n\nimport React, {useEffect, useRef, useState} from \"react\";\nimport {BrowserRouter as Router, Redirect, Route, Switch} from \"react-router-dom\";\n// import Footer from \"./containers/footer/Footer\";\nimport Header from \"./containers/header/Header\";\nimport CreatePost from \"./pages/create_post/CreatePost\";\nimport UpdatePost from \"./pages/update_post\";\nimport Home from \"./pages/home\";\nimport {DevLogin} from \"./pages/login/DevLogin\";\nimport {Messenger} from \"./pages/messenger\";\nimport PostDetail from \"./pages/post_detail\";\nimport SearchResult from \"./pages/search_result/SearchResult\";\nimport Upload from \"./pages/create_video_post\";\nimport {ViewProfile} from \"./pages/view_profile/ViewProfile\";\nimport {LogOut} from \"./pages/login/Logout\";\nimport {Experimental} from \"./pages/experimental/Experimental\";\nimport {LoginGitHub} from \"./pages/login/LoginGitHub\";\nimport {AppDispatch} from \"./store\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {fetchTrendingPosts} from \"./reducers/postsSlice\";\nimport {unwrapResult} from \"@reduxjs/toolkit\";\nimport {Loading} from \"./pages/common/Loading\";\nimport ErrorPage from \"./pages/common/ErrorPage\";\nimport {RootState} from \"./reducers/rootReducer\";\nimport {SearchPage} from \"./pages/search/SearchPage\";\nimport {ViewGroupProfile} from \"./pages/group_profile/ViewGroupProfile\";\nimport io from \"socket.io-client\";\nimport {BackEndBaseUriForWs, JwtLocalStorageKey} from \"./constants\";\nimport {createMessageSuccess, fetchMessagesInConversation, receiveNewMessage} from \"./reducers/messagesSlice\";\nimport {NewConversationServerToClientDto} from \"./ws-dto/messages/messenger.ws.dto\";\nimport {addConversation, createConversationSuccess} from \"./reducers/conversationsSlice\";\nimport {CreateCommentEvent} from \"./ws-dto/comments/dto/createComment.ws.dto\";\nimport {createCommentSuccess, getCommentsByPostIDSuccess} from \"./reducers/commentsSlice\";\nimport {GetCommentsByPostIDEvent, GetCommentsServerToClientDto} from \"./ws-dto/comments/dto/getCommentsByPostID.ws.dto\";\n\nexport type ViewProfileParams = {\n  username: string;\n};\n\nexport type ViewGroupParams = {\n  groupID: string;\n}\n\nexport type PostDetailParams = {\n  slug: string;\n};\nexport const SocketContext = React.createContext<React.MutableRefObject<SocketIOClient.Socket>>(null);\n\nexport default function App() {\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const isLoggedIn = useSelector<RootState, boolean>(state => state.isLoggedIn);\n  const dispatch = useDispatch<AppDispatch>();\n\n  const socket = useRef<SocketIOClient.Socket>(null);\n  console.log(\"App.tsx render\");\n  useEffect(() => {\n    console.log(\"App.tsx useEffect (creating new socket)\");\n    socket.current = io(BackEndBaseUriForWs);\n    socket.current.on('connection', () => {\n      console.log(`Connected to ${BackEndBaseUriForWs}: ` + socket.current.connected); // true\n      console.log('Authenticating...'); // true\n      // Send server the JWT so it can authenticate ther user\n      socket.current.emit('authenticate', {jwt: localStorage.getItem(JwtLocalStorageKey)});\n    });\n\n    // The server responds with the same event\n    socket.current.on('authenticate', () => {\n      console.log(\"Auth passed! emitting getcConversationsAndUsers...\");\n      // Upon receiving this event, can now ask for everything else\n      socket.current.emit('getConversationsAndUsers', {}); // an empty object is required for auth\n    });\n\n    socket.current.on('getConversationsAndUsers', (data: any) => {\n      dispatch({\n        type: 'getConversationsAndUsers',\n        payload: data,\n      });\n    });\n\n    socket.current.on('newMessage', (response: any) => {//listen for the incoming response(s) from 'newMessage' event\n      // if message is sent by user\n      if (socket.current.id === response.id) {\n        dispatch(createMessageSuccess(response));\n      } else {\n        dispatch(receiveNewMessage(response));\n      }\n    });\n\n    socket.current.on('newConversation', (data: NewConversationServerToClientDto) => {\n      // Client (user) created the new conversation\n      if (data.isCreator) {\n        dispatch(createConversationSuccess(data.conversation));\n        dispatch(fetchMessagesInConversation({conversationID: data.conversation._id}));\n      } else {\n        // Conversation was created elsewhere\n        dispatch(addConversation(data.conversation))\n      }\n    });\n\n    socket.current.on(GetCommentsByPostIDEvent, (response: GetCommentsServerToClientDto) => {\n      dispatch(getCommentsByPostIDSuccess(response)); // TODO\n    });\n\n    socket.current.on(CreateCommentEvent, (response: any) => {//listen for the incoming response(s) from 'newMessage' event\n      // if message is sent by user\n      dispatch(createCommentSuccess(response));\n    });\n\n  }, [])\n\n  useEffect(() => {\n    setLoading(true);\n    dispatch(fetchTrendingPosts({fetchCount: 0}))\n      .then(unwrapResult).then( //must set dispatch to any to use .then\n      () => {\n        setLoading(false)\n      }\n    ).catch(error => {\n      console.log(error);\n      setError(error);\n      setLoading(false);\n    });\n  }, [isLoggedIn]);\n\n  if (loading) {\n    return <Loading/>\n  }\n\n  if (error) {\n    return <ErrorPage error={error}/>\n  }\n\n  return (\n    <SocketContext.Provider value={socket}>\n\n      <Router>\n        <Header></Header>\n        <Switch>\n          <Route path=\"/user/:username\">\n            <ViewProfile/>\n          </Route>\n          <Route path=\"/group/:groupID\">\n            <ViewGroupProfile/>\n          </Route>\n          <Route path=\"/create-post\">\n            <CreatePost/>\n          </Route>\n          <Route path=\"/update-post/:slug\">\n            <UpdatePost/>\n          </Route>\n          <Route exact path=\"/post\">\n            <Home/>\n          </Route>\n          <Route path=\"/post/:slug\">\n            <PostDetail/>\n          </Route>\n          <Route path=\"/messages\">\n            <Messenger/>\n          </Route>\n          <Route path={\"/search\"}>\n            <SearchPage/>\n          </Route>\n          <Route path=\"/result\">\n            {/*Unused*/}\n            <SearchResult/>\n          </Route>\n          <Route path=\"/video_management\">\n            <Upload/>\n          </Route>\n          <Route path=\"/login/github\">\n            <LoginGitHub/>\n          </Route>\n          <Route path=\"/login\">\n            <DevLogin/>\n          </Route>\n          <Route path=\"/logout\">\n            <LogOut></LogOut>\n          </Route>\n          <Route path=\"/test\">\n            <Experimental/>\n          </Route>\n          <Route path=\"/home\">\n            <Home/>\n          </Route>\n          <Route exact path=\"/\">\n            <Redirect to=\"/home\"></Redirect>\n          </Route>\n        </Switch>\n        {/* <Footer></Footer> */}\n      </Router>\n\n    </SocketContext.Provider>\n  );\n}\n","import { red } from '@material-ui/core/colors';\r\nimport { createMuiTheme } from '@material-ui/core/styles';\r\n\r\n// A custom theme for this app\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    primary: {\r\n      main: '#FFFFFF',\r\n     },\r\n//    secondary: {\r\n//      main: '#19857b',\r\n//    },\r\n    textPrimary: {\r\n      main: '#000000',\r\n    },\r\n\r\n    text: {\r\n   main: '#000000',\r\n    },\r\n    error: {\r\n      main: red.A400,\r\n    },\r\n    background: {\r\n      default: '#fff',\r\n    },\r\n  },\r\n});\r\n\r\nexport default theme;","import {createEntityAdapter, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {fetchTrendingPosts, fetchPostBySlug, fetchPostsByTag} from \"./postsSlice\";\r\nimport {Tag} from \"../store/types\";\r\nimport {GetInitialDataDto, GetInitialDataLoggedInDto, GetPostDetailsSuccessDto, GetPostsByTagDto} from \"../api\";\r\n\r\nconst tagsAdapter = createEntityAdapter<Tag>({\r\n    selectId: item => item._id\r\n})\r\n\r\n//https://redux-toolkit.js.org/api/createSlice\r\nexport const tagsSlice = createSlice({\r\n    name: \"users\",\r\n    initialState: tagsAdapter.getInitialState<{ hasMorePostsInTags: Record<string, boolean> }>({\r\n        hasMorePostsInTags: {\r\n            \"CPP\": true,\r\n        }\r\n    }),\r\n    reducers: {},\r\n    extraReducers: {\r\n        // Initialize Tags slice when initial data is fetched\r\n        [fetchTrendingPosts.fulfilled.type]: (state, action: PayloadAction<GetInitialDataDto | GetInitialDataLoggedInDto>) => {\r\n            // Create tags\r\n            // console.log(\"TAGSLICE::START\")\r\n            // console.log(action.payload)\r\n            // console.log(action.payload.tags)\r\n            tagsAdapter.upsertMany(state, action.payload.tags.map(tag => {\r\n                // console.log(\"TAGSLICE::INMAP\");\r\n                const tagEntity = tag as unknown as Tag;\r\n                // console.log(tagEntity);\r\n                tagEntity.postsSet = {};\r\n                return tagEntity;\r\n            }));\r\n\r\n            // Update tags with trending posts\r\n            action.payload.posts.forEach(post => {\r\n                post.tags.forEach(id => {\r\n                    // For each tag in each post, add/update post to the tag in Redux store (idempotent)\r\n                    tagsAdapter.updateOne(state, {id, changes: {postsSet: {[post._id]: true}}});\r\n                });\r\n            });\r\n\r\n            // Initialize hasMorePostsInTags\r\n            action.payload.tags.forEach(tag => {\r\n                state.hasMorePostsInTags[tag._id] = true;\r\n            })\r\n        },\r\n\r\n        // Update Tags when a post is fetched\r\n        [fetchPostBySlug.fulfilled.type]: (state, action: PayloadAction<GetPostDetailsSuccessDto>) => {\r\n            action.payload.post.tags.forEach(id => {\r\n                tagsAdapter.updateOne(state, {id, changes: {postsSet: {[action.payload.post._id]: true}}});\r\n            });\r\n        },\r\n\r\n        // TODO Update Tags when posts are fetched by tag\r\n        [fetchPostsByTag.fulfilled.type]: (state, action: PayloadAction<GetPostsByTagDto>) => {\r\n            const postsSet = {};\r\n            action.payload.posts.forEach(post => {\r\n                postsSet[post._id] = true\r\n            });\r\n            tagsAdapter.updateOne(state, {id: action.payload.tagID, changes: {postsSet}});\r\n        },\r\n\r\n        // payload is tagID\r\n        [fetchPostsByTag.rejected.type]: (state, action: PayloadAction<string>) => {\r\n            state.hasMorePostsInTags[action.payload] = false;\r\n        }\r\n\r\n        // TODO: add post to tags upon post creation\r\n        // TODO: potentially update tags upon post update\r\n    }\r\n});\r\n\r\nexport default tagsSlice.reducer;","// export function videos(state = {}, action) {\r\n//   return state;\r\n// }\r\n\r\nimport { PayloadAction } from '@reduxjs/toolkit';\r\nimport { PostsApi, VideoApi, GetAllVideosDto, VideoDto } from './../api/api';\r\nimport { Video } from './../store/types';\r\nimport { createEntityAdapter, createAsyncThunk } from '@reduxjs/toolkit';\r\nimport { createSlice } from '@reduxjs/toolkit';\r\n\r\n\r\nconst videosAdapter = createEntityAdapter<Video>({\r\n  selectId: video => video._id,\r\n})\r\n\r\nexport const getAllVideos = createAsyncThunk(\r\n  'getAllVideosStatus',\r\n  async () => {\r\n    return await new VideoApi().videoControllerGetAllVideos();\r\n  }\r\n);\r\n\r\nexport const createVideo = createAsyncThunk(\r\n  'createVideoStatus',\r\n  async (video: any) => {\r\n    const videoDto = { name: video.name, description: video.description };\r\n    return await new VideoApi().videoControllerCreateVideo(videoDto);\r\n  }\r\n)\r\n\r\n// dispatch(createVideo(video))\r\n\r\nexport const videosSlice = createSlice({\r\n  name: 'video',\r\n  initialState: videosAdapter.getInitialState(),\r\n  reducers: {\r\n\r\n  },\r\n  extraReducers: {\r\n    [getAllVideos.fulfilled.type]: (state, action: PayloadAction<GetAllVideosDto>) => {\r\n      const videosToAdd = action.payload.videos;\r\n      videosAdapter.upsertMany(state, videosToAdd);\r\n    },\r\n    [createVideo.fulfilled.type]: (state, action: PayloadAction<VideoDto>) => {\r\n      const video: Video = action.payload;\r\n      videosAdapter.addOne(state, video);\r\n    }\r\n  }\r\n})\r\n\r\nexport default videosSlice.reducer;","import { combineReducers } from \"redux\";\r\nimport postsReducer from './postsSlice';\r\nimport usersReducer from './usersSlice';\r\nimport tagsReducer from './tagsSlice';\r\nimport userReducer from \"./userSlice\";\r\nimport isLoggedInReducer from \"./isLoggedInSlice\";\r\nimport groupsReducer from \"./groupsSlice\";\r\nimport commentsReducer from \"./commentsSlice\";\r\nimport conversationsReducer from \"./conversationsSlice\";\r\nimport videosReducer from \"./videosSlice\";\r\nimport messagesReducer from \"./messagesSlice\";\r\n\r\nconst rootReducer = combineReducers({\r\n  isLoggedIn: isLoggedInReducer,\r\n  user: userReducer,\r\n  users: usersReducer,\r\n  posts: postsReducer,\r\n  tags: tagsReducer,\r\n  groups: groupsReducer,\r\n  comments: commentsReducer,\r\n  conversations: conversationsReducer,\r\n  videos: videosReducer,\r\n  messages: messagesReducer,\r\n})\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>\r\n\r\nexport default rootReducer","import { configureStore } from '@reduxjs/toolkit';\r\nimport rootReducer from '../reducers/rootReducer';\r\n\r\n\r\nconst store = configureStore({\r\n  reducer: rootReducer\r\n})\r\n\r\nexport default store;\r\nexport type AppDispatch = typeof store.dispatch;\r\n","import './index.css';\r\nimport { ThemeProvider } from '@material-ui/core/styles';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport App from './App';\r\nimport theme from './theme';\r\nimport store from './store';\r\n\r\n/*\r\nimport { JwtLocalStorageKey } from './constants';\r\nimport { rootReducer } from './reducers';\r\nimport RootState, {Loadable, Tag} from './store';\r\nimport theme from './theme';\r\nimport {postsCreation} from \"./reducers/postsCreation\";\r\n\r\nconst initialState: RootState = {\r\n  isLoggedIn: !!localStorage.getItem(JwtLocalStorageKey),\r\n  postsCreation: {\r\n    title: '',\r\n    content: '',\r\n    tags: []\r\n  },\r\n\r\n  attachments: {},\r\n  comments: {},\r\n  conversations: {},\r\n  groups: {},\r\n  messages: {},\r\n  posts: {},\r\n  tags: {},\r\n  users: {},\r\n  videos: {},\r\n\r\n  slugs: {},\r\n  userIDs: {},\r\n\r\n  user: { loading: false },\r\n  trendingPosts: { loading: false },\r\n  userOwnPosts: { loading: false },\r\n  trendingVideos: { loading: false },\r\n  savedPosts: { loading: false },\r\n}\r\n\r\nconst store = createStore(rootReducer, initialState, composeWithDevTools(applyMiddleware(thunk)));\r\n */\r\n\r\nconst Root = () => {\r\n  return (\r\n    <React.StrictMode>\r\n      <ThemeProvider theme={theme}>\r\n        <Provider store={store}>\r\n          <App />\r\n        </Provider>\r\n      </ThemeProvider>\r\n    </React.StrictMode>)\r\n}\r\n\r\nReactDOM.render(\r\n  <Root />,\r\n  document.querySelector(\"#root\")\r\n);\r\n","module.exports = __webpack_public_path__ + \"static/media/404.6695af99.svg\";","module.exports = __webpack_public_path__ + \"static/media/defaultUserProfileBannerImg.5cb40d28.jpg\";","module.exports = __webpack_public_path__ + \"static/media/commentIcon.1b5b0267.svg\";","module.exports = __webpack_public_path__ + \"static/media/heartIcon.7746f5e4.svg\";","module.exports = __webpack_public_path__ + \"static/media/heartIconRed.095cbef3.svg\";"],"sourceRoot":""}