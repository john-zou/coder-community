/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * Coder Community
 * The Coder Community API description
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "/".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
  csv: ",",
  ssv: " ",
  tsv: "\t",
  pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
  (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
  url: string;
  options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
  protected configuration: Configuration;

  constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
    // if (configuration) {
    this.configuration = { basePath: "http://localhost:3001" };
    this.basePath = this.configuration.basePath || this.basePath;
    // }
  }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
  name: "RequiredError"
  constructor(public field: string, msg?: string) {
    super(msg);
  }
}

/**
 * 
 * @export
 * @interface GetInitialPostDataDto
 */
export interface GetInitialPostDataDto {
  /**
   * 
   * @type {string}
   * @memberof GetInitialPostDataDto
   */
  author: string;
  /**
   * 
   * @type {string}
   * @memberof GetInitialPostDataDto
   */
  title: string;
  /**
   * 
   * @type {string}
   * @memberof GetInitialPostDataDto
   */
  description: string;
  /**
   * 
   * @type {string}
   * @memberof GetInitialPostDataDto
   */
  content: string;
  /**
   * 
   * @type {Array<string>}
   * @memberof GetInitialPostDataDto
   */
  tags: Array<string>;
  /**
   * 
   * @type {string}
   * @memberof GetInitialPostDataDto
   */
  featuredImg: string;
  /**
   * 
   * @type {number}
   * @memberof GetInitialPostDataDto
   */
  likedByUsers: number;
  /**
   * 
   * @type {number}
   * @memberof GetInitialPostDataDto
   */
  commentsCount: number;
  /**
   * 
   * @type {Array<string>}
   * @memberof GetInitialPostDataDto
   */
  comments: Array<string>;
}
/**
 * 
 * @export
 * @interface GetInitialUserDataDto
 */
export interface GetInitialUserDataDto {
  /**
   * 
   * @type {string}
   * @memberof GetInitialUserDataDto
   */
  userID: string;
  /**
   * 
   * @type {number}
   * @memberof GetInitialUserDataDto
   */
  gitHubID: number;
  /**
   * 
   * @type {string}
   * @memberof GetInitialUserDataDto
   */
  name: string;
  /**
   * 
   * @type {string}
   * @memberof GetInitialUserDataDto
   */
  profilePic: string;
}
/**
 * 
 * @export
 * @interface GitHubLoginBody
 */
export interface GitHubLoginBody {
  /**
   * 
   * @type {string}
   * @memberof GitHubLoginBody
   */
  code: string;
  /**
   * 
   * @type {string}
   * @memberof GitHubLoginBody
   */
  state: string;
}
/**
 * 
 * @export
 * @interface GoogleLoginBody
 */
export interface GoogleLoginBody {
}
/**
 * 
 * @export
 * @interface InitialDataDto
 */
export interface InitialDataDto {
  /**
   * 
   * @type {GetInitialUserDataDto}
   * @memberof InitialDataDto
   */
  user: GetInitialUserDataDto;
  /**
   * 
   * @type {Array<GetInitialPostDataDto>}
   * @memberof InitialDataDto
   */
  posts: Array<GetInitialPostDataDto>;
}
/**
 * 
 * @export
 * @interface LogOut
 */
export interface LogOut {
}
/**
 * 
 * @export
 * @interface LogOutSuccess
 */
export interface LogOutSuccess {
}
/**
 * 
 * @export
 * @interface LoginSuccess
 */
export interface LoginSuccess {
  /**
   * The CoderCommunity JWT
   * @type {string}
   * @memberof LoginSuccess
   */
  jwt: string;
  /**
   * 
   * @type {string}
   * @memberof LoginSuccess
   */
  userID: string;
  /**
   * 
   * @type {boolean}
   * @memberof LoginSuccess
   */
  isNewUser: boolean;
}
/**
 * AuthenticationApi - fetch parameter creator
 * @export
 */
export const AuthenticationApiFetchParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * 
     * @param {LogOut} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerLogOut(body: LogOut, options: any = {}): FetchArgs {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError('body', 'Required parameter body was null or undefined when calling authControllerLogOut.');
      }
      const localVarPath = `/api/logout`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
      const needsSerialization = (<any>"LogOut" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 
     * @param {GitHubLoginBody} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerLoginGitHub(body: GitHubLoginBody, options: any = {}): FetchArgs {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError('body', 'Required parameter body was null or undefined when calling authControllerLoginGitHub.');
      }
      const localVarPath = `/api/login/github`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
      const needsSerialization = (<any>"GitHubLoginBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 
     * @param {GoogleLoginBody} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerLoginGoogle(body: GoogleLoginBody, options: any = {}): FetchArgs {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError('body', 'Required parameter body was null or undefined when calling authControllerLoginGoogle.');
      }
      const localVarPath = `/api/login/google`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
      const needsSerialization = (<any>"GoogleLoginBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  }
};

/**
 * AuthenticationApi - functional programming interface
 * @export
 */
export const AuthenticationApiFp = function (configuration?: Configuration) {
  return {
    /**
     * 
     * @param {LogOut} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerLogOut(body: LogOut, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<LogOutSuccess> {
      const localVarFetchArgs = AuthenticationApiFetchParamCreator(configuration).authControllerLogOut(body, options);
      return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * 
     * @param {GitHubLoginBody} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerLoginGitHub(body: GitHubLoginBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<LoginSuccess> {
      const localVarFetchArgs = AuthenticationApiFetchParamCreator(configuration).authControllerLoginGitHub(body, options);
      return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * 
     * @param {GoogleLoginBody} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerLoginGoogle(body: GoogleLoginBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<LoginSuccess> {
      const localVarFetchArgs = AuthenticationApiFetchParamCreator(configuration).authControllerLoginGoogle(body, options);
      return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
  }
};

/**
 * AuthenticationApi - factory interface
 * @export
 */
export const AuthenticationApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
  return {
    /**
     * 
     * @param {LogOut} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerLogOut(body: LogOut, options?: any) {
      return AuthenticationApiFp(configuration).authControllerLogOut(body, options)(fetch, basePath);
    },
    /**
     * 
     * @param {GitHubLoginBody} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerLoginGitHub(body: GitHubLoginBody, options?: any) {
      return AuthenticationApiFp(configuration).authControllerLoginGitHub(body, options)(fetch, basePath);
    },
    /**
     * 
     * @param {GoogleLoginBody} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerLoginGoogle(body: GoogleLoginBody, options?: any) {
      return AuthenticationApiFp(configuration).authControllerLoginGoogle(body, options)(fetch, basePath);
    },
  };
};

/**
 * AuthenticationApi - object-oriented interface
 * @export
 * @class AuthenticationApi
 * @extends {BaseAPI}
 */
export class AuthenticationApi extends BaseAPI {
  /**
   * 
   * @param {LogOut} body 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthenticationApi
   */
  public authControllerLogOut(body: LogOut, options?: any) {
    return AuthenticationApiFp(this.configuration).authControllerLogOut(body, options)(this.fetch, this.basePath);
  }

  /**
   * 
   * @param {GitHubLoginBody} body 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthenticationApi
   */
  public authControllerLoginGitHub(body: GitHubLoginBody, options?: any) {
    return AuthenticationApiFp(this.configuration).authControllerLoginGitHub(body, options)(this.fetch, this.basePath);
  }

  /**
   * 
   * @param {GoogleLoginBody} body 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthenticationApi
   */
  public authControllerLoginGoogle(body: GoogleLoginBody, options?: any) {
    return AuthenticationApiFp(this.configuration).authControllerLoginGoogle(body, options)(this.fetch, this.basePath);
  }

}
/**
 * DefaultApi - fetch parameter creator
 * @export
 */
export const DefaultApiFetchParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    appControllerGetHello(options: any = {}): FetchArgs {
      const localVarPath = `/api`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadControllerUploadPrivateFile(options: any = {}): FetchArgs {
      const localVarPath = `/api/upload/private/file`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadControllerUploadProfileBannerPic(options: any = {}): FetchArgs {
      const localVarPath = `/api/upload/profile-banner-pic`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadControllerUploadProfilePic(options: any = {}): FetchArgs {
      const localVarPath = `/api/upload/profile-pic`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadControllerUploadPublicImage(options: any = {}): FetchArgs {
      const localVarPath = `/api/upload/public/image`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadControllerUploadPublicVideo(options: any = {}): FetchArgs {
      const localVarPath = `/api/upload/public/video`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function (configuration?: Configuration) {
  return {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    appControllerGetHello(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
      const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).appControllerGetHello(options);
      return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadControllerUploadPrivateFile(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).uploadControllerUploadPrivateFile(options);
      return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadControllerUploadProfileBannerPic(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).uploadControllerUploadProfileBannerPic(options);
      return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadControllerUploadProfilePic(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).uploadControllerUploadProfilePic(options);
      return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadControllerUploadPublicImage(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).uploadControllerUploadPublicImage(options);
      return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadControllerUploadPublicVideo(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
      const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).uploadControllerUploadPublicVideo(options);
      return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response;
          } else {
            throw response;
          }
        });
      };
    },
  }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
  return {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    appControllerGetHello(options?: any) {
      return DefaultApiFp(configuration).appControllerGetHello(options)(fetch, basePath);
    },
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadControllerUploadPrivateFile(options?: any) {
      return DefaultApiFp(configuration).uploadControllerUploadPrivateFile(options)(fetch, basePath);
    },
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadControllerUploadProfileBannerPic(options?: any) {
      return DefaultApiFp(configuration).uploadControllerUploadProfileBannerPic(options)(fetch, basePath);
    },
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadControllerUploadProfilePic(options?: any) {
      return DefaultApiFp(configuration).uploadControllerUploadProfilePic(options)(fetch, basePath);
    },
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadControllerUploadPublicImage(options?: any) {
      return DefaultApiFp(configuration).uploadControllerUploadPublicImage(options)(fetch, basePath);
    },
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadControllerUploadPublicVideo(options?: any) {
      return DefaultApiFp(configuration).uploadControllerUploadPublicVideo(options)(fetch, basePath);
    },
  };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
  /**
   * 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public appControllerGetHello(options?: any) {
    return DefaultApiFp(this.configuration).appControllerGetHello(options)(this.fetch, this.basePath);
  }

  /**
   * 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public uploadControllerUploadPrivateFile(options?: any) {
    return DefaultApiFp(this.configuration).uploadControllerUploadPrivateFile(options)(this.fetch, this.basePath);
  }

  /**
   * 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public uploadControllerUploadProfileBannerPic(options?: any) {
    return DefaultApiFp(this.configuration).uploadControllerUploadProfileBannerPic(options)(this.fetch, this.basePath);
  }

  /**
   * 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public uploadControllerUploadProfilePic(options?: any) {
    return DefaultApiFp(this.configuration).uploadControllerUploadProfilePic(options)(this.fetch, this.basePath);
  }

  /**
   * 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public uploadControllerUploadPublicImage(options?: any) {
    return DefaultApiFp(this.configuration).uploadControllerUploadPublicImage(options)(this.fetch, this.basePath);
  }

  /**
   * 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public uploadControllerUploadPublicVideo(options?: any) {
    return DefaultApiFp(this.configuration).uploadControllerUploadPublicVideo(options)(this.fetch, this.basePath);
  }

}
/**
 * PostsApi - fetch parameter creator
 * @export
 */
export const PostsApiFetchParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postsControllerGetPostsFromDevTo(options: any = {}): FetchArgs {
      const localVarPath = `/api/posts`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  }
};

/**
 * PostsApi - functional programming interface
 * @export
 */
export const PostsApiFp = function (configuration?: Configuration) {
  return {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postsControllerGetPostsFromDevTo(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<GetInitialPostDataDto>> {
      const localVarFetchArgs = PostsApiFetchParamCreator(configuration).postsControllerGetPostsFromDevTo(options);
      return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
  }
};

/**
 * PostsApi - factory interface
 * @export
 */
export const PostsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
  return {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postsControllerGetPostsFromDevTo(options?: any) {
      return PostsApiFp(configuration).postsControllerGetPostsFromDevTo(options)(fetch, basePath);
    },
  };
};

/**
 * PostsApi - object-oriented interface
 * @export
 * @class PostsApi
 * @extends {BaseAPI}
 */
export class PostsApi extends BaseAPI {
  /**
   * 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PostsApi
   */
  public postsControllerGetPostsFromDevTo(options?: any) {
    return PostsApiFp(this.configuration).postsControllerGetPostsFromDevTo(options)(this.fetch, this.basePath);
  }

}
/**
 * TrendingApi - fetch parameter creator
 * @export
 */
export const TrendingApiFetchParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    trendingControllerGetTrending(options: any = {}): FetchArgs {
      const localVarPath = `/api/trending`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  }
};

/**
 * TrendingApi - functional programming interface
 * @export
 */
export const TrendingApiFp = function (configuration?: Configuration) {
  return {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    trendingControllerGetTrending(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InitialDataDto> {
      const localVarFetchArgs = TrendingApiFetchParamCreator(configuration).trendingControllerGetTrending(options);
      return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            throw response;
          }
        });
      };
    },
  }
};

/**
 * TrendingApi - factory interface
 * @export
 */
export const TrendingApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
  return {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    trendingControllerGetTrending(options?: any) {
      return TrendingApiFp(configuration).trendingControllerGetTrending(options)(fetch, basePath);
    },
  };
};

/**
 * TrendingApi - object-oriented interface
 * @export
 * @class TrendingApi
 * @extends {BaseAPI}
 */
export class TrendingApi extends BaseAPI {
  /**
   * 
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TrendingApi
   */
  public trendingControllerGetTrending(options?: any) {
    return TrendingApiFp(this.configuration).trendingControllerGetTrending(options)(this.fetch, this.basePath);
  }

}
